{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":437,\"hp\":10,\"max_hp\":10,\"strength\":2,\"defense\":2,\"dexterity\":2,\"agility\":2,\"charisma\":155,\"intelligence\":0,\"hacking_chance_mult\":1.16,\"hacking_speed_mult\":1.16,\"hacking_money_mult\":1.16,\"hacking_grow_mult\":1.16,\"hacking_exp\":68338003.85652812,\"strength_exp\":26.378400000000557,\"defense_exp\":26.378400000000557,\"dexterity_exp\":26.378400000000557,\"agility_exp\":26.378400000000557,\"charisma_exp\":33182.45969211215,\"intelligence_exp\":0,\"hacking_mult\":1.16,\"strength_mult\":1.16,\"defense_mult\":1.16,\"dexterity_mult\":1.16,\"agility_mult\":1.16,\"charisma_mult\":1.16,\"hacking_exp_mult\":1.16,\"strength_exp_mult\":1.16,\"defense_exp_mult\":1.16,\"dexterity_exp_mult\":1.16,\"agility_exp_mult\":1.16,\"charisma_exp_mult\":1.16,\"company_rep_mult\":1.16,\"faction_rep_mult\":1.16,\"money\":325438828289.7657,\"city\":\"Sector-12\",\"location\":\"MegaCorp\",\"jobs\":{\"Joe's Guns\":\"Employee\",\"Universal Energy\":\"Software Engineering Intern\",\"Blade Industries\":\"Junior Software Engineer\",\"Bachman & Associates\":\"Software Engineering Intern\",\"MegaCorp\":\"Junior Software Engineer\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[\"zombie-0\",\"zombie-1\",\"zombie-2\",\"zombie-3\",\"zombie-4\",\"zombie-5\",\"zombie-6\",\"zombie-7\",\"zombie-8\",\"zombie-9\",\"zombie-10\",\"zombie-11\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":179457.40000131915,\"ram\":64,\"totalMoneyGenerated\":1067918047.3293544,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":179357.6000013188,\"ram\":64,\"totalMoneyGenerated\":1067905836.9180841,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":178795.20000131673,\"ram\":64,\"totalMoneyGenerated\":1067502593.3020834,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171645.80000129086,\"ram\":64,\"totalMoneyGenerated\":1061471812.0865176,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171645.20000129088,\"ram\":64,\"totalMoneyGenerated\":1061475639.2401836,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171642.00000129087,\"ram\":64,\"totalMoneyGenerated\":1061481916.4517348,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171485.80000129028,\"ram\":64,\"totalMoneyGenerated\":1061446361.1423104,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171483.40000129028,\"ram\":64,\"totalMoneyGenerated\":1061439872.1602726,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":171407.20000129,\"ram\":64,\"totalMoneyGenerated\":1061424469.5288019,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":170421.4000012864,\"ram\":64,\"totalMoneyGenerated\":1073159168.1898682,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":162435.80000113967,\"ram\":64,\"totalMoneyGenerated\":1072131300.0670209,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":162435.40000113967,\"ram\":64,\"totalMoneyGenerated\":1072127388.3446008,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91230.39999962217,\"ram\":64,\"totalMoneyGenerated\":963591140.256144,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91229.79999962218,\"ram\":64,\"totalMoneyGenerated\":963577585.414329,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91227.19999962217,\"ram\":64,\"totalMoneyGenerated\":963571097.7299867,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91224.79999962216,\"ram\":64,\"totalMoneyGenerated\":963575421.0774614,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91156.79999962192,\"ram\":64,\"totalMoneyGenerated\":963425037.9823709,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91155.3999996219,\"ram\":64,\"totalMoneyGenerated\":963430458.0850616,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91088.19999962166,\"ram\":64,\"totalMoneyGenerated\":962896677.7852498,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":91087.59999962166,\"ram\":64,\"totalMoneyGenerated\":962893433.7829733,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":89647.59999961949,\"ram\":64,\"totalMoneyGenerated\":951258992.2613024,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":89644.1999996195,\"ram\":64,\"totalMoneyGenerated\":951253276.9191332,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":88719.99999962034,\"ram\":64,\"totalMoneyGenerated\":943772131.6786453,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":10638.71868670051,\"onlineTimeSeconds\":88717.19999962034,\"ram\":64,\"totalMoneyGenerated\":943770844.137081,\"name\":\"hacknet-node-23\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Volhaven\",\"NiteSec\",\"CyberSec\",\"Tian Di Hui\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"}],\"augmentations\":[],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.16,\"crime_success_mult\":1.16,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"NiteSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.174,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.5251171282051282,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":24.255599999999962,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":73.20132767179487,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":250,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":34400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.16,\"hacknet_node_money_mult\":1.16,\"hacknet_node_purchase_cost_mult\":0.84,\"hacknet_node_ram_cost_mult\":0.84,\"hacknet_node_core_cost_mult\":0.84,\"hacknet_node_level_cost_mult\":0.84,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642836933344,\"totalPlaytime\":1401870800,\"playtimeSinceLastAug\":180337600,\"playtimeSinceLastBitnode\":180337600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":3150000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":314826275687.6867,\"hacknet\":24286500499.1566,\"hacknet_expenses\":-10801597728.879635,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":325438827289.7657,\"work\":62838256.23783587,\"servers\":-2044789425.2149615,\"other\":-312700000,\"augmentations\":-3727700000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":3150000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":314826275687.6867,\"hacknet\":24286500499.1566,\"hacknet_expenses\":-10801597728.879635,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":325438827289.7657,\"work\":62838256.23783587,\"servers\":-2044789425.2149615,\"other\":-312700000,\"augmentations\":-3727700000}},\"scriptProdSinceLastAug\":297742377904.4468,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641754584653},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641754584662},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641754584664},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641754584666},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641754584668},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641754584671},{\"ID\":\"NS2\",\"unlockedOn\":1641754584674},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641754584677},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641754584679},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641754584682},{\"ID\":\"TOR\",\"unlockedOn\":1641754584684},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641845444497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641850365093},{\"ID\":\"NITESEC\",\"unlockedOn\":1641861956094},{\"ID\":\"FROZE\",\"unlockedOn\":1641875022751},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641960792866},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641969706253},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642038598392},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642042880540},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642121167108},{\"ID\":\"4S\",\"unlockedOn\":1642134698100},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642309956412},{\"ID\":\"DONATION\",\"unlockedOn\":1642364578003},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642460741823},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642564918740},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642582018745},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642585258746},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642586518778},{\"ID\":\"SF1.1\",\"unlockedOn\":1642653271757}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"28.3.8.1\",\"isConnectedTo\":true,\"maxRam\":512,\"messages\":[\"hackers-starting-handbook.lit\",\"sector-12-crime.lit\",\"brighter-than-the-sun.lit\",\"democracy-is-dead.lit\",\"the-new-god.lit\",\"the-hidden-world.lit\",\"new-triads.lit\",\"man-and-machine.lit\",\"simulated-reality.lit\",\"secret-societies.lit\",\"tensions-in-tech-race.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\",\"history-of-synthoids.lit\",\"coded-intelligence.lit\",\"beyond-man.lit\",\"cost-of-immortality.lit\",\"alpha-omega.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"relaySMTP.exe-12.35%-INC\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"ramUsed\":442.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"contracts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":75165.38399999999,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44168.80999989001,\"pid\":1,\"ramUsage\":29,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a0590f4f-7cda-4ede-9970-d9621ddc311b\",\"moduleSequenceNumber\":168844},{\"filename\":\"util.js\",\"url\":\"blob:file:///9155e27d-161c-4a48-b744-a12160c58c5c\",\"moduleSequenceNumber\":168840},{\"filename\":\"contracts.js\",\"url\":\"blob:file:///9c43dc36-f49e-4dab-8915-6f1b48e2e265\",\"moduleSequenceNumber\":169463}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"control.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":21754622.69518648,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.514,\"onlineExpGained\":35794463.53500063,\"onlineMoneyMade\":289820127009.4468,\"onlineRunningTime\":41793.80999992457,\"pid\":2,\"ramUsage\":10.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///d5129632-456a-4f23-b228-c2ded8f6387d\",\"moduleSequenceNumber\":405},{\"filename\":\"log.js\",\"url\":\"blob:file:///c60269df-dbe0-4697-96c4-0c48d6c58fdb\",\"moduleSequenceNumber\":392},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///937dbed8-09b9-46a5-b230-6ec449b81107\",\"moduleSequenceNumber\":402},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///7d8eb452-e222-47d4-92e1-2605591df562\",\"moduleSequenceNumber\":402},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///34653336-51c7-41f5-9d9c-81ac64a57462\",\"moduleSequenceNumber\":405},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///477dfaed-6889-44ca-8978-f75d8622bacc\",\"moduleSequenceNumber\":11572},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///111c2a2b-f9f9-40da-ae0c-b9aa43eeee36\",\"moduleSequenceNumber\":405},{\"filename\":\"util.js\",\"url\":\"blob:file:///9e53d8df-b78f-4d3e-a4da-5634238c0b48\",\"moduleSequenceNumber\":401},{\"filename\":\"control.js\",\"url\":\"blob:file:///2b950707-4711-4ab1-8d99-ff9ecdefade8\",\"moduleSequenceNumber\":15269}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.8100000000006,\"pid\":9301,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":137,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1fb891a1-4291-4c97-b1a0-0903bb7626fc\",\"moduleSequenceNumber\":887}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999944,\"pid\":9325,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73617f34-590d-4df7-a4b1-c7ede46ccd1f\",\"moduleSequenceNumber\":12860}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @type {import('./types/NetscriptDefinitions').NS}\\n */\\n\\n/**\\n * @class\\n */\\nexport class Logger {\\n\\n\\tconstructor(ns, debug = false) {\\n\\t\\tthis.ns = ns;\\n\\t\\tthis.debugEnabled = debug;\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\terror(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"ERROR  | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tfail(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"FAIL   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tinfo(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"INFO   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\twarn(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"WARNING| \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tsuccess(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"SUCCESS| \\\" + format, values);\\n\\t}\\n\\n\\t/**\\n\\t * \\n\\t * @param {string} format \\n\\t * @param {any[]} values \\n\\t */\\n\\tdebug(format, values) {\\n\\t\\tif (this.debugEnabled) {\\n\\t\\t\\tthis.ns.tprintf(\\\"DEBUG| \\\" + format, values);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"log.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":442,\"_hash\":\"d373aa5a5d9ab1f50dec82f92041c5fee046884dc0a599b37441f117e2c5d738\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///7555ce1b-6cde-498d-83da-fbab61a86adb\",\"moduleSequenceNumber\":888}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":888,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///73617f34-590d-4df7-a4b1-c7ede46ccd1f\",\"moduleSequenceNumber\":12860}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":12860,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///1fb891a1-4291-4c97-b1a0-0903bb7626fc\",\"moduleSequenceNumber\":887}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":887,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport { Logger } from \\\"./log.js\\\";\\nimport { exploits, numAvailableExploits, isExploitAvailable, runExploit } from \\\"./exploits.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {Logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"killall\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n */\\nasync function control(ns) {\\n\\t// initialize our logging system\\n\\tconst logger = new Logger(ns, false);\\n\\n\\tlet targets = await findNewServers(ns);\\n\\tlet runners = await findRunners(ns);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const runner of runners) {\\n\\t\\tif (runner.hostname !== \\\"home\\\") {\\n\\t\\t\\tns.killall(runner.hostname);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\t// let targets = [{ zombie: potentialTargets[0], hostname: potentialTargets[0].hostname, setup: true, threadRatio: 1 }];\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n    ns.print(\\\"Starting up with total threads: -> \\\" + threads.counts.maxThreads);\\n\\t// logger.info(\\\"%(stage)s | Starting up against %(target)s using %(threads)d total threads.\\\", \\n\\t// \\t{ stage: targets[0].setup ? \\\"SETUP\\\" : \\\"HACK\\\", target: targets[0].hostname, threads: threads.counts.maxThreads });\\n\\twhile (true) {\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (target.setup && target.isAtMinSecurity() && target.isAtMaxMoney()) {\\n\\t\\t\\t\\tns.print(\\\"-> Finished hack setup <- \\\" + target.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!target.setup && target.availableMoney < target.maxMoney * .15) {\\n\\t\\t\\t\\tns.print(\\\"-> temporarily stopping hacks <- \\\" + target.hostname);\\n\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\t\\tgetRoot(ns, target);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\tcounter = 0;\\n\\n\\t\\t\\trunners = await findRunners(ns);\\n\\t\\t\\tif (runners.length === 0) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t\\tfor (const target of targets) {\\n\\t\\t\\t\\tif (target.root) {\\n\\t\\t\\t\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\t\\n\\t\\t\\t\\t\\tstartupTargetScripts(ns, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// re-sort the list so we are always using the best target\\n\\t\\t\\ttargets = targets.sort((a, b) => b.currentRating - a.currentRating);\\n\\t\\t}\\n\\n\\t\\tawait doHacks(runners, targets, ns, logger);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {Zombie[]} oldTargets\\n * @param {Server[]} runners \\n */\\nfunction cleanupOldThreads(ns, oldTargets, runners) {\\n\\tfor (const target of oldTargets) {\\n\\t\\tfor (const runner of runners) {\\n\\t\\t\\tfor (const scriptName of [\\\"weaken.js\\\", \\\"grow.js\\\",  \\\"hack.js\\\"]) {\\n\\t\\t\\t\\tlet script = ns.getRunningScript(scriptName, runner.hostname, target.hostname);\\n\\t\\t\\t\\tif (script) {\\n\\t\\t\\t\\t\\tns.kill(scriptName, runner.hostname, target.hostname);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n\\t/**\\n\\t * @param {ns}\\n\\t * @param {Zombie} zombie \\n\\t */\\nfunction getRoot(ns, zombie) {\\n\\texploits.filter(exploit => isExploitAvailable(ns, exploit))\\n\\t\\t.map(exploit => exploit.substring(0, exploit.indexOf(\\\".\\\")))\\n\\t\\t.forEach(exploit => runExploit(ns, exploit, zombie.hostname));\\n\\tns.nuke(zombie.hostname);\\n\\tzombie.updateStats(ns);\\n\\tns.print(\\\"Rooted server: \\\" + zombie.hostname);\\n\\tns.tprintf(\\\"SUCCESS | Rooted server: %s\\\", zombie.hostname);\\n}\\n\\n/**\\n * \\n * @param {Server[]} runners \\n * @param {Zombie[]} targets\\n * @param {NS} ns\\n * @param {Logger} logger\\n */\\nasync function doHacks(runners, targets, ns, logger) {\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n\\n\\tfor (const server of runners) {\\n\\t\\tlet availableRunners = threads[server.hostname].maxThreads - threads[server.hostname].growRunners - threads[server.hostname].hackRunners - threads[server.hostname].weakenRunners;\\n\\t\\tif (availableRunners <= 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (!target.root || target.wantedGrowThreads === 0 && target.wantedHackThreads === 0 && target.wantedWeakenThreads === 0) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\t// ns.print(\\\"Weaken: \\\" + target.weakenRunners + \\\" Hack: \\\" + target.hackRunners + \\\"Grow: \\\" + target.growRunners);\\n\\t\\t\\tconst weakenScript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\t// ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.hostname);\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"weaken.js\\\", server.hostname, toWeaken, target.hostname);\\n\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tns.print(\\\"Failed to startup weaken on: \\\" + server.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ threads[server.hostname].weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\t// logger.warn(\\\"%j\\\", { weakRunners: threads[server.hostname].weakenRunners,\\n\\t\\t\\t\\t\\t// \\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t// \\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t// \\tserver: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"weaken.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"grow.js\\\", server.hostname, toGrow, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"grow.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> Sec: \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"hack.js\\\", server.hostname, toHack, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"hack.js\\\")[0] + \\\" <- Money \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (availableRunners > 0 && server.hostname === \\\"home\\\") {\\n\\t\\t\\tlet shareScript = ns.getRunningScript(\\\"share.js\\\", server.hostname);\\n\\t\\t\\tif (!shareScript && ns.getServer(\\\"home\\\").maxRam - ns.getServer(\\\"home\\\").ramUsed > 32000) {\\n\\t\\t\\t\\tns.print(\\\"Spinning up new share with leftover runners on home.\\\");\\n\\t\\t\\t\\tns.run(\\\"share.js\\\", Math.ceil(availableRunners / 3));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {string} targetHostname\\n * @param {string} scriptName\\n */\\nfunction getRunningScriptLogs(ns, server, targetHostname, scriptName) {\\n\\tlet script = ns.getRunningScript(scriptName, server.hostname, targetHostname);\\n\\treturn script ? script.logs : [];\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"})\\n\\t\\t.map(server => new Zombie(server.server, ns, server.parent, server.depth));\\n\\n\\tfor (const target of allServers) {\\n\\t\\ttarget.setup = target.isAtMinSecurity() && target.isAtMaxMoney();\\n\\n\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\tgetRoot(ns, target);\\n\\t\\t}\\n\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\", \\\"earlyhack.js\\\"]);\\n\\t\\ttarget.updateStats(ns);\\n\\n\\t\\t// \\n\\t\\tif (target.maxRunningThreads === 0) continue;\\n\\n\\t\\tstartupTargetScripts(ns, target);\\n\\t}\\n\\treturn Promise.resolve(allServers.filter(target => target.maxMoney > 0).sort((a, b) => b.currentRating - a.currentRating));\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nasync function findRunners(ns) {\\n\\tlet runners = ns.scan(\\\"home\\\")\\n\\t\\t.filter(child => child.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(child => ns.getServer(child));\\n\\n\\tfor (const runner of runners) {\\n\\t\\tawait ns.scp([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"], runner.hostname);\\n\\t}\\n\\n\\trunners.push(ns.getServer(\\\"home\\\"));\\n\\treturn runners;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Server[]} runners\\n * @param {Zombie[]} targets\\n * @return {{counts: { growRunners: number[], weakenRunners: number[], hackRunners: number[], maxThreads: number, usedThreads: number}}} \\n */\\nfunction getThreadCounts(ns, runners, targets) {\\n\\t// initialize all of our data\\n\\tlet data = {\\n\\t\\tcounts: {\\n\\t\\t\\tmaxThreads: 0,\\n\\t\\t\\tusedThreads: 0\\n\\t\\t}\\n\\t};\\n\\tfor (let target of targets) {\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t\\ttarget.growRate = target.setup ? target.shouldGrow ? .9 : 0 : .84;\\n\\t\\ttarget.hackRate = target.setup ? 0 : .4;\\n\\t}\\n\\t// count the number of already running\\n\\tfor (const server of runners) {\\n\\t\\tlet maxServerThreads = Math.floor(server.maxRam / 1.75);\\n\\t\\tif (server.hostname === \\\"home\\\") {\\n\\t\\t\\tmaxServerThreads = Math.floor(maxServerThreads * 0.8);\\n\\t\\t}\\n\\t\\tdata[server.hostname] = { growRunners: 0, hackRunners: 0, weakenRunners: 0, maxThreads: maxServerThreads};\\n\\t\\tdata.counts.maxThreads += maxServerThreads;\\n\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tlet script = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// setup how many actual threads we can use for each target based on total capacity\\n\\tfor (const target of targets) {\\n\\t\\tconst totalTargetingThreads = Math.min(target.maxTargetingThreads, data.counts.maxThreads - data.counts.usedThreads);\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((totalTargetingThreads * target.growRate) - target.growRunners), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.ceil((totalTargetingThreads * target.hackRate) - target.hackRunners), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(totalTargetingThreads - target.wantedGrowThreads - target.wantedHackThreads - target.weakenRunners - target.hackRunners - target.growRunners, 0);\\n\\n\\t\\tdata.counts.usedThreads += totalTargetingThreads;\\n\\t}\\n\\n\\treturn data;\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Zombie} target \\n */\\nfunction startupTargetScripts(ns, target) {\\n\\t// if this is early game, run oldschool single target hacks against harakiri-sushi\\n\\tconst earlyThreads = Math.floor(target.memory / 2.2);\\n\\tif (ns.getPlayer().money < 5_000_000_000 && earlyThreads > 0) {\\n\\t\\tif (!ns.isRunning(\\\"earlyhack.js\\\", target.hostname)) {\\n\\t\\t\\tns.killall(target.hostname);\\n\\t\\t\\tns.exec(\\\"earlyhack.js\\\", target.hostname, earlyThreads);\\n\\t\\t}\\n\\t}  \\n\\t// foodnstuff has the best XP rate, so just target it for weakenloops\\n\\telse if (!ns.isRunning(\\\"weakenloop.js\\\", target.hostname, \\\"foodnstuff\\\") && target.maxRunningThreads > 0) {\\n\\t\\tns.killall(target.hostname);\\n\\t\\tns.exec(\\\"weakenloop.js\\\", target.hostname, target.maxRunningThreads, \\\"foodnstuff\\\");\\n\\t}\\n}\",\"filename\":\"control.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///0daae011-188f-45ba-b469-f0bb1ecde785\",\"moduleSequenceNumber\":455},{\"filename\":\"log.js\",\"url\":\"blob:file:///b5771de6-0078-41c8-8ce7-1a4b575f3a4b\",\"moduleSequenceNumber\":442},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///26b19ee8-c4c1-4435-8a89-77e5799a30a9\",\"moduleSequenceNumber\":452},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///6152a2d9-3656-4008-bd82-95d4713393ff\",\"moduleSequenceNumber\":452},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///6678b3cd-ebdc-477e-b207-9c884e6c22d3\",\"moduleSequenceNumber\":455},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///5c74aecd-0988-4ad6-8ab2-ae9f03203698\",\"moduleSequenceNumber\":450},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///43c6d19f-cb3e-4bb7-a114-b39f66081ae8\",\"moduleSequenceNumber\":455},{\"filename\":\"util.js\",\"url\":\"blob:file:///47331863-3e72-42a8-a3f3-adc545e3a114\",\"moduleSequenceNumber\":451},{\"filename\":\"control.js\",\"url\":\"blob:file:///5f638583-4f1a-4e8f-a4b7-3a8999a37d73\",\"moduleSequenceNumber\":884}],\"dependents\":[],\"ramUsage\":10.25,\"server\":\"home\",\"moduleSequenceNumber\":238243,\"_hash\":\"99c579475e095fb68793a4b58cf51c0861e0348120f08dc3d4cd704a84dd05e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tns.getPurchasedServers();\\n\\tns.getPurchasedServerCost()\\n\\tns.getPurchasedServerMaxRam();\\n\\tns.purchaseProgram()\\n}\",\"filename\":\"servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":36.15,\"server\":\"home\",\"moduleSequenceNumber\":447,\"_hash\":\"b4b570dd4faa257518f373d8abc3d274cb1ef69085dcbe4901223364a111f453\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @public\\n */\\n interface Player {\\n    hacking: number;\\n    hp: number;\\n    max_hp: number;\\n    strength: number;\\n    defense: number;\\n    dexterity: number;\\n    agility: number;\\n    charisma: number;\\n    intelligence: number;\\n    hacking_chance_mult: number;\\n    hacking_speed_mult: number;\\n    hacking_money_mult: number;\\n    hacking_grow_mult: number;\\n    hacking_exp: number;\\n    strength_exp: number;\\n    defense_exp: number;\\n    dexterity_exp: number;\\n    agility_exp: number;\\n    charisma_exp: number;\\n    hacking_mult: number;\\n    strength_mult: number;\\n    defense_mult: number;\\n    dexterity_mult: number;\\n    agility_mult: number;\\n    charisma_mult: number;\\n    hacking_exp_mult: number;\\n    strength_exp_mult: number;\\n    defense_exp_mult: number;\\n    dexterity_exp_mult: number;\\n    agility_exp_mult: number;\\n    charisma_exp_mult: number;\\n    company_rep_mult: number;\\n    faction_rep_mult: number;\\n    numPeopleKilled: number;\\n    money: number;\\n    city: string;\\n    location: string;\\n    companyName: string;\\n    crime_money_mult: number;\\n    crime_success_mult: number;\\n    isWorking: boolean;\\n    workType: string;\\n    currentWorkFactionName: string;\\n    currentWorkFactionDescription: string;\\n    workHackExpGainRate: number;\\n    workStrExpGainRate: number;\\n    workDefExpGainRate: number;\\n    workDexExpGainRate: number;\\n    workAgiExpGainRate: number;\\n    workChaExpGainRate: number;\\n    workRepGainRate: number;\\n    workMoneyGainRate: number;\\n    workMoneyLossRate: number;\\n    workHackExpGained: number;\\n    workStrExpGained: number;\\n    workDefExpGained: number;\\n    workDexExpGained: number;\\n    workAgiExpGained: number;\\n    workChaExpGained: number;\\n    workRepGained: number;\\n    workMoneyGained: number;\\n    createProgramName: string;\\n    createProgramReqLvl: number;\\n    className: string;\\n    crimeType: string;\\n    work_money_mult: number;\\n    hacknet_node_money_mult: number;\\n    hacknet_node_purchase_cost_mult: number;\\n    hacknet_node_ram_cost_mult: number;\\n    hacknet_node_core_cost_mult: number;\\n    hacknet_node_level_cost_mult: number;\\n    hasWseAccount: boolean;\\n    hasTixApiAccess: boolean;\\n    has4SData: boolean;\\n    has4SDataTixApi: boolean;\\n    bladeburner_max_stamina_mult: number;\\n    bladeburner_stamina_gain_mult: number;\\n    bladeburner_analysis_mult: number;\\n    bladeburner_success_chance_mult: number;\\n    bitNodeN: number;\\n    totalPlaytime: number;\\n    playtimeSinceLastAug: number;\\n    playtimeSinceLastBitnode: number;\\n    jobs: any;\\n    factions: string[];\\n    tor: boolean;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  interface RunningScript {\\n    args: string[];\\n    filename: string;\\n    logs: string[];\\n    offlineExpGained: number;\\n    offlineMoneyMade: number;\\n    offlineRunningTime: number;\\n    onlineExpGained: number;\\n    onlineMoneyMade: number;\\n    onlineRunningTime: number;\\n    pid: number;\\n    ramUsage: number;\\n    server: string;\\n    threads: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of a crime.\\n   * @public\\n   */\\n  export interface CrimeStats {\\n    /** Number representing the difficulty of the crime. Used for success chance calculations */\\n    difficulty: number;\\n    /** Amount of karma lost for successfully committing this crime */\\n    karma: number;\\n    /** How many people die as a result of this crime */\\n    kills: number;\\n    /** How much money is given */\\n    money: number;\\n    /** Name of crime */\\n    name: number;\\n    /** Milliseconds it takes to attempt the crime */\\n    time: number;\\n    /** Description of the crime activity */\\n    type: string;\\n    /** hacking level impact on success change of the crime */\\n    hacking_success_weight: number;\\n    /** strength level impact on success change of the crime */\\n    strength_success_weight: number;\\n    /** defense level impact on success change of the crime */\\n    defense_success_weight: number;\\n    /** dexterity level impact on success change of the crime */\\n    dexterity_success_weight: number;\\n    /** agility level impact on success change of the crime */\\n    agility_success_weight: number;\\n    /** charisma level impact on success change of the crime */\\n    charisma_success_weight: number;\\n    /** hacking exp gained from crime */\\n    hacking_exp: number;\\n    /** strength exp gained from crime */\\n    strength_exp: number;\\n    /** defense exp gained from crime */\\n    defense_exp: number;\\n    /** dexterity exp gained from crime */\\n    dexterity_exp: number;\\n    /** agility exp gained from crime */\\n    agility_exp: number;\\n    /** charisma exp gained from crime */\\n    charisma_exp: number;\\n    /** intelligence exp gained from crime */\\n    intelligence_exp: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of an Augmentation.\\n   * @public\\n   */\\n  export interface AugmentationStats {\\n    /** Multipler to hacking skill */\\n    hacking_mult?: number;\\n    /** Multipler to strength skill */\\n    strength_mult?: number;\\n    /** Multipler to defense skill */\\n    defense_mult?: number;\\n    /** Multipler to dexterity skill */\\n    dexterity_mult?: number;\\n    /** Multipler to agility skill */\\n    agility_mult?: number;\\n    /** Multipler to charisma skill */\\n    charisma_mult?: number;\\n    /** Multipler to hacking experience gain rate */\\n    hacking_exp_mult?: number;\\n    /** Multipler to strength experience gain rate */\\n    strength_exp_mult?: number;\\n    /** Multipler to defense experience gain rate */\\n    defense_exp_mult?: number;\\n    /** Multipler to dexterity experience gain rate */\\n    dexterity_exp_mult?: number;\\n    /** Multipler to agility experience gain rate */\\n    agility_exp_mult?: number;\\n    /** Multipler to charisma experience gain rate */\\n    charisma_exp_mult?: number;\\n    /** Multipler to chance of successfully performing a hack */\\n    hacking_chance_mult?: number;\\n    /** Multipler to hacking speed */\\n    hacking_speed_mult?: number;\\n    /** Multipler to amount of money the player gains from hacking */\\n    hacking_money_mult?: number;\\n    /** Multipler to amount of money injected into servers using grow */\\n    hacking_grow_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    company_rep_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    faction_rep_mult?: number;\\n    /** Multipler to amount of money gained from crimes */\\n    crime_money_mult?: number;\\n    /** Multipler to crime success rate */\\n    crime_success_mult?: number;\\n    /** Multipler to amount of money gained from working */\\n    work_money_mult?: number;\\n    /** Multipler to amount of money produced by Hacknet Nodes */\\n    hacknet_node_money_mult?: number;\\n    /** Multipler to cost of purchasing a Hacknet Node */\\n    hacknet_node_purchase_cost_mult?: number;\\n    /** Multipler to cost of ram for a Hacknet Node */\\n    hacknet_node_ram_cost_mult?: number;\\n    /** Multipler to cost of core for a Hacknet Node */\\n    hacknet_node_core_cost_mult?: number;\\n    /** Multipler to cost of leveling up a Hacknet Node */\\n    hacknet_node_level_cost_mult?: number;\\n    /** Multipler to Bladeburner max stamina */\\n    bladeburner_max_stamina_mult?: number;\\n    /** Multipler to Bladeburner stamina gain rate */\\n    bladeburner_stamina_gain_mult?: number;\\n    /** Multipler to effectiveness in Bladeburner Field Analysis */\\n    bladeburner_analysis_mult?: number;\\n    /** Multipler to success chance in Bladeburner contracts/operations */\\n    bladeburner_success_chance_mult?: number;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link NS.hack | hack}, {@link NS.grow | grow}, and {@link NS.weaken | weaken}.\\n   * @public\\n   */\\n  export interface BasicHGWOptions {\\n    /** Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. */\\n    threads?: number;\\n    /** Set to true this action will affect the stock market. */\\n    stock?: boolean;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link CodingContract} attempt.\\n   * @public\\n   */\\n  export interface CodingAttemptOptions {\\n    /** If truthy, then the function will return a string that states the contract’s reward when it is successfully solved. */\\n    returnReward: boolean;\\n  }\\n  \\n  /**\\n   * Return value of {@link Sleeve.getSleevePurchasableAugs | getSleevePurchasableAugs}\\n   * @public\\n   */\\n  export interface AugmentPair {\\n    /** augmentation name */\\n    name: string;\\n    /** augmentation cost */\\n    cost: number;\\n  }\\n  \\n  /**\\n   * Value in map of {@link StockOrder}\\n   * @public\\n   */\\n  export interface StockOrderObject {\\n    /** Number of shares */\\n    shares: number;\\n    /** Price per share */\\n    price: number;\\n    /** Order type */\\n    type: string;\\n    /** Order position */\\n    position: string;\\n  }\\n  \\n  /**\\n   * Return value of {@link TIX.getOrders | getOrders}\\n   * @public\\n   */\\n  export interface StockOrder {\\n    /** Stock Symbol */\\n    [key: string]: StockOrderObject[];\\n  }\\n  \\n  /**\\n   * A single process on a server.\\n   * @public\\n   */\\n  export interface ProcessInfo {\\n    /** Script name. */\\n    filename: string;\\n    /** Number of threads script is running with */\\n    threads: number;\\n    /** Script's arguments */\\n    args: string[];\\n    /** Process ID */\\n    pid: number;\\n  }\\n  \\n  /**\\n   * Hack related multipliers.\\n   * @public\\n   */\\n  export interface HackingMultipliers {\\n    /** Player's hacking chance multiplier. */\\n    chance: number;\\n    /** Player's hacking speed multiplier. */\\n    speed: number;\\n    /** Player's hacking money stolen multiplier. */\\n    money: number;\\n    /** Player's hacking growth multiplier */\\n    growth: number;\\n  }\\n  \\n  /**\\n   * Hacknet related multipliers.\\n   * @public\\n   */\\n  export interface HacknetMultipliers {\\n    /** Player's hacknet production multiplier */\\n    production: number;\\n    /** Player's hacknet purchase cost multiplier */\\n    purchaseCost: number;\\n    /** Player's hacknet ram cost multiplier */\\n    ramCost: number;\\n    /** Player's hacknet core cost multiplier */\\n    coreCost: number;\\n    /** Player's hacknet level cost multiplier */\\n    levelCost: number;\\n  }\\n  \\n  /**\\n   * A single server.\\n   * @public\\n   */\\n  export interface Server {\\n    /**\\n     * How many CPU cores this server has. Maximum of 8.\\n     * Affects magnitude of grow and weaken.\\n     */\\n    cpuCores: number;\\n  \\n    /** Flag indicating whether the FTP port is open */\\n    ftpPortOpen: boolean;\\n  \\n    /** Flag indicating whether player has admin/root access to this server */\\n    hasAdminRights: boolean;\\n  \\n    /** Hostname. Must be unique */\\n    hostname: string;\\n  \\n    /** Flag indicating whether HTTP Port is open */\\n    httpPortOpen: boolean;\\n  \\n    /** IP Address. Must be unique */\\n    ip: string;\\n  \\n    /** Flag indicating whether player is curently connected to this server */\\n    isConnectedTo: boolean;\\n  \\n    /** RAM (GB) available on this server */\\n    maxRam: number;\\n  \\n    /**\\n     * Name of company/faction/etc. that this server belongs to.\\n     * Optional, not applicable to all Servers\\n     */\\n    organizationName: string;\\n  \\n    /** RAM (GB) used. i.e. unavailable RAM */\\n    ramUsed: number;\\n  \\n    /** Flag indicating whether SMTP Port is open */\\n    smtpPortOpen: boolean;\\n  \\n    /** Flag indicating whether SQL Port is open */\\n    sqlPortOpen: boolean;\\n  \\n    /** Flag indicating whether the SSH Port is open */\\n    sshPortOpen: boolean;\\n  \\n    /** Flag indicating whether this is a purchased server */\\n    purchasedByPlayer: boolean;\\n  \\n    /** Flag indicating whether this server has a backdoor installed by a player */\\n    backdoorInstalled: boolean;\\n  \\n    /**\\n     * Initial server security level\\n     * (i.e. security level when the server was created)\\n     */\\n    baseDifficulty: number;\\n  \\n    /** Server Security Level */\\n    hackDifficulty: number;\\n  \\n    /** Minimum server security level that this server can be weakened to */\\n    minDifficulty: number;\\n  \\n    /** How much money currently resides on the server and can be hacked */\\n    moneyAvailable: number;\\n  \\n    /** Maximum amount of money that this server can hold */\\n    moneyMax: number;\\n  \\n    /** Number of open ports required in order to gain admin/root access */\\n    numOpenPortsRequired: number;\\n  \\n    /** How many ports are currently opened on the server */\\n    openPortCount: number;\\n  \\n    /** Hacking level required to hack this server */\\n    requiredHackingSkill: number;\\n  \\n    /**\\n     * Parameter that affects how effectively this server's money can\\n     * be increased using the grow() Netscript function\\n     */\\n    serverGrowth: number;\\n  }\\n  \\n  /**\\n   * All multipliers affecting the difficulty of the current challenge.\\n   * @public\\n   */\\n  export interface BitNodeMultipliers {\\n    /** Influences how quickly the player's agility level (not exp) scales */\\n    AgilityLevelMultiplier: number;\\n    /** Influences the base cost to purchase an augmentation. */\\n    AugmentationMoneyCost: number;\\n    /** Influences the base rep the player must have with a faction to purchase an augmentation. */\\n    AugmentationRepCost: number;\\n    /** Influences how quickly the player can gain rank within Bladeburner. */\\n    BladeburnerRank: number;\\n    /** Influences the cost of skill levels from Bladeburner. */\\n    BladeburnerSkillCost: number;\\n    /** Influences how quickly the player's charisma level (not exp) scales */\\n    CharismaLevelMultiplier: number;\\n    /** Influences the experience gained for each ability when a player completes a class. */\\n    ClassGymExpGain: number;\\n    /** Influences the amount of money gained from completing Coding Contracts */\\n    CodingContractMoney: number;\\n    /** Influences the experience gained for each ability when the player completes working their job. */\\n    CompanyWorkExpGain: number;\\n    /** Influences how much money the player earns when completing working their job. */\\n    CompanyWorkMoney: number;\\n    /** Influences the valuation of corporations created by the player. */\\n    CorporationValuation: number;\\n    /** Influences the base experience gained for each ability when the player commits a crime. */\\n    CrimeExpGain: number;\\n    /** Influences the base money gained when the player commits a crime. */\\n    CrimeMoney: number;\\n    /** Influences how many Augmentations you need in order to get invited to the Daedalus faction */\\n    DaedalusAugsRequirement: number;\\n    /** Influences how quickly the player's defense level (not exp) scales */\\n    DefenseLevelMultiplier: number;\\n    /** Influences how quickly the player's dexterity level (not exp) scales */\\n    DexterityLevelMultiplier: number;\\n    /** Influences how much rep the player gains in each faction simply by being a member. */\\n    FactionPassiveRepGain: number;\\n    /** Influences the experience gained for each ability when the player completes work for a Faction. */\\n    FactionWorkExpGain: number;\\n    /** Influences how much rep the player gains when performing work for a faction. */\\n    FactionWorkRepGain: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data API */\\n    FourSigmaMarketDataApiCost: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) */\\n    FourSigmaMarketDataCost: number;\\n    /** Influences the experienced gained when hacking a server. */\\n    HackExpGain: number;\\n    /** Influences how quickly the player's hacking level (not experience) scales */\\n    HackingLevelMultiplier: number;\\n    /** Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) */\\n    HacknetNodeMoney: number;\\n    /** Influences how much money it costs to upgrade your home computer's RAM */\\n    HomeComputerRamCost: number;\\n    /** Influences how much money is gained when the player infiltrates a company. */\\n    InfiltrationMoney: number;\\n    /** Influences how much rep the player can gain from factions when selling stolen documents and secrets */\\n    InfiltrationRep: number;\\n    /** Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. */\\n    ManualHackMoney: number;\\n    /** Influence how much it costs to purchase a server */\\n    PurchasedServerCost: number;\\n    /** Influences the maximum number of purchased servers you can have */\\n    PurchasedServerLimit: number;\\n    /** Influences the maximum allowed RAM for a purchased server */\\n    PurchasedServerMaxRam: number;\\n    /** Influences the minimum favor the player must have with a faction before they can donate to gain rep. */\\n    RepToDonateToFaction: number;\\n    /** Influences how much money can be stolen from a server when a script performs a hack against it. */\\n    ScriptHackMoney: number;\\n    /** Influences the growth percentage per cycle against a server. */\\n    ServerGrowthRate: number;\\n    /** Influences the maxmimum money that a server can grow to. */\\n    ServerMaxMoney: number;\\n    /** Influences the initial money that a server starts with. */\\n    ServerStartingMoney: number;\\n    /** Influences the initial security level (hackDifficulty) of a server. */\\n    ServerStartingSecurity: number;\\n    /** Influences the weaken amount per invocation against a server. */\\n    ServerWeakenRate: number;\\n    /** Influences how quickly the player's strength level (not exp) scales */\\n    StrengthLevelMultiplier: number;\\n  }\\n  \\n  /**\\n   * Object representing all the values related to a hacknet node.\\n   * @public\\n   */\\n  export interface NodeStats {\\n    /** Node's name */\\n    name: string;\\n    /** Node's level */\\n    level: number;\\n    /** Node's RAM */\\n    ram: number;\\n    /** Node's used RAM */\\n    ramUsed: number;\\n    /** Node's number of cores */\\n    cores: number;\\n    /** Cache level. Only applicable for Hacknet Servers */\\n    cache: number;\\n    /** Hash Capacity provided by this Node. Only applicable for Hacknet Servers */\\n    hashCapacity: number;\\n    /** Node's production per second */\\n    production: number;\\n    /** Number of seconds since Node has been purchased */\\n    timeOnline: number;\\n    /** Total number of money Node has produced */\\n    totalProduction: number;\\n  }\\n  \\n  /**\\n   * Short summary of the players skills.\\n   * @public\\n   */\\n  export interface PlayerSkills {\\n    /** Hacking level */\\n    hacking: number;\\n    /** Strength level */\\n    strength: number;\\n    /** Defense level */\\n    defense: number;\\n    /** Dexterity level */\\n    dexterity: number;\\n    /** Agility level */\\n    agility: number;\\n    /** Chraisma level */\\n    charisma: number;\\n    /** Intelligence level */\\n    intelligence: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterMult {\\n    /** Agility stat */\\n    agility: number;\\n    /** Agility exp */\\n    agilityExp: number;\\n    /** Company reputation */\\n    companyRep: number;\\n    /** Money earned from crimes */\\n    crimeMoney: number;\\n    /** Crime success chance */\\n    crimeSuccess: number;\\n    /** Defense stat */\\n    defense: number;\\n    /** Defense exp */\\n    defenseExp: number;\\n    /** Dexterity stat */\\n    dexterity: number;\\n    /** Dexterity exp */\\n    dexterityExp: number;\\n    /** Faction reputation */\\n    factionRep: number;\\n    /** Hacking stat */\\n    hacking: number;\\n    /** Hacking exp */\\n    hackingExp: number;\\n    /** Strength stat */\\n    strength: number;\\n    /** Strength exp */\\n    strengthExp: number;\\n    /** Money earned from jobs */\\n    workMoney: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterInfo {\\n    /** Current BitNode number */\\n    bitnode: number;\\n    /** Name of city you are currently in */\\n    city: string;\\n    /** Array of factions you are currently a member of */\\n    factions: string[];\\n    /** Current health points */\\n    hp: number;\\n    /** Array of all companies at which you have jobs */\\n    company: string[];\\n    /** Array of job positions for all companies you are employed at. Same order as 'jobs' */\\n    jobTitle: string[];\\n    /** Maximum health points */\\n    maxHp: number;\\n    /** Boolean indicating whether or not you have a tor router */\\n    tor: boolean;\\n    /** Object with many of the player's multipliers from Augmentations/Source Files */\\n    mult: CharacterMult;\\n    /** Timed worked in ms */\\n    timeWorked: number;\\n    /** Hacking experience earned so far from work */\\n    workHackExpGain: number;\\n    /** Str experience earned so far from work */\\n    workStrExpGain: number;\\n    /** Def experience earned so far from work */\\n    workDefExpGain: number;\\n    /** Dex experience earned so far from work */\\n    workDexExpGain: number;\\n    /** Agi experience earned so far from work */\\n    workAgiExpGain: number;\\n    /** Cha experience earned so far from work */\\n    workChaExpGain: number;\\n    /** Reputation earned so far from work, if applicable */\\n    workRepGain: number;\\n    /** Money earned so far from work, if applicable */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SleeveWorkGains {\\n    /** Hacking exp gained from work */\\n    workHackExpGain: number;\\n    /** Strength exp gained from work */\\n    workStrExpGain: number;\\n    /** Defense exp gained from work, */\\n    workDefExpGain: number;\\n    /** Dexterity exp gained from work */\\n    workDexExpGain: number;\\n    /** Agility exp gained from work */\\n    workAgiExpGain: number;\\n    /** Charisma exp gained from work */\\n    workChaExpGain: number;\\n    /** Money gained from work */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SourceFileLvl {\\n    /** The number of the source file */\\n    n: number;\\n    /** The level of the source file */\\n    lvl: number;\\n  }\\n  \\n  /**\\n   * Bladeburner current action.\\n   * @public\\n   */\\n  export interface BladeburnerCurAction {\\n    /** Type of Action */\\n    type: string;\\n    /** Name of Action */\\n    name: string;\\n  }\\n  \\n  /**\\n   * Gang general info.\\n   * @public\\n   */\\n  export interface GangGenInfo {\\n    /** Name of faction that the gang belongs to (\\\"Slum Snakes\\\", etc.) */\\n    faction: string;\\n    /** Indicating whether or not it's a hacking gang */\\n    isHacking: boolean;\\n    /** Money earned per game cycle */\\n    moneyGainRate: number;\\n    /** Gang's power for territory warfare */\\n    power: number;\\n    /** Gang's respect */\\n    respect: number;\\n    /** Respect earned per game cycle */\\n    respectGainRate: number;\\n    /** Amount of territory held */\\n    territory: number;\\n    /** Clash chance */\\n    territoryClashChance: number;\\n    /** Gang's wanted level */\\n    wantedLevel: number;\\n    /** Wanted level gained/lost per game cycle (negative for losses) */\\n    wantedLevelGainRate: number;\\n    /** Indicating if territory warfare is enabled */\\n    territoryWarfareEngaged: boolean;\\n    /** Number indicating the current wanted penalty */\\n    wantedPenalty: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfoObject {\\n    /** Gang power */\\n    power: number;\\n    /** Gang territory, in decimal form */\\n    territory: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfo {\\n    \\\"Slum Snakes\\\": GangOtherInfoObject;\\n    Tetrads: GangOtherInfoObject;\\n    \\\"The Syndicate\\\": GangOtherInfoObject;\\n    \\\"The Dark Army\\\": GangOtherInfoObject;\\n    \\\"Speakers for the Dead\\\": GangOtherInfoObject;\\n    NiteSec: GangOtherInfoObject;\\n    \\\"The Black Hand\\\": GangOtherInfoObject;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member task.\\n   * @public\\n   */\\n  export interface GangTaskStats {\\n    /** Task name */\\n    name: string;\\n    /** Task Description */\\n    desc: string;\\n    /** Is a task of a hacking gang */\\n    isHacking: boolean;\\n    /** Is a task of a combat gang */\\n    isCombat: boolean;\\n    /** Base respect earned */\\n    baseRespect: number;\\n    /** Base wanted earned */\\n    baseWanted: number;\\n    /** Base money earned */\\n    baseMoney: number;\\n    /** Hacking skill impact on task scaling */\\n    hackWeight: number;\\n    /** Stength skill impact on task scaling */\\n    strWeight: number;\\n    /** Defense skill impact on task scaling */\\n    defWeight: number;\\n    /** Dexterity skill impact on task scaling */\\n    dexWeight: number;\\n    /** Agility skill impact on task scaling */\\n    agiWeight: number;\\n    /** Charisma skill impact on task scaling */\\n    chaWeight: number;\\n    /** Number representing the difficulty of the task */\\n    difficulty: number;\\n    /** Territory impact on task scaling */\\n    territory: GangTerritory;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member equipment.\\n   * @public\\n   */\\n  export interface EquipmentStats {\\n    /** Strength multiplier */\\n    str?: number;\\n    /** Defense multiplier */\\n    def?: number;\\n    /** Dexterity multiplier */\\n    dex?: number;\\n    /** Agility multiplier */\\n    agi?: number;\\n    /** Charisma multiplier */\\n    cha?: number;\\n    /** Hacking multiplier */\\n    hack?: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangTerritory {\\n    /** Money gain impact on task scaling */\\n    money: number;\\n    /** Respect gain impact on task scaling */\\n    respect: number;\\n    /** Wanted gain impact on task scaling */\\n    wanted: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberInfo {\\n    name: string;\\n    task: string;\\n    earnedRespect: number;\\n    hack: number;\\n    str: number;\\n    def: number;\\n    dex: number;\\n    agi: number;\\n    cha: number;\\n  \\n    hack_exp: number;\\n    str_exp: number;\\n    def_exp: number;\\n    dex_exp: number;\\n    agi_exp: number;\\n    cha_exp: number;\\n  \\n    hack_mult: number;\\n    str_mult: number;\\n    def_mult: number;\\n    dex_mult: number;\\n    agi_mult: number;\\n    cha_mult: number;\\n  \\n    hack_asc_mult: number;\\n    str_asc_mult: number;\\n    def_asc_mult: number;\\n    dex_asc_mult: number;\\n    agi_asc_mult: number;\\n    cha_asc_mult: number;\\n  \\n    hack_asc_points: number;\\n    str_asc_points: number;\\n    def_asc_points: number;\\n    dex_asc_points: number;\\n    agi_asc_points: number;\\n    cha_asc_points: number;\\n  \\n    upgrades: string[];\\n    augmentations: string[];\\n  \\n    respectGain: number;\\n    wantedLevelGain: number;\\n    moneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberAscension {\\n    /** Amount of respect lost from ascending */\\n    respect: number;\\n    /** Hacking multiplier gained from ascending */\\n    hack: number;\\n    /** Strength multiplier gained from ascending */\\n    str: number;\\n    /** Defense multiplier gained from ascending */\\n    def: number;\\n    /** Dexterity multiplier gained from ascending */\\n    dex: number;\\n    /** Agility multiplier gained from ascending */\\n    agi: number;\\n    /** Charisma multiplier gained from ascending */\\n    cha: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve stats.\\n   * @public\\n   */\\n  export interface SleeveSkills {\\n    /** Current shock of the sleeve [0-100] */\\n    shock: number;\\n    /** Current sync of the sleeve [0-100] */\\n    sync: number;\\n    /** Current hacking skill of the sleeve */\\n    hacking: number;\\n    /** Current strength of the sleeve */\\n    strength: number;\\n    /** Current defense of the sleeve */\\n    defense: number;\\n    /** Current dexterity of the sleeve */\\n    dexterity: number;\\n    /** Current agility of the sleeve */\\n    agility: number;\\n    /** Current charisma of the sleeve */\\n    charisma: number;\\n  }\\n  \\n  /**\\n   * Object representing sleeve information.\\n   * @public\\n   */\\n  export interface SleeveInformation {\\n    /** Location of the sleeve */\\n    city: string;\\n    /** Current hp of the sleeve */\\n    hp: number;\\n    /** Max hp of the sleeve */\\n    maxHp: number;\\n    /** Jobs available to the sleeve */\\n    jobs: string[];\\n    /** Job titles available to the sleeve */\\n    jobTitle: string[];\\n    /** Does this sleeve have access to the tor router */\\n    tor: boolean;\\n    /** Sleeve multipliers */\\n    mult: CharacterMult;\\n    /** Time spent on the current task in milliseconds */\\n    timeWorked: number;\\n    /** Earnings synchronized to other sleeves */\\n    earningsForSleeves: SleeveWorkGains;\\n    /** Earnings synchronized to the player */\\n    earningsForPlayer: SleeveWorkGains;\\n    /** Earnings for this sleeve */\\n    earningsForTask: SleeveWorkGains;\\n    /** Faction or company reputation gained for the current task */\\n    workRepGain: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve current task.\\n   * @public\\n   */\\n  export interface SleeveTask {\\n    /** Task type */\\n    task: string;\\n    /** Crime currently attempting, if any */\\n    crime: string;\\n    /** Location of the task, if any */\\n    location: string;\\n    /** Stat being trained at the gym, if any */\\n    gymStatType: string;\\n    /** Faction work type being performed, if any */\\n    factionWorkType: string;\\n  }\\n  \\n  /**\\n   * Stock market API\\n   * @public\\n   */\\n  export interface TIX {\\n    /**\\n     * Returns an array of the symbols of the tradable stocks\\n     *\\n     * @remarks RAM cost: 2 GB\\n     * @returns Array of the symbols of the tradable stocks.\\n     */\\n    getSymbols(): string[];\\n  \\n    /**\\n     * Returns the price of a stock\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * The stock’s price is the average of its bid and ask price.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns The price of a stock.\\n     */\\n    getPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the ask price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The ask price of a stock.\\n     */\\n    getAskPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the bid price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The bid price of a stock.\\n     */\\n    getBidPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the player’s position in a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Returns an array of four elements that represents the player’s position in a stock.\\n     *\\n     * The first element is the returned array is the number of shares the player owns of\\n     * the stock in the Long position. The second element in the array is the average price\\n     * of the player’s shares in the Long position.\\n     *\\n     * The third element in the array is the number of shares the player owns of the stock\\n     * in the Short position. The fourth element in the array is the average price of the\\n     * player’s Short position.\\n     *\\n     * All elements in the returned array are numeric.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * var pos = stock.getPosition(\\\"ECP\\\");\\n     * var shares      = pos[0];\\n     * var avgPx       = pos[1];\\n     * var sharesShort = pos[2];\\n     * var avgPxShort  = pos[3];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * const [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\\\"ECP\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns Array of four elements that represents the player’s position in a stock.\\n     */\\n    getPosition(sym: string): [number, number, number, number];\\n  \\n    /**\\n     * Returns the maximum number of shares of a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * This is the maximum amount of the stock that can be purchased\\n     * in both the Long and Short positions combined.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Maximum number of shares that the stock has.\\n     */\\n    getMaxShares(sym: string): number;\\n  \\n    /**\\n     * Calculates cost of buying stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much it would cost to buy a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchase.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Cost to buy a given number of shares of a stock.\\n     */\\n    getPurchaseCost(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Calculate profit of selling stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much you would gain from selling a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Gain from selling a given number of shares of a stock.\\n     */\\n    getSaleGain(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Buy stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase shares of a stock using a Market Order.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If this function successfully purchases the shares, it will return the stock price at which\\n     * each share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchased. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    buy(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell shares of a stock using a Market Order.\\n     *\\n     * If the specified number of shares in the function exceeds the amount that the player\\n     * actually owns, then this function will sell all owned shares. Remember that every\\n     * transaction on the stock exchange costs a certain commission fee.\\n     *\\n     * The net profit made from selling stocks with this function is reflected in the script’s\\n     * statistics. This net profit is calculated as:\\n     *\\n     *    shares * (sell_price - average_price_of_purchased_shares)\\n     *\\n     * If the sale is successful, this function will return the stock price at\\n     * which each share was sold. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sell(sym: string, shares: number): number;\\n  \\n    /**\\n     * Short stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If the purchase is successful, this function will return the stock price at which each\\n     * share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to short. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    short(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell short stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the specified number of shares exceeds the amount that the player actually owns,\\n     * then this function will sell all owned shares. Remember that every transaction on\\n     * the stock exchange costs a certain commission fee.\\n     *\\n     * If the sale is successful, this function will return the stock price at which each\\n     * share was sold. Otherwise it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sellShort(sym: string, shares: number): number;\\n  \\n    /**\\n     * Place order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Places an order on the stock market. This function only works for Limit and Stop Orders.\\n     *\\n     * The ability to place limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * Returns true if the order is successfully placed, and false otherwise.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns True if the order is successfully placed, and false otherwise.\\n     */\\n    placeOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\\n  \\n    /**\\n     * Cancel order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Cancels an oustanding Limit or Stop order on the stock market.\\n     *\\n     * The ability to use limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     */\\n    cancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\\n  \\n    /**\\n     * Returns your order book for the stock market.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * This is an object containing information for all the Limit and Stop Orders you have in the stock market.\\n     * The object has the following structure:\\n     *\\n     * ```ts\\n     * {\\n     *  string1: [ // Array of orders for this stock\\n     *      {\\n     *          shares: Order quantity\\n     *          price: Order price\\n     *          type: Order type\\n     *          position: Either \\\"L\\\" or \\\"S\\\" for Long or Short position\\n     *      },\\n     *      {\\n     *          ...\\n     *      },\\n     *      ...\\n     *  ],\\n     *  string2: [ // Array of orders for this stock\\n     *      ...\\n     *  ],\\n     *  ...\\n     * }\\n     * ```\\n     * The “Order type” property can have one of the following four values: \\\"Limit Buy Order\\\", \\\"Limit Sell Order\\\", \\\"Stop Buy Order\\\", \\\"Stop Sell Order\\\".\\n     * Note that the order book will only contain information for stocks that you actually have orders in.\\n     *\\n     * @example\\n     * ```ts\\n     * \\\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a “NVMD” property.\\\"\\n     * {\\n     *  ECP: [\\n     *      {\\n     *          shares: 5,\\n     *          price: 100,000\\n     *          type: \\\"Stop Buy Order\\\",\\n     *          position: \\\"S\\\",\\n     *      },\\n     *      {\\n     *          shares: 25,\\n     *          price: 125,000\\n     *          type: \\\"Limit Sell Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     *  SYSC: [\\n     *      {\\n     *          shares: 100,\\n     *          price: 10,000\\n     *          type: \\\"Limit Buy Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     * }\\n     * ```\\n     * @returns Object containing information for all the Limit and Stop Orders you have in the stock market.\\n     */\\n    getOrders(): StockOrder;\\n  \\n    /**\\n     * Returns the volatility of the specified stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Volatility represents the maximum percentage by which a stock’s price can change every tick.\\n     * The volatility is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Volatility of the specified stock.\\n     */\\n    getVolatility(sym: string): number;\\n  \\n    /**\\n     * Returns the probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * The probability is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\\n     *\\n     * In other words, if this function returned 0.30 for a stock, then this means that the stock’s price has a\\n     * 30% chance of increasing and a 70% chance of decreasing during the next tick.\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     */\\n    getForecast(sym: string): number;\\n  \\n    /**\\n     * Purchase 4S Market Data Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketData(): boolean;\\n  \\n    /**\\n     * Purchase 4S Market Data TIX API Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketDataTixApi(): boolean;\\n  }\\n  \\n  /**\\n   * Singularity API\\n   * @remarks\\n   * This API requires Source-File 4 level 1 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\\n   * @public\\n   */\\n  export interface Singularity {\\n    /**\\n     * Take university class.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start taking a course at a university.\\n     * If you are already in the middle of some “working” action (such as working at a\\n     * company, for a faction, or on a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these universities and classes are the same as\\n     * if you were to manually visit and take these classes.\\n     *\\n     * @param universityName - Name of university. You must be in the correct city for whatever university you specify.\\n     * @param courseName - Name of course.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    universityCourse(universityName: string, courseName: string): boolean;\\n  \\n    /**\\n     * Workout at the gym.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n  \\n     * This function will automatically set you to start working out at a gym to train\\n     * a particular stat. If you are already in the middle of some “working” action\\n     * (such as working at a company, for a faction, or on a program), then running\\n     * this function will automatically cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these gyms are the same as if you were\\n     * to manually visit these gyms and train\\n     *\\n     * @param gymName - Name of gym. You must be in the correct city for whatever gym you specify.\\n     * @param stat - The stat you want to train.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    gymWorkout(gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Travel to another city.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows the player to travel to any city. The cost for using this\\n     * function is the same as the cost for traveling through the Travel Agency.\\n     *\\n     * @param city - City to travel to.\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    travelToCity(city: string): boolean;\\n  \\n    /**\\n     * Purchase the TOR router.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase a TOR router. The cost for\\n     * purchasing a TOR router using this function is the same as if you were to\\n     * manually purchase one.\\n     *\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    purchaseTor(): boolean;\\n  \\n    /**\\n     * Purchase a program from the dark web.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase programs. You MUST have a\\n     * TOR router in order to use this function. The cost of purchasing programs\\n     * using this function is the same as if you were purchasing them through the Dark\\n     * Web using the Terminal buy command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @param programName - Name of program to purchase.\\n     * @returns True if the specified program is purchased, and false otherwise.\\n     */\\n    purchaseProgram(programName: string): boolean;\\n  \\n    /**\\n     * Check if the player is busy.\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns a boolean indicating whether or not the player is currently performing an\\n     * ‘action’. These actions include working for a company/faction, studying at a univeristy,\\n     * working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\\n     *\\n     * @returns True if the player is currently performing an ‘action’, false otherwise.\\n     */\\n    isBusy(): boolean;\\n  \\n    /**\\n     * Stop the current action.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to end whatever ‘action’ the player is currently performing.\\n     * The player will receive whatever money/experience/etc. he has earned from that action.\\n     *\\n     * The actions that can be stopped with this function are:\\n     *\\n     * * Studying at a university\\n     * * Working for a company/faction\\n     * * Creating a program\\n     * * Committing a Crime\\n     *\\n     * This function will return true if the player’s action was ended.\\n     * It will return false if the player was not performing an action when this function was called.\\n     *\\n     * @returns True if the player’s action was ended, false if the player was not performing an action.\\n     */\\n    stopAction(): boolean;\\n  \\n    /**\\n     * Upgrade home computer RAM.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of RAM on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeRam(): boolean;\\n  \\n    /**\\n     * Upgrade home computer cores.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of cores on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeCores(): boolean;\\n  \\n    /**\\n     * Get the price of upgrading home RAM.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer RAM.\\n     *\\n     * @returns Cost of upgrading the player’s home computer RAM.\\n     */\\n    getUpgradeHomeRamCost(): number;\\n  \\n    /**\\n     * Get the price of upgrading home cores.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer cores.\\n     *\\n     * @returns Cost of upgrading the player’s home computer cores.\\n     */\\n    getUpgradeHomeCoresCost(): number;\\n  \\n    /**\\n     * Work for a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working at the company\\n     * at which you are employed. If you are already in the middle of some “working”\\n     * action (such as working for a faction, training at a gym, or creating a program),\\n     * then running this function will automatically cancel that action and give you\\n     * your earnings.\\n     *\\n     * This function will return true if the player starts working, and false otherwise.\\n     *\\n     * Note that when you are working for a company, you will not actually receive your earnings (reputation, money, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    workForCompany();\\n     *    sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    ns.workForCompany();\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @param companyName - Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForCompany(companyName?: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Apply for a job at a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically try to apply to the specified company\\n     * for a position in the specified field. This function can also be used to\\n     * apply for promotions by specifying the company and field you are already\\n     * employed at.\\n     *\\n     * This function will return true if you successfully get a job/promotion,\\n     * and false otherwise. Note that if you are trying to use this function to\\n     * apply for a promotion and you don’t get one, it will return false.\\n     *\\n     * @param companyName - Name of company to apply to.\\n     * @param field - Field to which you want to apply.\\n     * @returns True if the player successfully get a job/promotion, and false otherwise.\\n     */\\n    applyToCompany(companyName: string, field: string): boolean;\\n  \\n    /**\\n     * Get company reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of reputation you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of reputation you have at the specified company.\\n     */\\n    getCompanyRep(companyName: string): number;\\n  \\n    /**\\n     * Get company favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you have at the specified company.\\n     */\\n    getCompanyFavor(companyName: string): number;\\n  \\n    /**\\n     * Get company favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you will gain for the specified\\n     * company when you reset by installing Augmentations.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you gain at the specified company when you reset by installing Augmentations.\\n     */\\n    getCompanyFavorGain(companyName: string): number;\\n  \\n    /**\\n     * List all current faction invitations.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array with the name of all Factions you currently have oustanding invitations from.\\n     *\\n     * @returns Array with the name of all Factions you currently have oustanding invitations from.\\n     */\\n    checkFactionInvitations(): string[];\\n  \\n    /**\\n     * Join a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically accept an invitation from a faction and join it.\\n     *\\n     * @param faction - Name of faction to join.\\n     * @returns True if player joined the faction, and false otherwise.\\n     */\\n    joinFaction(faction: string): boolean;\\n  \\n    /**\\n     * Work for a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working for the specified faction.\\n     * Obviously, you must be a member of the faction or else this function will fail. If\\n     * you are already in the middle of some “working” action (such as working for a company,\\n     * training at a gym, or creating a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * This function will return true if you successfully start working for the specified faction, and false otherwise.\\n     *\\n     * Note that when you are working for a faction, you will not actually receive your earnings (reputation, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getFactionRep(FACTION NAME) < VALUE) {\\n     *    workForFaction(FACNAME, WORKTYPE);\\n     *    sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getFactionRep(FACTION NAME) < VALUE) {\\n     *    ns.workForFaction(FACNAME, WORKTYPE);\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @param faction - Name of faction to work for.\\n     * @param workType - Type of work to perform for the faction.\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForFaction(faction: string, workType: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Get faction reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of reputation you have for the specified faction.\\n     *\\n     * @param faction - Name of faction to work for.\\n     * @returns Amount of reputation you have for the specified faction.\\n     */\\n    getFactionRep(faction: string): number;\\n  \\n    /**\\n     * Get faction favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you have for the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you have for the specified faction.\\n     */\\n    getFactionFavor(faction: string): number;\\n  \\n    /**\\n     * Get faction favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you will gain for the specified\\n     * faction when you reset by installing Augmentations.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you will gain for the specified faction when you reset by installing Augmentations.\\n     */\\n    getFactionFavorGain(faction: string): number;\\n  \\n    /**\\n     * Donate to a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Attempts to donate money to the specified faction in exchange for reputation.\\n     * Returns true if you successfully donate the money, and false otherwise.\\n     *\\n     * @param faction - Name of faction to donate to.\\n     * @param amount - Amount of money to donate.\\n     * @returns True if the money was donated, and false otherwise.\\n     */\\n    donateToFaction(faction: string, amount: number): boolean;\\n  \\n    /**\\n     * Create a program.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working on creating the\\n     * specified program. If you are already in the middle of some “working” action\\n     * (such as working for a company, training at a gym, or taking a course), then\\n     * running this function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns true if you successfully start working on the specified program, and false otherwise.\\n     *\\n     * Note that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are:\\n     * * BruteSSH.exe: 50\\n     * * FTPCrack.exe: 100\\n     * * relaySMTP.exe: 250\\n     * * HTTPWorm.exe: 500\\n     * * SQLInject.exe: 750\\n     * * DeepscanV1.exe: 75\\n     * * DeepscanV2.exe: 400\\n     * * ServerProfiler.exe: 75\\n     * * AutoLink.exe: 25\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @param program - Name of program to create.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    createProgram(program: string): boolean;\\n  \\n    /**\\n     * Commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to automatically attempt to commit crimes.\\n     * If you are already in the middle of some ‘working’ action (such\\n     * as working for a company or training at a gym), then running this\\n     * function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns the number of milliseconds it takes to attempt the\\n     * specified crime (e.g It takes 60 seconds to attempt the ‘Rob Store’ crime,\\n     * so running `commitCrime('rob store')` will return 60,000).\\n     *\\n     * Warning: I do not recommend using the time returned from this function to try\\n     * and schedule your crime attempts. Instead, I would use the isBusy Singularity\\n     * function to check whether you have finished attempting a crime. This is because\\n     * although the game sets a certain crime to be X amount of seconds, there is no\\n     * guarantee that your browser will follow that time limit.\\n     *\\n     * @param crime - Name of crime to attempt.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    commitCrime(crime: string): number;\\n  \\n    /**\\n     * Get chance to successfully commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns your chance of success at commiting the specified crime.\\n     *\\n     * @param crime - Name of crime.\\n     * @returns Chance of success at commiting the specified crime.\\n     */\\n    getCrimeChance(crime: string): number;\\n  \\n    /**\\n     * Get stats related to a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the stats of the crime.\\n     *\\n     * @param crime - Name of crime. Not case-sensitive\\n     * @returns The stats of the crime.\\n     */\\n    getCrimeStats(crime: string): CrimeStats;\\n  \\n    /**\\n     * Get a list of owned augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array containing the names (as strings) of all Augmentations you have.\\n     *\\n     * @param purchased - Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations.\\n     * @returns Array containing the names (as strings) of all Augmentations you have.\\n     */\\n    getOwnedAugmentations(purchased?: boolean): string[];\\n  \\n    /**\\n     * Get a list of augmentation available from a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array containing the names (as strings) of all Augmentations\\n     * that are available from the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Array containing the names of all Augmentations.\\n     */\\n    getAugmentationsFromFaction(faction: string): string[];\\n  \\n    /**\\n     * Get the pre-requisite of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     * If there are no prerequisites, a blank array is returned.\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     */\\n    getAugmentationPrereq(augName: string): string[];\\n  \\n    /**\\n     * Get the price and reputation of an augmentation.\\n     * @deprecated use getAugmentationPrice getAugmentationRepCost\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with two elements that gives the cost for\\n     * the specified Augmentation. The first element in the returned array is the\\n     * reputation requirement of the Augmentation, and the second element is the\\n     * money cost.\\n     *\\n     * If an invalid Augmentation name is passed in for the augName argument, this\\n     * function will return the array [-1, -1].\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with first element as a reputation requirement and second element as the money cost.\\n     */\\n    getAugmentationCost(augName: string): [number, number];\\n  \\n    /**\\n     * Get price of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Price of the augmentation.\\n     */\\n    getAugmentationPrice(augName: string): number;\\n  \\n    /**\\n     * Get reputation requirement of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Reputation requirement of the augmentation.\\n     */\\n    getAugmentationRepReq(augName: string): number;\\n  \\n    /**\\n     * Purchase an augmentation\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will try to purchase the specified Augmentation through the given Faction.\\n     *\\n     * This function will return true if the Augmentation is successfully purchased, and false otherwise.\\n     *\\n     * @param faction - Name of faction to purchase Augmentation from.\\n     * @param augmentation - Name of Augmentation to purchase.\\n     * @returns True if the Augmentation is successfully purchased, and false otherwise.\\n     */\\n    purchaseAugmentation(faction: string, augmentation: string): boolean;\\n  \\n    /**\\n     * Get the stats of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns augmentation stats.\\n     *\\n     * @param name - Name of Augmentation. CASE-SENSITIVE.\\n     * @returns Augmentation stats.\\n     */\\n    getAugmentationStats(name: string): AugmentationStats;\\n  \\n    /**\\n     * Install your purchased augmentations.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically install your Augmentations, resetting the game as usual.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    installAugmentations(cbScript?: string): void;\\n  \\n    /**\\n     * Returns an object with the Player’s stats.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @example\\n     * ```ts\\n     * res = getStats();\\n     * print('My charisma level is: ' + res.charisma);\\n     * ```\\n     * @returns Object with the Player’s stats.\\n     */\\n    getStats(): PlayerSkills;\\n  \\n    /**\\n     * Returns an object with various information about your character.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @returns Object with various information about your character.\\n     */\\n    getCharacterInformation(): CharacterInfo;\\n  \\n    /**\\n     * Hospitalize the player.\\n     * @remarks\\n     * RAM cost: 0.25 GB * 16/4/1\\n     *\\n     *\\n     * @returns The cost of the hospitalization.\\n     */\\n    hospitalize(): number;\\n  \\n    /**\\n     * Soft reset the game.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will perform a reset even if you don’t have any augmentation installed.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    softReset(cbScript: string): void;\\n  \\n    /**\\n     * Go to a location.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Move the player to a specific location.\\n     *\\n     * @param locationName - Name of the location.\\n     * @returns True if the player was moved there, false otherwise.\\n     */\\n    goToLocation(locationName: string): boolean;\\n  \\n    /**\\n     * Get the current server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Name of the current server.\\n     */\\n    getCurrentServer(): string;\\n  \\n    /**\\n     * Connect to a server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * Run the connect HOSTNAME command in the terminal. Can only connect to neighbors.\\n     *\\n     * @returns True if the connect command was successful, false otherwise.\\n     */\\n    connect(hostname: string): boolean;\\n  \\n    /**\\n     * Run the hack command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Amount of money stolen by manual hacking.\\n     */\\n    manualHack(): Promise<number>;\\n  \\n    /**\\n     * Run the backdoor command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Promise waiting for the installation to finish.\\n     */\\n    installBackdoor(): Promise<void>;\\n  \\n    /**\\n     * Check if the player is focused.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     *\\n     * @returns True if the player is focused.\\n     */\\n    isFocused(): boolean;\\n  \\n    /**\\n     * Set the players focus.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     * @returns True if the focus was changed.\\n     */\\n    setFocus(focus: boolean): boolean;\\n  }\\n  \\n  /**\\n   * Hacknet API\\n   * @remarks\\n   * Not all these functions are immediately available.\\n   * @public\\n   */\\n  export interface Hacknet {\\n    /**\\n     * Get the number of hacknet nodes you own.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the number of Hacknet Nodes you own.\\n     *\\n     * @returns number of hacknet nodes.\\n     */\\n    numNodes(): number;\\n  \\n    /**\\n     * Get the maximum number of hacknet nodes.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @returns maximum number of hacknet nodes.\\n     */\\n    maxNumNodes(): number;\\n  \\n    /**\\n     * Purchase a new hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Purchases a new Hacknet Node. Returns a number with the index of the\\n     * Hacknet Node. This index is equivalent to the number at the end of\\n     * the Hacknet Node’s name (e.g The Hacknet Node named `hacknet-node-4`\\n     * will have an index of 4).\\n     *\\n     * If the player cannot afford to purchase a new Hacknet Node then the function will return -1.\\n     *\\n     * @returns The index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\\n     */\\n    purchaseNode(): number;\\n  \\n    /**\\n     * Get the price of the next hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of purchasing a new Hacknet Node.\\n     *\\n     * @returns Cost of purchasing a new Hacknet Node.\\n     */\\n    getPurchaseNodeCost(): number;\\n  \\n    /**\\n     * Get the stats of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns an object containing a variety of stats about the specified Hacknet Node.\\n     *\\n     * Note that for Hacknet Nodes, production refers to the amount of money the node generates.\\n     * For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the\\n     * amount of hashes the node generates.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node\\n     * @returns Object containing a variety of stats about the specified Hacknet Node.\\n     */\\n    getNodeStats(index: number): NodeStats;\\n  \\n    /**\\n     * Upgrade the level of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the level of the specified Hacknet Node by n.\\n     *\\n     * Returns true if the Hacknet Node’s level is successfully upgraded by n\\n     * or if it is upgraded by some positive amount and the Node reaches its max level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s level is successfully upgraded, false otherwise.\\n     */\\n    upgradeLevel(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the RAM of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the specified Hacknet Node’s RAM n times.\\n     * Note that each upgrade doubles the Node’s RAM.\\n     * So this is equivalent to multiplying the Node’s RAM by 2 n.\\n     *\\n     * Returns true if the Hacknet Node’s RAM is successfully upgraded n times\\n     * or if it is upgraded some positive number of times and the Node reaches it max RAM.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s ram is successfully upgraded, false otherwise.\\n     */\\n    upgradeRam(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the core of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to purchase n cores for the specified Hacknet Node.\\n     *\\n     * Returns true if it successfully purchases n cores for the Hacknet Node\\n     * or if it purchases some positive amount and the Node reaches its max number of cores.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cores to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCore(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the cache of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Tries to upgrade the specified Hacknet Server’s cache n times.\\n     *\\n     * Returns true if it successfully upgrades the Server’s cache n times,\\n     * or if it purchases some positive amount and the Server reaches its max cache level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cache levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCache(index: number, n: number): boolean;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node levels.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the specified Hacknet Node by n levels.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to upgrade. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node.\\n     */\\n    getLevelUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node RAM.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the RAM of the specified Hacknet Node n times.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's ram.\\n     */\\n    getRamUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cores.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the number of cores of the specified Hacknet Node by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cores. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's number of cores.\\n     */\\n    getCoreUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cache.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the cost of upgrading the cache level of the specified Hacknet Server by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cache. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's cache.\\n     */\\n    getCacheUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Get the total number of hashes stored.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you have.\\n     *\\n     * @returns Number of hashes you have.\\n     */\\n    numHashes(): number;\\n  \\n    /**\\n     * Get the maximum number of hashes you can store.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you can store.\\n     *\\n     * @returns Number of hashes you can store.\\n     */\\n    hashCapacity(): number;\\n  \\n    /**\\n     * Get the cost of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\\n     *    hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\\n     *    ns.hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @returns Number of hashes required for the specified upgrade.\\n     */\\n    hashCost(upgName: string): number;\\n  \\n    /**\\n     * Purchase a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Spend the hashes generated by your Hacknet Servers on an upgrade.\\n     * Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\\n     *\\n     * The name of the upgrade must be an exact match.\\n     * The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`, which applies to a specific server.\\n     * In this case, the `upgTarget` argument must be the hostname of the server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * NS2:\\n     * ns.hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @param upgTarget - Object to which upgrade applies. Required for certain upgrades.\\n     * @returns True if the upgrade is successfully purchased, and false otherwise..\\n     */\\n    spendHashes(upgName: string, upgTarget?: string): boolean;\\n  \\n    /**\\n     * Get the list of hash upgrades\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the list of all available hash upgrades that can be used in the spendHashes function.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgrades = hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgrades = ns.hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @returns An array containing the available upgrades\\n     */\\n    getHashUpgrades(): string[];\\n  \\n    /**\\n     * Get the level of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Level of the upgrade.\\n     */\\n    getHashUpgradeLevel(upgName: string): number;\\n  \\n    /**\\n     * Get the multipler to study.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getStudyMult(): number;\\n  \\n    /**\\n     * Get the multipler to training.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getTrainingMult(): number;\\n  }\\n  \\n  /**\\n   * Bladeburner API\\n   * @remarks\\n   * You have to be employed in the Bladeburner division and be in BitNode-7\\n   * or have Source-File 7 in order to use this API.\\n   * @public\\n   */\\n  export interface Bladeburner {\\n    /**\\n     * List all contracts.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner contracts.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner contracts.\\n     */\\n    getContractNames(): string[];\\n  \\n    /**\\n     * List all operations.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner operations.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner operations.\\n     */\\n    getOperationNames(): string[];\\n  \\n    /**\\n     * List all black ops.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner Black Ops.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner Black Ops.\\n     */\\n    getBlackOpNames(): string[];\\n  \\n    /**\\n     * List all general actions.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner actions.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner actions.\\n     */\\n    getGeneralActionNames(): string[];\\n  \\n    /**\\n     * List all skills.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner skills.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner skills.\\n     */\\n    getSkillNames(): string[];\\n  \\n    /**\\n     * Start an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to start the specified Bladeburner action.\\n     * Returns true if the action was started successfully, and false otherwise.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match\\n     * @returns True if the action was started successfully, and false otherwise.\\n     */\\n    startAction(type: string, name: string): boolean;\\n  \\n    /**\\n     * Stop current action.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Stops the current Bladeburner action.\\n     *\\n     */\\n    stopBladeburnerAction(): void;\\n  \\n    /**\\n     * Get current action.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns an object that represents the player’s current Bladeburner action.\\n     * If the player is not performing an action, the function will return an object with the ‘type’ property set to “Idle”.\\n     *\\n     * @returns Object that represents the player’s current Bladeburner action.\\n     */\\n    getCurrentAction(): BladeburnerCurAction;\\n  \\n    /**\\n     * Get the time to complete an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of seconds it takes to complete the specified action\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of milliseconds it takes to complete the specified action.\\n     */\\n    getActionTime(type: string, name: string): number;\\n  \\n    /**\\n     * Get estimate success chance of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated success chance for the specified action.\\n     * This chance is returned as a decimal value, NOT a percentage\\n     * (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Estimated success chance for the specified action.\\n     */\\n    getActionEstimatedSuccessChance(type: string, name: string): [number, number];\\n  \\n    /**\\n     * Get the reputation gain of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the average Bladeburner reputation gain for successfully\\n     * completing the specified action.\\n     * Note that this value is an ‘average’ and the real reputation gain may vary slightly from this value.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Optional action level at which to calculate the gain\\n     * @returns Average Bladeburner reputation gain for successfully completing the specified action.\\n     */\\n    getActionRepGain(type: string, name: string, level: number): number;\\n  \\n    /**\\n     * Get action count remaining.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the remaining count of the specified action.\\n     *\\n     * Note that this is meant to be used for Contracts and Operations.\\n     * This function will return ‘Infinity’ for actions such as Training and Field Analysis.\\n     * This function will return 1 for BlackOps not yet completed regardless of wether\\n     * the player has the required rank to attempt the mission or not.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Remaining count of the specified action.\\n     */\\n    getActionCountRemaining(type: string, name: string): number;\\n  \\n    /**\\n     * Get the maximum level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the maximum level for this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Maximum level of the specified action.\\n     */\\n    getActionMaxLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get the current level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the current level of this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Current level of the specified action.\\n     */\\n    getActionCurrentLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get wether an action is set to autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action is currently set to autolevel.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns True if the action is set to autolevel, and false otherwise.\\n     */\\n    getActionAutolevel(type: string, name: string): boolean;\\n  \\n    /**\\n     * Set an action autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Enable/disable autoleveling for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param autoLevel - Whether or not to autolevel this action\\n     */\\n    setActionAutolevel(type: string, name: string, autoLevel: boolean): void;\\n  \\n    /**\\n     * Set the level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the level for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Level to set this action to.\\n     */\\n    setActionLevel(type: string, name: string, level: number): void;\\n  \\n    /**\\n     * Get player bladeburner rank.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the player’s Bladeburner Rank.\\n     *\\n     * @returns Player’s Bladeburner Rank.\\n     */\\n    getRank(): number;\\n  \\n    /**\\n     * Get black op required rank.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Returns the rank required to complete this BlackOp.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param name - Name of BlackOp. Must be an exact match.\\n     * @returns Rank required to complete this BlackOp.\\n     */\\n    getBlackOpRank(name: string): number;\\n  \\n    /**\\n     * Get bladeburner skill points.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner skill points you have.\\n     *\\n     * @returns Number of Bladeburner skill points you have.\\n     */\\n    getSkillPoints(): number;\\n  \\n    /**\\n     * Get skill level.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns your level in the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Level in the specified skill.\\n     */\\n    getSkillLevel(name: string): number;\\n  \\n    /**\\n     * Get cost to upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns the number of skill points needed to upgrade the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Number of skill points needed to upgrade the specified skill.\\n     */\\n    getSkillUpgradeCost(name: string): number;\\n  \\n    /**\\n     * Upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to upgrade the specified Bladeburner skill.\\n     *\\n     * Returns true if the skill is successfully upgraded, and false otherwise.\\n     *\\n     * @param skillName - Name of skill to be upgraded. Case-sensitive and must be an exact match\\n     * @returns true if the skill is successfully upgraded, and false otherwise.\\n     */\\n    upgradeSkill(name: string): boolean;\\n  \\n    /**\\n     * Get team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner team members you have assigned to the specified action.\\n     *\\n     * Setting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of Bladeburner team members that were assigned to the specified action.\\n     */\\n    getTeamSize(type: string, name: string): number;\\n  \\n    /**\\n     * Set team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the team size for the specified Bladeburner action.\\n     *\\n     * Returns the team size that was set, or -1 if the function failed.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param size - Number of team members to set. Will be converted using Math.round().\\n     * @returns Number of Bladeburner team members you assigned to the specified action.\\n     */\\n    setTeamSize(type: string, name: string, size: number): number;\\n  \\n    /**\\n     * Get estimated population in city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoids in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Estimated number of Synthoids in the specified city.\\n     */\\n    getCityEstimatedPopulation(name: string): number;\\n  \\n    /**\\n     * Get number of communities in a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoid communities in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Number of Synthoids communities in the specified city.\\n     */\\n    getCityCommunities(name: string): number;\\n  \\n    /**\\n     * Get chaos of a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chaos in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Chaos in the specified city.\\n     */\\n    getCityChaos(name: string): number;\\n  \\n    /**\\n     * Get current city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the city that the player is currently in (for Bladeburner).\\n     *\\n     * @returns City that the player is currently in (for Bladeburner).\\n     */\\n    getCity(): string;\\n  \\n    /**\\n     * Travel to another city in bladeburner.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to switch to the specified city (for Bladeburner only).\\n     *\\n     * Returns true if successful, and false otherwise\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns true if successful, and false otherwise\\n     */\\n    switchCity(name: string): boolean;\\n  \\n    /**\\n     * Get bladeburner stamina.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Returns an array with two elements:\\n     * * [Current stamina, Max stamina]\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * function getStaminaPercentage() {\\n     *    var res = bladeburner.getStamina();\\n     *    return res[0] / res[1];\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * function getStaminaPercentage() {\\n     *    const [current, max] = ns.bladeburner.getStamina();\\n     *    return current / max;\\n     * }\\n     * ```\\n     * @returns Array containing current stamina and max stamina.\\n     */\\n    getStamina(): [number, number];\\n  \\n    /**\\n     * Join the bladeburner faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to join the Bladeburner faction.\\n     *\\n     * Returns true if you successfully join the Bladeburner faction, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerFaction(): boolean;\\n  \\n    /**\\n     * Join the bladeburner division.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to join the Bladeburner division.\\n     *\\n     * Returns true if you successfully join the Bladeburner division, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerDivision(): boolean;\\n  \\n    /**\\n     * Get bladeburner bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Bladeburner mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 5x the normal speed.\\n     * For example, if an action takes 30 seconds to complete but you’ve accumulated over\\n     * 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\\n     *\\n     * @returns Amount of accumulated “bonus time” (milliseconds) for the Bladeburner mechanic.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Coding Contract API\\n   * @public\\n   */\\n  export interface CodingContract {\\n    /**\\n     * Attemps a coding contract.\\n     * @remarks\\n     * RAM cost: 10 GB\\n     *\\n     * Attempts to solve the Coding Contract with the provided solution.\\n     *\\n     * @param answer - Solution for the contract.\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns True if the solution was correct, false otherwise. If the returnReward option is configured, then the function will instead return a string. If the contract is successfully solved, the string will contain a description of the contract’s reward. Otherwise, it will be an empty string.\\n     */\\n    attempt(answer: string[] | number, filename: string, host?: string, opts?: CodingAttemptOptions): boolean | string;\\n  \\n    /**\\n     * Get the type of a coding contract.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns a name describing the type of problem posed by the Coding Contract.\\n     * (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Name describing the type of problem posed by the Coding Contract.\\n     */\\n    getContractType(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the description.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the full text description for the problem posed by the Coding Contract.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Contract’s text description.\\n     */\\n    getDescription(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the input data.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the data associated with the specific Coding Contract.\\n     * Note that this is not the same as the contract’s description.\\n     * This is just the data that the contract wants you to act on in order to solve\\n     *\\n     * @param filename - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns The specified contract’s data, data type depends on contract type.;\\n     */\\n    getData(filename: string, host?: string): any;\\n  \\n    /**\\n     * Get the number of attempt remaining.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the number of tries remaining on the contract before it self-destructs.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns How many attempts are remaining for the contract;\\n     */\\n    getNumTriesRemaining(filename: string, host?: string): number;\\n  }\\n  \\n  /**\\n   * Gang API\\n   * @remarks\\n   * If you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\\n   * @public\\n   */\\n  export interface Gang {\\n    /**\\n     * Create a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     *\\n     * Create a gang with the specified faction.\\n     * @returns True if the gang was created, false otherwise.\\n     */\\n    createGang(faction: string): boolean;\\n  \\n    /**\\n     * Check if you're in a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     * @returns True if you're in a gang, false otherwise.\\n     */\\n    inGang(): boolean;\\n  \\n    /**\\n     * List all gang members.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the names of all Gang members\\n     *\\n     * @returns Names of all Gang members.\\n     */\\n    getMemberNames(): string[];\\n  \\n    /**\\n     * Get information about your gang.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get general information about the gang.\\n     *\\n     * @returns Object containing general information about the gang.\\n     */\\n    getGangInformation(): GangGenInfo;\\n  \\n    /**\\n     * Get information about the other gangs.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get territory and power information about all gangs.\\n     *\\n     * @returns Object containing territory and power information about all gangs.\\n     */\\n    getOtherGangInformation(): GangOtherInfo;\\n  \\n    /**\\n     * Get information about a specific gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get stat and equipment-related information about a Gang Member\\n     *\\n     * @param name - Name of member.\\n     * @returns Object containing stat and equipment-related information about a Gang Member.\\n     */\\n    getMemberInformation(name: string): GangMemberInfo;\\n  \\n    /**\\n     * Check if you can recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns boolean indicating whether a member can currently be recruited\\n     *\\n     * @returns True if a member can currently be recruited, false otherwise.\\n     */\\n    canRecruitMember(): boolean;\\n  \\n    /**\\n     * Recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempt to recruit a new gang member.\\n     *\\n     * Possible reasons for failure:\\n     * * Cannot currently recruit a new member\\n     * * There already exists a member with the specified name\\n     *\\n     * @param name - Name of member to recruit.\\n     * @returns True if the member was successfully recruited, false otherwise.\\n     */\\n    recruitMember(name: string): boolean;\\n  \\n    /**\\n     * List member task names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all valid tasks that Gang members can be assigned to.\\n     *\\n     * @returns All valid tasks that Gang members can be assigned to.\\n     */\\n    getTaskNames(): string[];\\n  \\n    /**\\n     * Set gang member to task.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempts to assign the specified Gang Member to the specified task.\\n     * If an invalid task is specified, the Gang member will be set to idle (“Unassigned”).\\n     *\\n     * @param memberName - Name of Gang member to assign.\\n     * @param taskName - Task to assign.\\n     * @returns True if the Gang Member was successfully assigned to the task, false otherwise.\\n     */\\n    setMemberTask(memberName: string, taskName: string): boolean;\\n  \\n    /**\\n     * Get stats of a task.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\\n     *\\n     * @param name -  Name of the task.\\n     * @returns Detailed stats of a task.\\n     */\\n    getTaskStats(name: string): GangTaskStats;\\n  \\n    /**\\n     * List equipment names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all possible equipment/upgrades you can purchase for your Gang Members.\\n     * This includes Augmentations.\\n     *\\n     * @returns Names of all Equipments/Augmentations.\\n     */\\n    getEquipmentNames(): string[];\\n  \\n    /**\\n     * Get cost of equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the amount of money it takes to purchase a piece of Equipment or an Augmentation.\\n     * If an invalid Equipment/Augmentation is specified, this function will return Infinity.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Cost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\\n     */\\n    getEquipmentCost(equipName: string): number;\\n  \\n    /**\\n     * Get type of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment type.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Type of the equipment.\\n     */\\n    getEquipmentType(equipName: string): string;\\n  \\n    /**\\n     * Get stats of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment stats.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns A dictionary containing the stats of the equipment.\\n     */\\n    getEquipmentStats(equipName: string): EquipmentStats;\\n  \\n    /**\\n     * Purchase an equipment for a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempt to purchase the specified Equipment/Augmentation for the specified Gang member.\\n     *\\n     * @param memberName - Name of Gang member to purchase the equipment for.\\n     * @param equipName - Name of Equipment/Augmentation to purchase.\\n     * @returns True if the equipment was successfully purchased. False otherwise\\n     */\\n    purchaseEquipment(memberName: string, equipName: string): boolean;\\n  \\n    /**\\n     * Ascend a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Ascend the specified Gang Member.\\n     *\\n     * @param memberName - Name of member to ascend.\\n     * @returns Object with info about the ascension results. undefined if ascension did not occur.\\n     */\\n    ascendMember(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Get the result of an ascension without ascending.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the result of an ascension without ascending.\\n     *\\n     * @param memberName - Name of member.\\n     * @returns Object with info about the ascension results. undefined if ascension is impossible.\\n     */\\n    getAscensionResult(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Enable/Disable territory warfare.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Set whether or not the gang should engage in territory warfare\\n     *\\n     * @param engage - Whether or not to engage in territory warfare.\\n     */\\n    setTerritoryWarfare(engage: boolean): void;\\n  \\n    /**\\n     * Get chance to win clash with other gang.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\\n     *\\n     * @param gangName - Target gang\\n     * @returns Chance you have to win a clash with the specified gang.\\n     */\\n    getChanceToWinClash(gangName: string): number;\\n  \\n    /**\\n     * Get bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Gang mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 10x the normal speed.\\n     *\\n     * @returns Bonus time for the Gang mechanic in milliseconds.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Sleeve API\\n   * @remarks\\n   * If you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\\n   * @public\\n   */\\n  export interface Sleeve {\\n    /**\\n     * Get the number of sleeves you own.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the number of duplicate sleeves the player has.\\n     *\\n     * @returns number of duplicate sleeves the player has.\\n     */\\n    getNumSleeves(): number;\\n  \\n    /**\\n     * Get the stats of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a structure containing the stats of the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to get stats of.\\n     * @returns Object containing the stats of the sleeve.\\n     */\\n    getSleeveStats(sleeveNumber: number): SleeveSkills;\\n  \\n    /**\\n     * Get information about a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a struct containing tons of information about this sleeve\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve information.\\n     * @returns Object containing tons of information about this sleeve.\\n     */\\n    getInformation(sleeveNumber: number): SleeveInformation;\\n  \\n    /**\\n     * Get task of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the current task that the sleeve is performing. type is set to “Idle” if the sleeve isn’t doing anything.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve task from.\\n     * @returns Object containing information the current task that the sleeve is performing.\\n     */\\n    getTask(sleeveNumber: number): SleeveTask;\\n  \\n    /**\\n     * Set a sleeve to shock recovery.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start recovery.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToShockRecovery(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to synchronize.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start synchronizing.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToSynchronize(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to commit crime.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start commiting crime.\\n     * @param name - Name of the crime. Must be an exact match.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToCommitCrime(sleeveNumber: number, name: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this faction.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the faction.\\n     * @param factionName - Name of the faction to work for.\\n     * @param factionWorkType - Name of the action to perform for this faction.\\n     * @returns True if the sleeve started working on this faction, false otherwise.\\n     */\\n    setToFactionWork(sleeveNumber: number, factionName: string, factionWorkType: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a company.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this company.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the company.\\n     * @param companyName - Name of the company to work for.\\n     * @returns True if the sleeve started working on this company, false otherwise.\\n     */\\n    setToCompanyWork(sleeveNumber: number, companyName: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to take a class at a university.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start taking class.\\n     * @param university - Name of the university to attend.\\n     * @param className - Name of the class to follow.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to workout at the gym.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working out.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to workout at the gym.\\n     * @param gymName - Name of the gym.\\n     * @param stat - Name of the stat to train.\\n     * @returns True if the sleeve started working out, false otherwise.\\n     */\\n    setToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Make a sleeve travel to another city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve reached destination.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to travel.\\n     * @param cityName - Name of the destination city.\\n     * @returns True if the sleeve reached destination, false otherwise.\\n     */\\n    travel(sleeveNumber: number, cityName: string): boolean;\\n  \\n    /**\\n     * Get augmentations installed on a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentation names that this sleeve has installed.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve augmentations from.\\n     * @returns List of augmentation names that this sleeve has installed.\\n     */\\n    getSleeveAugmentations(sleeveNumber: number): string[];\\n  \\n    /**\\n     * List purchasable augs for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentations that the player can buy for this sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve purchasable augmentations from.\\n     * @returns List of augmentations that the player can buy for this sleeve.\\n     */\\n    getSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\\n  \\n    /**\\n     * Purchase an aug for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return true if the aug was purchased and installed on the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to buy an aug for.\\n     * @param augName - Name of the aug to buy. Must be an exact match.\\n     * @returns True if the aug was purchased and installed on the sleeve, false otherwise.\\n     */\\n    purchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\\n  }\\n  \\n  /**\\n   * Skills formulas\\n   * @public\\n   */\\n  interface SkillsFormulas {\\n    /**\\n     * Calculate skill level.\\n     * @param exp - experience for that skill\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated skill level.\\n     */\\n    calculateSkill(exp: number, skillMult?: number): number;\\n    /**\\n     * Calculate exp for skill level.\\n     * @param skill - target skill level\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated exp required.\\n     */\\n    calculateExp(skill: number, skillMult?: number): number;\\n  }\\n  \\n  /**\\n   * Hacking formulas\\n   * @public\\n   */\\n  interface HackingFormulas {\\n    /**\\n     * Calculate hack chance.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack chance.\\n     */\\n    hackChance(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack exp for one thread.\\n     * @remarks\\n     * Multiply by thread to get total exp\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack exp.\\n     */\\n    hackExp(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack percent for one thread.\\n     * @remarks\\n     * Multiply by thread to get total percent hacked.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack percent.\\n     */\\n    hackPercent(server: Server, player: Player): number;\\n    /**\\n     * Calculate the percent a server would grow.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param threads - Amount of thread.\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @param cores - Number of cores on the computer that will execute grow.\\n     * @returns The calculated grow percent.\\n     */\\n    growPercent(server: Server, threads: number, player: Player, cores?: number): number;\\n    /**\\n     * Calculate hack time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack time.\\n     */\\n    hackTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate grow time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated grow time.\\n     */\\n    growTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate weaken time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated weaken time.\\n     */\\n    weakenTime(server: Server, player: Player): number;\\n  }\\n  \\n  /**\\n   * Hacknet Node formulas\\n   * @public\\n   */\\n  interface HacknetNodesFormulas {\\n    /**\\n     * Calculate money gain rate.\\n     * @param level - level of the node.\\n     * @param ram - ram of the node.\\n     * @param cores - cores of the node.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated money gain rate.\\n     */\\n    moneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate the cost of a hacknet node.\\n     * @param n - number of the hacknet node\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetNodeCost(n: number, mult: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet node constants used by the game.\\n     */\\n    constants(): number;\\n  }\\n  \\n  /**\\n   * Hacknet Server formulas\\n   * @public\\n   */\\n  interface HacknetServersFormulas {\\n    /**\\n     * Calculate hash gain rate.\\n     * @param level - level of the server.\\n     * @param ramUsed - ramUsed of the server.\\n     * @param maxRam - maxRam of the server.\\n     * @param cores - cores of the server.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated hash gain rate.\\n     */\\n    hashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cache.\\n     * @param startingCache - starting cache level\\n     * @param extraCache - amount of levels of cache to purchase (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    cacheUpgradeCost(startingCache: number, extraCache?: number): number;\\n    /**\\n     * Calculate hash cost of an upgrade.\\n     * @param upgName - name of the upgrade\\n     * @param level - level of the upgrade\\n     * @returns The calculated hash cost.\\n     */\\n    hashUpgradeCost(upgName: number, level: number): number;\\n    /**\\n     * Calculate the cost of a hacknet server.\\n     * @param n - number of the hacknet server\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetServerCost(n: number, mult?: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet server constants used by the game.\\n     */\\n    constants(): any;\\n  }\\n  \\n  /**\\n   * Gang formulas\\n   * @public\\n   */\\n  interface GangFormulas {\\n    /**\\n     * Calculate the wanted penalty.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @returns The calculated wanted penalty.\\n     */\\n    wantedPenalty(gang: GangGenInfo): number;\\n    /**\\n     * Calculate respect gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Gang info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Gang info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated respect gain.\\n     */\\n    respectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate wanted gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated wanted gain.\\n     */\\n    wantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate money gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated money gain.\\n     */\\n    moneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n  \\n    /**\\n     * Calculate ascension point gain.\\n     * @param exp - Experience point before ascension.\\n     * @returns The calculated ascension point gain.\\n     */\\n    ascensionPointsGain(exp: number): number;\\n  \\n    /**\\n     * Calculate ascension mult.\\n     * @param points - Amount of ascension points.\\n     * @returns The calculated ascension mult.\\n     */\\n    ascensionMultiplier(points: number): number;\\n  }\\n  \\n  /**\\n   * Formulas API\\n   * @remarks\\n   * You need Formulas.exe on your home computer to use this API.\\n   * @public\\n   */\\n  export interface Formulas {\\n    /** Skills formulas */\\n    skills: SkillsFormulas;\\n    /** Hacking formulas */\\n    hacking: HackingFormulas;\\n    /** Hacknet Nodes formulas */\\n    hacknetNodes: HacknetNodesFormulas;\\n    /** Hacknet Servers formulas */\\n    hacknetServers: HacknetServersFormulas;\\n    /** Gang formulas */\\n    gang: GangFormulas;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface Fragment {\\n    id: number;\\n    shape: boolean[][];\\n    type: number;\\n    power: number;\\n    limit: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface ActiveFragment {\\n    id: number;\\n    avgCharge: number;\\n    numCharge: number;\\n    rotation: number;\\n    x: number;\\n    y: number;\\n  }\\n  \\n  /**\\n   * Stanek's Gift API.\\n   * @public\\n   */\\n  interface Stanek {\\n    /**\\n     * Stanek's Gift width.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The width of the gift.\\n     */\\n    width(): number;\\n    /**\\n     * Stanek's Gift height.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The height of the gift.\\n     */\\n    height(): number;\\n  \\n    /**\\n     * Charge a fragment, increasing its power.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @returns Promise that lasts until the charge action is over.\\n     */\\n    charge(rootX: number, rootY: number): Promise<void>;\\n  \\n    /**\\n     * List possible fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns List of possible fragments.\\n     */\\n    fragmentDefinitions(): Fragment[];\\n  \\n    /**\\n     * List of fragments in Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @returns List of active fragments placed on Stanek's Gift.\\n     */\\n    activeFragments(): ActiveFragment[];\\n  \\n    /**\\n     * Clear the board of all fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    clear(): void;\\n  \\n    /**\\n     * Check if fragment can be placed at specified location.\\n     * @remarks\\n     * RAM cost: cost: 0.5 GB\\n     *\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @param rotation - rotation A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - fragmentId ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    canPlace(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Place fragment on Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @param rotation - A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    place(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Get placed fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    get(rootX: number, rootY: number): ActiveFragment | undefined;\\n  \\n    /**\\n     * Remove fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 0.15 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    remove(rootX: number, rootY: number): boolean;\\n  }\\n  \\n  /**\\n   * User Interface API.\\n   * @public\\n   */\\n  interface UserInterface {\\n    /**\\n     * Get the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns An object containing the theme's colors\\n     */\\n    getTheme(): UserInterfaceTheme;\\n  \\n    /**\\n     * Sets the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     * @example\\n     * Usage example (NS2)\\n     * ```ts\\n     * const theme = ns.ui.getTheme();\\n     * theme.primary = '#ff5500';\\n     * ns.ui.setTheme(theme);\\n     * ```\\n     */\\n    setTheme(newTheme: UserInterfaceTheme): void;\\n  \\n    /**\\n     * Resets the player's theme to the default values\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    resetTheme(): void;\\n  }\\n  \\n  /**\\n   * Collection of all functions passed to scripts\\n   * @public\\n   * @remarks\\n   * <b>Basic ns1 usage example:</b>\\n   * ```ts\\n   *  // Basic ns functions can be used directly\\n   *  getHostname();\\n   *  // Some related functions are gathered within a common namespace\\n   *  stock.getPrice();\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscript1.html| ns1 in-game docs}\\n   * <hr>\\n   * <b>Basic ns2 usage example:</b>\\n   * ```ts\\n   * export async function main(ns) {\\n   *  // Basic ns functions can be accessed on the ns object\\n   *  ns.getHostname();\\n   *  // Some related functions are gathered under a sub-property of the ns object\\n   *  ns.stock.getPrice();\\n   *  // Some functions need to be await ed\\n   *  await ns.hack('n00dles');\\n   * }\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscriptjs.html| ns2 in-game docs}\\n   * <hr>\\n   */\\n  export interface NS extends Singularity {\\n    /**\\n     * Namespace for hacknet functions.\\n     * @remarks RAM cost: 4 GB\\n     */\\n    readonly hacknet: Hacknet;\\n    /**\\n     *\\n     * Namespace for bladeburner functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly bladeburner: Bladeburner;\\n    /**\\n     *\\n     * Namespace for codingcontract functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly codingcontract: CodingContract;\\n    /**\\n     *\\n     * Namespace for gang functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly gang: Gang;\\n    /**\\n     *\\n     * Namespace for sleeve functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly sleeve: Sleeve;\\n    /**\\n     *\\n     * Namespace for stock functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly stock: TIX;\\n    /**\\n     *\\n     * Namespace for formulas functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly formulas: Formulas;\\n    /**\\n     * Namespace for stanek functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly stanek: Stanek;\\n    /**\\n     * Namespace for corporation functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly corporation: Corporation;\\n  \\n    /**\\n     * Namespace for user interface functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly ui: UserInterface;\\n  \\n    /**\\n     * Arguments passed into the script.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Arguments passed into a script can be accessed using a normal\\n     * array using the [] operator (args[0], args[1], etc…).\\n     *\\n     * It is also possible to get the number of arguments that was passed into a script using: 'args.length'\\n     * WARNING: Do not try to modify the args array. This will break the game.\\n     */\\n    readonly args: (string | number | boolean)[];\\n  \\n    /**\\n     * Steal a servers money.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Function that is used to try and hack servers to steal money and gain hacking experience.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level when this function is called. In order to hack a server you must first gain root access to that server\\n     * and also have the required hacking level.\\n     *\\n     * A script can hack a server from anywhere. It does not need to be running on the same\\n     * server to hack that server. For example, you can create a script that hacks the `foodnstuff`\\n     * server and run that script on any server in the game.\\n     *\\n     * A successful `hack()` on a server will raise that server’s security level by 0.002.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var earnedMoney = hack(\\\"foodnstuff\\\");\\n     * earnedMoney = earnedMoney + hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let earnedMoney = await ns.hack(\\\"foodnstuff\\\");\\n     * earnedMoney += await ns.hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @param host - Hostname of the target server to hack.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount of money stolen if the hack is successful, and zero otherwise.\\n     */\\n    hack(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Spoof money in a servers bank account, increasing the amount available.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to increase the amount of money available on a server.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level. When `grow` completes, the money available on a target server will\\n     * be increased by a certain, fixed percentage. This percentage is determined by the\\n     * target server’s growth rate (which varies between servers) and security level. Generally,\\n     * higher-level servers have higher growth rates. The getServerGrowth() function can be used\\n     * to obtain a server’s growth rate.\\n     *\\n     * Like hack, `grow` can be called on any server, regardless of where the script is running.\\n     * The grow() command requires root access to the target server, but there is no required hacking\\n     * level to run the command. It also raises the security level of the target server by 0.004.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var availableMoney = getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\"));\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let availableMoney = ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\"));\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @param host - Hostname of the target server to grow.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The number by which the money on the server was multiplied for the growth.\\n     */\\n    grow(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Reduce a server security level.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to attack a server’s security, lowering the server’s security level.\\n     * The runtime for this command depends on your hacking level and the target server’s security\\n     * level when this function is called. This function lowers the security level of the target server by 0.05.\\n     *\\n     * Like hack and grow, `weaken` can be called on any server, regardless of\\n     * where the script is running. This command requires root access to the target server, but\\n     * there is no required hacking level to run the command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var currentSecurity = getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let currentSecurity = ns.getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @param host - Hostname of the target server to weaken.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\\n     */\\n    weaken(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Predict the effect of weaken.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security decrease that would occur if a weaken with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @param cores - Optional. The number of cores of the server that would run weaken.\\n     * @returns The security decrease.\\n     */\\n    weakenAnalyze(threads: number, cores?: number): number;\\n  \\n    /**\\n     * Predict the effect of hack.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of script threads you need when running the hack command\\n     * to steal the specified amount of money from the target server.\\n     * If hackAmount is less than zero or greater than the amount of money available on the server,\\n     * then this function returns -1.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * //For example, let’s say the foodnstuff server has $10m and you run:\\n     * hackAnalyzeThreads(\\\"foodnstuff\\\", 1e6);\\n     * //If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\\n     * ```\\n     * @param host - Hostname of the target server to analyze.\\n     * @param hackAmount - Amount of money you want to hack from the server.\\n     * @returns The number of threads needed to hack the server for hackAmount money.\\n     */\\n    hackAnalyzeThreads(host: string, hackAmount: number): number;\\n  \\n    /**\\n     * Get the part of money stolen with a single thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the part of the specified server’s money you will steal with a single thread hack.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, assume the following returns 0.01:\\n     * var hackAmount = hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, assume the following returns 0.01:\\n     * const hackAmount = ns.hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @returns The part of money you will steal from the target server with a single thread hack.\\n     */\\n    hackAnalyze(host: string): number;\\n  \\n    /**\\n     * Get the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a hack with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    hackAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Get the chance of successfully hacking a server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the chance you have of successfully hacking the specified server.\\n     *\\n     * This returned value is in decimal form, not percentage.\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns The chance you have of successfully hacking the target server.\\n     */\\n    hackAnalyzeChance(host: string): number;\\n  \\n    /**\\n     * Calculate the number of grow thread needed to grow a server by a certain multiplier.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of “growths” needed in order to increase\\n     * the amount of money available on the specified server by the specified amount.\\n     * The specified amount is multiplicative and is in decimal form, not percentage.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * var growTimes = growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * const growTimes = ns.growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @param growthAmount - Multiplicative factor by which the server is grown. Decimal form..\\n     * @returns The amount of grow calls needed to grow the specified server by the specified amount\\n     */\\n    growthAnalyze(host: string, growthAmount: number, cores?: number): number;\\n  \\n    /**\\n     * Calculate the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a grow with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    growthAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Suspends the script for n milliseconds.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   tprint(i + 1);\\n     *   sleep(5000);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   ns.tprint(i + 1);\\n     *   await ns.sleep(5000);\\n     * }\\n     * ```\\n     * @returns\\n     */\\n    sleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Suspends the script for n milliseconds. Doesn't block with concurrent calls.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @returns\\n     */\\n    asleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Prints one or move values or variables to the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    print(...args: any[]): void;\\n  \\n    /**\\n     * Prints one or more values or variables to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    tprint(...args: any[]): void;\\n  \\n    /**\\n     * Prints a raw value or a variable to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param format - format of the message\\n     * @param msg - Value to be printed.\\n     */\\n    tprintf(format: string, ...values: any[]): void;\\n  \\n    /**\\n     * Clears the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    clearLog(): void;\\n  \\n    /**\\n     * Disables logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Logging can be disabled for all functions by passing `ALL` as the argument.\\n     *\\n     * Note that this does not completely remove all logging functionality.\\n     * This only stops a function from logging when the function is successful.\\n     * If the function fails, it will still log the reason for failure.\\n     *\\n     * @param fn - Name of function for which to disable logging.\\n     */\\n    disableLog(fn: string): void;\\n  \\n    /**\\n     * Enable logging for a certain function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Re-enables logging for the given function. If `ALL` is passed into this\\n     * function as an argument, then it will revert the effects of disableLog(`ALL`).\\n     *\\n     * @param fn - Name of function for which to enable logging.\\n     */\\n    enableLog(fn: string): void;\\n  \\n    /**\\n     * Checks the status of the logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param fn - Name of function to check.\\n     * @returns Returns a boolean indicating whether or not logging is enabled for that function (or `ALL`)\\n     */\\n    isLogEnabled(fn: string): boolean;\\n  \\n    /**\\n     * Get all the logs of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns a script’s logs. The logs are returned as an array, where each line is an element in the array.\\n     * The most recently logged line is at the end of the array.\\n     * Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game’s options.\\n     * If the function is called with no arguments, it will return the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of script to get logs from.\\n     * @param host - Optional. Hostname of the server that the script is on.\\n     * @param args - Arguments to identify which scripts to get logs for.\\n     * @returns Returns an string array, where each line is an element in the array. The most recently logged line is at the end of the array.\\n     */\\n    getScriptLogs(fn?: string, host?: string, ...args: any[]): string[];\\n  \\n    /**\\n     * Open the tail window of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Opens a script’s logs. This is functionally the same as the tail Terminal command.\\n     *\\n     * If the function is called with no arguments, it will open the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * ns.tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of the script being tailed. If omitted, the current script is tailed.\\n     * @param host - Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional.\\n     * @param args - Arguments for the script being tailed.\\n     */\\n    tail(fn?: string, host?: string, ...args: any[]): void;\\n  \\n    /**\\n     * Get the list of servers connected to a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array containing the hostnames of all servers that are one\\n     * node way from the specified target server. The hostnames in the returned\\n     * array are strings.\\n     *\\n     * @param host - Optional, Hostname of the server to scan, default to current server.\\n     * @returns Returns an string of hostnames.\\n     */\\n    scan(host?: string): string[];\\n  \\n    /**\\n     * Runs NUKE.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Running NUKE.exe on a target server gives you root access which means you can executes scripts on said server. NUKE.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    nuke(host: string): void;\\n  \\n    /**\\n     * Runs BruteSSH.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    brutessh(host: string): void;\\n  \\n    /**\\n     * Runs FTPCrack.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    ftpcrack(host: string): void;\\n  \\n    /**\\n     * Runs relaySMTP.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    relaysmtp(host: string): void;\\n  \\n    /**\\n     * Runs HTTPWorm.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    httpworm(host: string): void;\\n  \\n    /**\\n     * Runs SQLInject.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the SQLInject.exe program on the target server. SQLInject.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @remarks RAM cost: 0.05 GB\\n     * @param host - Hostname of the target server.\\n     */\\n    sqlinject(host: string): void;\\n  \\n    /**\\n     * Start another script on the current server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Run a script as a separate process. This function can only be used to run scripts located on the\\n     * current server (the server running the script that calls this function). Requires a significant\\n     * amount of RAM to run this command.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * ns.run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * ns.run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * ns.run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @param script - Filename of script to run.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    run(script: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Start another script on any server.\\n     * @remarks\\n     * RAM cost: 1.3 GB\\n     *\\n     * Run a script as a separate process on a specified server. This is similar to the run function\\n     * except that it can be used to run a script on any server, instead of just the current server.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * ns.exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param host - Hostname of the `target server` on which to execute the script.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    exec(script: string, host: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Terminate current script and start another in 10s.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Terminates the current script, and then after a delay of about 10 seconds it will execute the\\n     * newly-specified script. The purpose of this function is to execute a new script without being\\n     * constrained by the RAM usage of the current one. This function can only be used to run scripts\\n     * on the local server.\\n     *\\n     * Because this function immediately terminates the script, it does not have a return value.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * ns.spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param numThreads - Number of threads to spawn new script with. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run.\\n     */\\n    spawn(script: string, numThreads?: number, ...args: string[]): void;\\n  \\n    /**\\n     * Terminate another script.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills the script on the target server specified by the script’s name and arguments.\\n     * Remember that scripts are uniquely identified by both their name and arguments.\\n     * For example, if `foo.script` is run with the argument 1, then this is not the same as\\n     * `foo.script` run with the argument 2, even though they have the same code.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * ns.kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @param script - Filename or pid of the script to kill\\n     * @param host - Hostname of the server on which to kill the script.\\n     * @param args - Arguments to identify which script to kill.\\n     * @returns True if the script is successfully killed, and false otherwise.\\n     */\\n    kill(script: number): boolean;\\n    kill(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Terminate all scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills all running scripts on the specified server. This function returns true\\n     * if any scripts were killed, and false otherwise. In other words, it will return\\n     * true if there are any scripts running on the target server.\\n     * If no host is defined, it will kill all scripts, where the script is running.\\n     *\\n     * @param host - IP or hostname of the server on which to kill all scripts.\\n     * @returns True if any scripts were killed, and false otherwise.\\n     */\\n    killall(host?: string): boolean;\\n  \\n    /**\\n     * Terminates the current script immediately.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    exit(): void;\\n  \\n    /**\\n     * Copy file between servers.\\n     * @remarks\\n     * RAM cost: 0.6 GB\\n     *\\n     * Copies a script or literature (.lit) file(s) to another server. The files argument can be either a string\\n     * specifying a single file to copy, or an array of strings specifying multiple files to copy.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * await ns.scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * await ns.scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * //ns2, copies files from home to a target server\\n     * const server = ns.args[0];\\n     * const files = [\\\"hack.js\\\",\\\"weaken.js\\\",\\\"grow.js\\\"];\\n     * await ns.scp(files, \\\"home\\\", server);\\n     * ```\\n     * @param files - Filename or an array of filenames of script/literature files to copy.\\n     * @param source - Host of the source server, which is the server from which the file will be copied. This argument is optional and if it’s omitted the source will be the current server.\\n     * @param destination - Host of the destination server, which is the server to which the file will be copied.\\n     * @returns True if the script/literature file is successfully copied over and false otherwise. If the files argument is an array then this function will return true if at least one of the files in the array is successfully copied.\\n     */\\n    scp(files: string | string[], source: string, destination: string): Promise<boolean>;\\n  \\n    /**\\n     * List files on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with the filenames of all files on the specified server\\n     * (as strings). The returned array is sorted in alphabetic order.\\n     *\\n     * @param host - Host of the target server.\\n     * @param grep - A substring to search for in the filename.\\n     * @returns Array with the filenames of all files on the specified server.\\n     */\\n    ls(host: string, grep?: string): string[];\\n  \\n    /**\\n     * List running scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with general information about all scripts running on the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * const scripts = ps(\\\"home\\\");\\n     * for (let i = 0; i < scripts.length; ++i) {\\n     *     tprint(scripts[i].filename + ' ' + scripts[i].threads);\\n     *     tprint(scripts[i].args);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ps = ns.ps(\\\"home\\\");\\n     * for (script of ps) {\\n     *     ns.tprint(`${script.filename} ${ps[i].threads}`);\\n     *     ns.tprint(script.args);\\n     * }\\n     * ```\\n     * @param host - Host address of the target server. If not specified, it will be the current server’s IP by default.\\n     * @returns Array with general information about all scripts running on the specified target server.\\n     */\\n    ps(host?: string): ProcessInfo[];\\n  \\n    /**\\n     * Check if your have root access on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns a boolean indicating whether or not the player has root access to the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * if (hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * if (ns.hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    ns.nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @param host - Host of the target server\\n     * @returns True if player has root access to the specified target server, and false otherwise.\\n     */\\n    hasRootAccess(host: string): boolean;\\n  \\n    /**\\n     * Returns a string with the hostname of the server that the script is running on.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Hostname of the server that the script is on.\\n     */\\n    getHostname(): string;\\n  \\n    /**\\n     * Returns the player’s current hacking level.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Player’s current hacking level\\n     */\\n    getHackingLevel(): number;\\n  \\n    /**\\n     * Get hacking related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacking related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHackingMultipliers();\\n     * print(mults.chance);\\n     * print(mults.growth);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {chance, growth} = ns.getHackingMultipliers();\\n     * print(chance);\\n     * print(growth);\\n     * ```\\n     * @returns Object containing the Player’s hacking related multipliers.\\n     */\\n    getHackingMultipliers(): HackingMultipliers;\\n  \\n    /**\\n     * Get hacknet related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacknet related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHacknetMultipliers();\\n     * print(mults.production);\\n     * print(mults.purchaseCost);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {production, purchaseCost} = ns.getHacknetMultipliers();\\n     * print(production);\\n     * print(purchaseCost);\\n     * ```\\n     * @returns Object containing the Player’s hacknet related multipliers.\\n     */\\n    getHacknetMultipliers(): HacknetMultipliers;\\n  \\n    /**\\n     * Returns a server object for the given server. Defaults to the running script's server if host is not specified.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * @param host - Optional. Hostname for the requested server object.\\n     * @returns The requested server object.\\n     */\\n    getServer(host?: string): Server;\\n  \\n    /**\\n     * Get money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of money available on a server.\\n     * Running this function on the home computer will return the player’s money.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * getServerMoneyAvailable(\\\"home\\\"); //Returns player's money\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * ns.getServerMoneyAvailable(\\\"home\\\"); // Returns player's money\\n     * ```\\n     * @param host - Host of target server\\n     * @returns Amount of money available on the server.\\n     */\\n    getServerMoneyAvailable(host: string): number;\\n  \\n    /**\\n     * Get maximum money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the maximum amount of money that can be available on a server.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Maximum amount of money available on the server.\\n     */\\n    getServerMaxMoney(host: string): number;\\n  \\n    /**\\n     * Get a server growth parameter.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the server’s instrinsic “growth parameter”. This growth\\n     * parameter is a number between 0 and 100 that represents how\\n     * quickly the server’s money grows. This parameter affects the\\n     * percentage by which the server’s money is increased when using the\\n     * grow function. A higher growth parameter will result in a\\n     * higher percentage increase from grow.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Parameter that affects the percentage by which the server’s money is increased when using the grow function.\\n     */\\n    getServerGrowth(host: string): number;\\n  \\n    /**\\n     * Get server security level.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the security level of the target server. A server’s security\\n     * level is denoted by a number, typically between 1 and 100\\n     * (but it can go above 100).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Security level of the target server.\\n     */\\n    getServerSecurityLevel(host: string): number;\\n  \\n    /**\\n     * Returns the minimum security level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns Minimum security level of the target server.\\n     */\\n    getServerMinSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated useless\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     * Returns the base security level of the target server. This is the security\\n     * level that the server starts out with. This is different than\\n     * getServerSecurityLevel because getServerSecurityLevel returns\\n     * the current security level of a server, which can constantly change due to\\n     * hack, grow, and weaken, calls on that server.\\n     * The base security level will stay the same until you reset by\\n     * installing an Augmentation(s).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Base security level of the target server.\\n     */\\n    getServerBaseSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated use getServerMaxRam / getServerUsedRam\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns an array with two elements that gives information about a server’s memory (RAM).\\n     * The first element in the array is the amount of RAM that the server has total (in GB).\\n     * The second element in the array is the amount of RAM that is currently being used on\\n     * the server (in GB).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var serverRam = getServerRam(\\\"helios\\\");\\n     * var totalRam = serverRam[0];\\n     * var ramUsed = serverRam[1];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const [totalRam, ramUsed] = ns.getServerRam(\\\"helios\\\");\\n     * ```\\n     * @param host - Host of target server.\\n     * @returns Array with total and used memory on the specified server.\\n     */\\n    getServerRam(host: string): [number, number];\\n  \\n    /**\\n     * Get the max RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns max ram\\n     */\\n    getServerMaxRam(host: string): number;\\n    /**\\n     * Get the used RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns used ram\\n     */\\n    getServerUsedRam(host: string): number;\\n  \\n    /**\\n     * Returns the required hacking level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The required hacking level of the target server.\\n     */\\n    getServerRequiredHackingLevel(host: string): number;\\n  \\n    /**\\n     * Returns the number of open ports required to successfully run NUKE.exe on the specified server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The number of open ports required to successfully run NUKE.exe on the specified server.\\n     */\\n    getServerNumPortsRequired(host: string): number;\\n  \\n    /**\\n     * Returns a boolean denoting whether or not the specified server exists.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns True if specified server exists, and false otherwise.\\n     */\\n    serverExists(host: string): boolean;\\n  \\n    /**\\n     * Check if a file exists.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified file exists on the target server.\\n     * The filename for scripts is case-sensitive, but for other types of files it is not.\\n     * For example, fileExists(“brutessh.exe”) will work fine, even though the actual program\\n     * is named 'BruteSSH.exe'.\\n     *\\n     * If the hostname/ip argument is omitted, then the function will search through the current\\n     * server (the server running the script that calls this function) for the file.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * // The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * ns.fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * // The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * ns.fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * @param filename - Filename of file to check.\\n     * @param host - Host of target server. This is optional. If it is not specified then the function will use the current server as the target server.\\n     * @returns True if specified file exists, and false otherwise.\\n     */\\n    fileExists(filename: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if a script is running.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified script is running on the target server.\\n     * Remember that a script is uniquely identified by both its name and its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", ns.getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @param args - Arguments to specify/identify which scripts to search for.\\n     * @returns True if specified script is running on the target server, and false otherwise.\\n     */\\n    isRunning(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Get general info about a running script.\\n     * @remarks\\n     * RAM cost: 0.3 GB\\n     *\\n     * Running with no args returns curent script.\\n     *\\n     * @returns info about a running script\\n     */\\n    getRunningScript(filename?: string | number, hostname?: string, ...args: (string | number)[]): RunningScript;\\n  \\n    /**\\n     * Get cost of purchasing a server.\\n     * @remarks\\n     * RAM cost: 0.25 GB\\n     *\\n     * Returns the cost to purchase a server with the specified amount of ram.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * for (i = 1; i <= 20; i++) {\\n     *     tprint(i + \\\" -- \\\" + getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * for (i = 1; i <= 20; i++) {\\n     *     ns.tprint(i + \\\" -- \\\" + ns.getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @param ram - Amount of RAM of a potential purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The cost to purchase a server with the specified amount of ram.\\n     */\\n    getPurchasedServerCost(ram: number): number;\\n  \\n    /**\\n     * Purchase a server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Purchased a server with the specified hostname and amount of RAM.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string\\n     * and have whitespace removed. Anything that resolves to an empty string will cause\\n     * the function to fail. If there is already a server with the specified hostname,\\n     * then the function will automatically append a number at the end of the hostname\\n     * argument value until it finds a unique hostname. For example, if the script calls\\n     * `purchaseServer(“foo”, 4)` but a server named “foo” already exists, the it will\\n     * automatically change the hostname to `foo-0`. If there is already a server with the\\n     * hostname `foo-0`, then it will change the hostname to `foo-1`, and so on.\\n     *\\n     * Note that there is a maximum limit to the amount of servers you can purchase.\\n     *\\n     * Returns the hostname of the newly purchased server as a string. If the function\\n     * fails to purchase a server, then it will return an empty string. The function will\\n     * fail if the arguments passed in are invalid, if the player does not have enough\\n     * money to purchase the specified server, or if the player has exceeded the maximum\\n     * amount of servers.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var ram = 64;\\n     * var prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ram = 64;\\n     * const prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    ns.purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @param hostname - Host of the purchased server.\\n     * @param ram - Amount of RAM of the purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The hostname of the newly purchased server.\\n     */\\n    purchaseServer(hostname: string, ram: number): string;\\n  \\n    /**\\n     * Delete a purchased server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Deletes one of your purchased servers, which is specified by its hostname.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string.\\n     * Whitespace is automatically removed from the string. This function will not delete a\\n     * server that still has scripts running on it.\\n     *\\n     * @param host - Host of the server to delete.\\n     * @returns True if successful, and false otherwise.\\n     */\\n    deleteServer(host: string): boolean;\\n  \\n    /**\\n     * Returns an array with the hostnames of all of the servers you have purchased.\\n     *\\n     * @remarks 2.25 GB\\n     * @returns Returns an array with the hostnames of all of the servers you have purchased.\\n     */\\n    getPurchasedServers(): string[];\\n  \\n    /**\\n     * Returns the maximum number of servers you can purchase.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum number of servers you can purchase.\\n     */\\n    getPurchasedServerLimit(): number;\\n  \\n    /**\\n     * Returns the maximum RAM that a purchased server can have.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum RAM that a purchased server can have.\\n     */\\n    getPurchasedServerMaxRam(): number;\\n  \\n    /**\\n     * Write data to a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function can be used to either write data to a text file (.txt).\\n     *\\n     * This function will write data to that text file. If the specified text file does not exist,\\n     * then it will be created. The third argument mode, defines how the data will be written to\\n     * the text file. If *mode is set to “w”, then the data is written in “write” mode which means\\n     * that it will overwrite all existing data on the text file. If mode is set to any other value\\n     * then the data will be written in “append” mode which means that the data will be added at the\\n     * end of the text file.\\n     *\\n     * @param handle - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @param mode - Defines the write mode. Only valid when writing to text files.\\n     */\\n    write(handle: string, data?: string[] | number | string, mode?: \\\"w\\\" | \\\"a\\\"): Promise<void>;\\n  \\n    /**\\n     * Attempt to write to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Attempts to write data to the specified Netscript Port.\\n     * If the port is full, the data will not be written.\\n     * Otherwise, the data will be written normally.\\n     *\\n     * @param port - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @returns True if the data is successfully written to the port, and false otherwise.\\n     */\\n    tryWritePort(port: number, data: string[] | number): Promise<boolean>;\\n  \\n    /**\\n     * Read content of a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to read data from a port or from a text file (.txt).\\n     *\\n     * This function will return the data in the specified text\\n     * file. If the text file does not exist, an empty string will be returned.\\n     *\\n     * @param handle - Port or text file to read from.\\n     * @returns Data in the specified text file or port.\\n     */\\n    read(handle: string): any;\\n  \\n    /**\\n     * Get a copy of the data from a port without popping it.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to peek at the data from a port. It returns the\\n     * first element in the specified port without removing that element. If\\n     * the port is empty, the string “NULL PORT DATA” will be returned.\\n     *\\n     * @param port - Port to peek. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    peek(port: number): any;\\n  \\n    /**\\n     * Clear data from a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Delete all data from that text file.\\n     *\\n     * @param handle - Text file to clear.\\n     */\\n    clear(handle: string): void;\\n  \\n    /**\\n     * Clear data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Deleta all data from the underlying queue.\\n     *\\n     * @param handle - Port to clear.\\n     */\\n    clearPort(handle: number): void;\\n  \\n    /**\\n     * Write data to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Write data to that netscript port.\\n     * @returns The data popped off the queue if it was full.\\n     */\\n    writePort(port: number, data: string | number): Promise<any>;\\n    /**\\n     * Read data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Read data from that port. A port is a serialized queue.\\n     * This function will remove the first element from that queue and return it.\\n     * If the queue is empty, then the string “NULL PORT DATA” will be returned.\\n     * @returns the data read.\\n     */\\n    readPort(port: number): any;\\n  \\n    /**\\n     * Get all data on a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Get a handle to a Netscript Port.\\n     *\\n     * WARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\\n     *\\n     * @see https://bitburner.readthedocs.io/en/latest/netscript/netscriptmisc.html#netscript-ports\\n     * @param port - Port number. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    getPortHandle(port: number): any[];\\n  \\n    /**\\n     * Delete a file.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Removes the specified file from the current server. This function works for every file\\n     * type except message (.msg) files.\\n     *\\n     * @param name - Filename of file to remove. Must include the extension.\\n     * @param host - Host Address of the server on which to delete the file. Optional. Defaults to current server.\\n     * @returns True if it successfully deletes the file, and false otherwise.\\n     */\\n    rm(name: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if any script with a filename is running.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns a boolean indicating whether any instance of the specified script is running\\n     * on the target server, regardless of its arguments.\\n     *\\n     * This is different than the isRunning function because it does not try to\\n     * identify a specific instance of a running script by its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", getHostname());\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", ns.getHostname());\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns True if the specified script is running, and false otherwise.\\n     */\\n    scriptRunning(script: string, host: string): boolean;\\n  \\n    /**\\n     * Kill all scripts with a filename.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Kills all scripts with the specified filename on the target server specified by hostname,\\n     * regardless of arguments.\\n     *\\n     * @param script - Filename of script to kill. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns true if one or more scripts were successfully killed, and false if none were.\\n     */\\n    scriptKill(script: string, host: string): boolean;\\n  \\n    /**\\n     * Returns the current script name.\\n     *\\n     * @remarks RAM cost: 0 GB\\n     * @returns Current script name.\\n     */\\n    getScriptName(): string;\\n  \\n    /**\\n     * Get the ram cost of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of RAM required to run the specified script on the target server.\\n     * Returns 0 if the script does not exist.\\n     *\\n     * @param script - Filename of script. This is case-sensitive.\\n     * @param host - Host of target server the script is located on. This is optional, If it is not specified then the function will se the current server as the target server.\\n     * @returns Amount of RAM required to run the specified script on the target server, and 0 if the script does not exist.\\n     */\\n    getScriptRam(script: string, host?: string): number;\\n  \\n    /**\\n     * Get the execution time of a hack() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *When `hack` completes an amount of money is stolen depending on the player's skills.\\n     * Returns the amount of time in milliseconds it takes to execute the hack Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the hack time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the hack Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getHackTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a grow() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the grow time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the grow Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getGrowTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a weaken() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the weaken Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the weaken time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the weaken Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getWeakenTime(host: string): number;\\n  \\n    /**\\n     * Get the income of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of income the specified script generates while online\\n     * (when the game is open, does not apply for offline income). Remember that\\n     * a script is uniquely identified by both its name and its arguments. So for\\n     * example if you ran a script with the arguments “foodnstuff” and “5” then\\n     * in order to use this function to get that script’s income you must specify\\n     * those same arguments in the same order in this function call.\\n     *\\n     * This function can also be called with no arguments.\\n     * If called with no arguments, then this function will return an array of two values.\\n     * The first value is the total income (dollar / second) of all of your active scripts\\n     * (scripts that are currently running on any server).\\n     * The second value is the total income (dollar / second) that you’ve earned from scripts\\n     * since you last installed Augmentations.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of income the specified script generates while online.\\n     */\\n    getScriptIncome(): [number, number];\\n    getScriptIncome(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Get the exp gain of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of hacking experience the specified script generates while online\\n     * (when the game is open, does not apply for offline experience gains). Remember that a\\n     * script is uniquely identified by both its name and its arguments.\\n     *\\n     * This function can also return the total experience gain rate of all of your active\\n     * scripts by running the function with no arguments.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of hacking experience the specified script generates while online.\\n     */\\n    getScriptExpGain(): number;\\n    getScriptExpGain(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Returns the amount of time in milliseconds that have passed since you last installed Augmentations.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Time in milliseconds that have passed since you last installed Augmentations.\\n     */\\n    getTimeSinceLastAug(): number;\\n  \\n    /**\\n     * Format a string.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    sprintf(format: string, ...args: string[]): string;\\n  \\n    /**\\n     * Format a string with an array of arguments.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    vsprintf(format: string, args: string[]): string;\\n  \\n    /**\\n     * Format a number\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Converts a number into a string with the specified formatter.\\n     * This uses the numeraljs library, so the formatters must be compatible with that.\\n     * This is the same function that the game itself uses to display numbers.\\n     *\\n     * see: http://numeraljs.com/\\n     * @param n - Number to format.\\n     * @param format - Formatter.\\n     * @returns Formated number.\\n     */\\n    nFormat(n: number, format: string): string;\\n  \\n    /**\\n     * Format time to readable string\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param milliseconds - Number of millisecond to format.\\n     * @param milliPrecision - Format time with subsecond precision, defaults to false.\\n     * @returns The formatted time.\\n     */\\n    tFormat(milliseconds: number, milliPrecision?: boolean): string;\\n  \\n    /**\\n     * Prompt the player with a Yes/No modal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Prompts the player with a dialog box with two options: “Yes” and “No”.\\n     * This function will return true if the player click “Yes” and false if\\n     * the player clicks “No”. The script’s execution is halted until the player\\n     * selects one of the options.\\n     *\\n     * @param txt - Text to appear in the prompt dialog box.\\n     * @returns True if the player click “Yes” and false if the player clicks “No”.\\n     */\\n    prompt(txt: string): Promise<boolean>;\\n  \\n    /**\\n     * Open up a message box.\\n     * @param msg - Message to alert.\\n     */\\n    alert(msg: any): void;\\n  \\n    /**\\n     * Queue a toast (bottom-right notification).\\n     * @param msg - Message in the toast.\\n     * @param variant - Type of toast, must be one of success, info, warning, error. Defaults to success.\\n     * @param duration - Duration of toast in ms. Can also be `null` to create a persistent toast. Defaults to 2000\\n     */\\n    toast(msg: any, variant?: string, duration?: number | null): void;\\n  \\n    /**\\n     * Download a file from the internet.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Retrieves data from a URL and downloads it to a file on the specified server.\\n     * The data can only be downloaded to a script (.script, .ns, .js) or a text file (.txt).\\n     * If the file already exists, it will be overwritten by this command.\\n     * Note that it will not be possible to download data from many websites because they\\n     * do not allow cross-origin resource sharing (CORS).\\n     *\\n     * IMPORTANT: This is an asynchronous function that returns a Promise.\\n     * The Promise’s resolved value will be a boolean indicating whether or not the data was\\n     * successfully retrieved from the URL. Because the function is async and returns a Promise,\\n     * it is recommended you use wget in NetscriptJS (Netscript 2.0).\\n     *\\n     * In NetscriptJS, you must preface any call to wget with the await keyword (like you would hack or sleep).\\n     * wget will still work in Netscript 1.0, but the functions execution will not be synchronous\\n     * (i.e. it may not execute when you expect/want it to).\\n     * Furthermore, since Promises are not supported in ES5,\\n     * you will not be able to process the returned value of wget in Netscript 1.0.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * await ns.wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @param url - URL to pull data from.\\n     * @param target - Filename to write data to. Must be script or text file.\\n     * @param host - Optional hostname/ip of server for target file.\\n     * @returns True if the data was successfully retrieved from the URL, false otherwise.\\n     */\\n    wget(url: string, target: string, host?: string): Promise<boolean>;\\n  \\n    /**\\n     * Returns the amount of Faction favor required to be able to donate to a faction.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @returns Amount of Faction favor required to be able to donate to a faction.\\n     */\\n    getFavorToDonate(): number;\\n  \\n    /**\\n     * Get the current Bitnode multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the current BitNode multipliers.\\n     * This function requires you to be in Bitnode 5 or have Source-File 5 in order to run.\\n     * The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%).\\n     * The multipliers represent the difference between the current BitNode and\\n     * the original BitNode (BitNode-1).\\n     *\\n     * For example, if the CrimeMoney multiplier has a value of 0.1, then that means\\n     * that committing crimes in the current BitNode will only give 10% of the money\\n     * you would have received in BitNode-1.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var mults = getBitNodeMultipliers();\\n     * print(mults.ServerMaxMoney);\\n     * print(mults.HackExpGain);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\\n     * print(ServerMaxMoney);\\n     * print(HackExpGain);\\n     * ```\\n     * @returns Object containing the current BitNode multipliers.\\n     */\\n    getBitNodeMultipliers(): BitNodeMultipliers;\\n  \\n    /**\\n     * Get a list of acquired Source-Files.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns an array of source files\\n     *\\n     * @returns Array containing an object with number and level of the source file.\\n     */\\n    getOwnedSourceFiles(): SourceFileLvl[];\\n  \\n    /**\\n     * Get information about the player.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Returns an object with information on the current player.\\n     *\\n     * @returns Player info\\n     */\\n    getPlayer(): Player;\\n  \\n    /**\\n     * Add callback function when the script dies\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * NS2 exclusive\\n     *\\n     * Add callback to be executed when the script dies.\\n     */\\n    atExit(f: () => void): void;\\n  \\n    /**\\n     * Parse command line flags.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Allows unix like flag parsing.\\n     * @example\\n     * ```ts\\n     * // example.script\\n     * var data = flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     * ]);\\n     * tprint(data);\\n     *\\n     * // example.ns\\n     * export async function main(ns) {\\n     *   const data = ns.flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     *   ]);\\n     *   ns.tprint(data);\\n     * }\\n     *\\n     * // [home ~/]> run example.script\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false}\\n     * // [home ~/]> run example.script --delay 3000\\n     * // {\\\"_\\\":[],\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi\\n     * // {\\\"_\\\":[],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\",\\\"exclude\\\":[\\\"a\\\",\\\"b\\\"]}\\n     * // [home ~/]> run example.script --help\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":true}\\n     * ```\\n     */\\n    flags(schema: [string, string | number | boolean | string[]][]): any;\\n  }\\n  \\n  /**\\n   * Corporation Office API\\n   * @remarks\\n   * Requires the Office API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface OfficeAPI {\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - name of the employee\\n     * @param job - Name of the job.\\n     * @returns A promise that is fulfilled when the assignment is complete.\\n     */\\n    assignJob(divisionName: string, cityName: string, employeeName: string, job: string): Promise<void>;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns The newly hired employee, if any\\n     */\\n    hireEmployee(divisionName: string, cityName: string): Employee | undefined;\\n    /**\\n     * Upgrade office size.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param size - Amount of positions to open\\n     */\\n    upgradeOfficeSize(divisionName: string, cityName: string, size: number): void;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param costPerEmployee - Amount to spend per employee.\\n     * @returns Amount of happiness increased.\\n     */\\n    throwParty(divisionName: string, cityName: string, costPerEmployee: number): Promise<number>;\\n    /**\\n     * Buy coffee for your employees\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns A promise that is fulfilled when the coffee is served.\\n     */\\n    buyCoffee(divisionName: string, cityName: string): Promise<void>;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     */\\n    hireAdVert(divisionName: string): void;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     * @param researchName - Name of the research\\n     */\\n    research(divisionName: string, researchName: string): void;\\n    /**\\n     * Get data about an office\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns Office data\\n     */\\n    getOffice(divisionName: string, cityName: string): Office;\\n    /**\\n     * Get data about an employee\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - Name of the employee\\n     * @returns Employee data\\n     */\\n    getEmployee(divisionName: string, cityName: string, employeeName: string): Employee;\\n  }\\n  \\n  /**\\n   * Corporation Warehouse API\\n   * @remarks\\n   * Requires the Warehouse API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface WarehouseAPI {\\n    /**\\n     * Set material sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     */\\n    sellMaterial(divisionName: string, cityName: string, materialName: string, amt: string, price: string): void;\\n    /**\\n     * Set product sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     * @param all - Sell in all city\\n     */\\n    sellProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      amt: string,\\n      price: string,\\n      all: boolean,\\n    ): void;\\n    /**\\n     * Discontinue a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     */\\n    discontinueProduct(divisionName: string, productName: string): void;\\n    /**\\n     * Set smart supply\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param enabled - smart supply enabled\\n     */\\n    setSmartSupply(divisionName: string, cityName: string, enabled: boolean): void;\\n    /**\\n     * Set material buy data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to buy\\n     */\\n    buyMaterial(divisionName: string, cityName: string, materialName: string, amt: number): void;\\n    /**\\n     * Get warehouse data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns warehouse data\\n     */\\n    getWarehouse(divisionName: string, cityName: string): Warehouse;\\n    /**\\n     * Get product data\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @returns product data\\n     */\\n    getProduct(divisionName: string, productName: string): Product;\\n    /**\\n     * Get material data\\n     * @param divisionName - Name of the division\\n     * @param materialName - Name of the material\\n     * @returns material data\\n     */\\n    getMaterial(divisionName: string, cityName: string, materialName: string): Material;\\n    /**\\n     * Set market TA 1 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA1(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA2(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 1 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set material export data\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    exportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Cancel material export\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    cancelExportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Purchase warehouse for a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    purchaseWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Upgrade warehouse\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    upgradeWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Create a new product\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param designInvest - Amount to invest for the design of the product.\\n     * @param marketingInvest - Amount to invest for the marketing of the product.\\n     */\\n    makeProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      designInvest: number,\\n      marketingInvest: number,\\n    ): void;\\n  }\\n  \\n  /**\\n   * Corporation API\\n   * @public\\n   */\\n  export interface Corporation extends WarehouseAPI, OfficeAPI {\\n    /**\\n     * Get corporation data\\n     * @returns Corporation data\\n     */\\n    getCorporation(): CorporationInfo;\\n    /**\\n     * Get division data\\n     * @param divisionName - Name of the division\\n     * @returns Division data\\n     */\\n    getDivision(divisionName: string): Division;\\n    /**\\n     * Expand to a new industry\\n     * @param industryType - Name of the industry\\n     * @param divisionName - Name of the division\\n     */\\n    expandIndustry(industryType: string, divisionName: string): void;\\n    /**\\n     * Expand to a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    expandCity(divisionName: string, cityName: string): void;\\n    /**\\n     * Unlock an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    unlockUpgrade(upgradeName: string): void;\\n    /**\\n     * Level an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    levelUpgrade(upgradeName: string): void;\\n    /**\\n     * Issue dividends\\n     * @param percent - Percent of profit to issue as dividends.\\n     */\\n    issueDividends(percent: number): void;\\n  }\\n  \\n  /**\\n   * General info about a corporation\\n   * @public\\n   */\\n  interface CorporationInfo {\\n    /** Name of the corporation */\\n    name: string;\\n    /** Funds available */\\n    funds: number;\\n    /** Revenue per second this cycle */\\n    revenue: number;\\n    /** Expenses per second this cycle */\\n    expenses: number;\\n    /** Indicating if the company is public */\\n    public: boolean;\\n    /** Total number of shares issues by this corporation */\\n    totalShares: number;\\n    /** Amount of share owned */\\n    numShares: number;\\n    /** Cooldown until shares can be sold again */\\n    shareSaleCooldown: number;\\n    /** Amount of shares issued */\\n    issuedShares: number;\\n    /** Price of the shares */\\n    sharePrice: number;\\n    /** State of the corporation. Possible states are START, PURCHASE, PRODUCTION, SALE, EXPORT. */\\n    state: string;\\n  }\\n  \\n  /**\\n   * Employee in an office\\n   * @public\\n   */\\n  interface Employee {\\n    /** Name of the employee */\\n    name: string;\\n    /** Morale */\\n    mor: number;\\n    /** Happiness */\\n    hap: number;\\n    /** Energy */\\n    ene: number;\\n    int: number;\\n    cha: number;\\n    exp: number;\\n    cre: number;\\n    eff: number;\\n    /** Salary */\\n    sal: number;\\n    /** City */\\n    loc: string;\\n    /** Current job */\\n    pos: string;\\n  }\\n  \\n  /**\\n   * Product in a warehouse\\n   * @public\\n   */\\n  interface Product {\\n    /** Name of the product */\\n    name: string;\\n    /** Demand for the product */\\n    dmd: number;\\n    /** Competition for the product */\\n    cmp: number;\\n    /** Production cost */\\n    pCost: number;\\n    /** Sell cost, can be \\\"MP+5\\\" */\\n    sCost: string | number;\\n  }\\n  \\n  /**\\n   * Material in a warehouse\\n   * @public\\n   */\\n  interface Material {\\n    /** Name of the material */\\n    name: string;\\n    /** Amount of material  */\\n    qty: number;\\n    /** Quality of the material */\\n    qlt: number;\\n  }\\n  \\n  /**\\n   * Warehouse for a division in a city\\n   * @public\\n   */\\n  interface Warehouse {\\n    /** Amount of size upgrade bought */\\n    level: number;\\n    /** City in which the warehouse is located */\\n    loc: string;\\n    /** Total space in the warehouse */\\n    size: number;\\n    /** Used space in the warehouse */\\n    sizeUsed: number;\\n  }\\n  \\n  /**\\n   * Office for a division in a city.\\n   * @public\\n   */\\n  interface Office {\\n    /** City of the office */\\n    loc: string;\\n    /** Maximum number of employee */\\n    size: number;\\n    /** Minimum amount of energy of the employees */\\n    minEne: number;\\n    /** Maximum amount of energy of the employees */\\n    maxEne: number;\\n    /** Minimum happiness of the employees */\\n    minHap: number;\\n    /** Maximum happiness of the employees */\\n    maxHap: number;\\n    /** Maximum morale of the employees */\\n    maxMor: number;\\n    /** Name of all the employees */\\n    employees: string[];\\n    /** Positions of the employees */\\n    employeeProd: EmployeeJobs;\\n  }\\n  \\n  /**\\n   * Object representing the number of employee in each job.\\n   * @public\\n   */\\n  interface EmployeeJobs {\\n    Operations: number;\\n    Engineer: number;\\n    Business: number;\\n    Management: number;\\n    \\\"Research & Development\\\": number;\\n    Training: number;\\n    Unassigned: number;\\n  }\\n  \\n  /**\\n   * Corporation division\\n   * @public\\n   */\\n  interface Division {\\n    /** Name of the division */\\n    name: string;\\n    /** Type of division, like Aggriculture */\\n    type: string;\\n    /** Awareness of the division */\\n    awareness: number;\\n    /** Popularity of the division */\\n    popularity: number;\\n    /** Production multiplier */\\n    prodMult: number;\\n    /** Amount of research in that division */\\n    research: number;\\n    /** Revenue last cycle */\\n    lastCycleRevenue: number;\\n    /** Expenses last cycle */\\n    lastCycleExpenses: number;\\n    /** Revenue this cycle */\\n    thisCycleRevenue: number;\\n    /** Expenses this cycle */\\n    thisCycleExpenses: number;\\n    /** All research bought */\\n    upgrades: number[];\\n    /** Cities in which this division has expanded */\\n    cities: string[];\\n  }\\n  \\n  /**\\n   * Interface Theme\\n   * @internal\\n   */\\n  interface UserInterfaceTheme {\\n    [key: string]: string | undefined;\\n    primarylight: string;\\n    primary: string;\\n    primarydark: string;\\n    successlight: string;\\n    success: string;\\n    successdark: string;\\n    errorlight: string;\\n    error: string;\\n    errordark: string;\\n    secondarylight: string;\\n    secondary: string;\\n    secondarydark: string;\\n    warninglight: string;\\n    warning: string;\\n    warningdark: string;\\n    infolight: string;\\n    info: string;\\n    infodark: string;\\n    welllight: string;\\n    well: string;\\n    white: string;\\n    black: string;\\n    hp: string;\\n    money: string;\\n    hack: string;\\n    combat: string;\\n    cha: string;\\n    int: string;\\n    rep: string;\\n    disabled: string;\\n    backgroundprimary: string;\\n    backgroundsecondary: string;\\n    button: string;\\n  }\",\"filename\":\"/types/NetscriptDefinitions.d.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":448,\"_hash\":\"4b76b2f549749e8bb971f716b234063dc0844d2789841eee83b1b326816e1c03\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** This is just an arbitrary identifier to signal that this script has finished redeployment */\\r\\nexport const DeployKey = \\\"6uTdsrmCVG8^Bee*^UB46myYQya&4Qc#\\\";\\r\\n/** There is no way to get how this script is called, therefore it's hardcoded here */\\r\\nexport const ScriptName = \\\"init.js\\\";\\r\\nexport const DeploymenScriptFolder = \\\"/deployment/\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const SelfUpdateFile = \\\"self-update.js\\\";\\r\\nexport const RedeployFile = \\\"redeploy.js\\\";\\r\\nexport const SelfUpdateLocation = `${DeploymenScriptFolder}${SelfUpdateFile}`;\\r\\nexport const RedeployLocation = `${DeploymenScriptFolder}${RedeployFile}`;\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.ps().filter(x => x.filename !== ns.getScriptName()).forEach(x => ns.kill(x.pid));\\r\\n    const pid = ns.exec(SelfUpdateLocation, HomeHost, 1, ...ns.args);\\r\\n    if (pid === 0) {\\r\\n        ns.tprint(`## FAILED to spawn self-updater, start manually with: run ${SelfUpdateLocation} -t 1`);\\r\\n        return;\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`## Spawned self updater, PID: [${pid}]`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsZ0dBQWdHO0FBQ2hHLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxrQ0FBa0MsQ0FBQTtBQUUzRCxzRkFBc0Y7QUFDdEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUM7QUFDcEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLHFCQUFxQixHQUFHLGNBQWMsRUFBRSxDQUFBO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcscUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7QUFFekU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25GLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxJQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsTUFBTSxDQUFDLDZEQUE2RCxrQkFBa0IsT0FBTyxDQUFDLENBQUM7UUFDbEcsT0FBTztLQUNWO1NBQU07UUFDSCxFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZEO0FBRUwsQ0FBQyJ9\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":449,\"_hash\":\"4088c86950e33baa5248ef455a82a522914000a008905faefe69972bb3deec44\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n * @typedef {import('./types/NetscriptDefinitions').Player} Player\\n */\\n\\nimport { numAvailableExploits } from './exploits.js';\\nimport { formatMoney } from './formatting.js';\\n\\n/**\\n * @class\\n * @constructor\\n * @public\\n */\\nexport class Zombie {\\n\\t/**\\n\\t * @param {Server} server\\n\\t * @param {NS} ns\\n\\t * @param {string} parentHostname\\n\\t * @param {number} depth\\n\\t */\\n\\tconstructor(server, ns, parentHostname = undefined, depth = 0) {\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.hostname = server.hostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.growth = Math.min(server.serverGrowth, 100);\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.memory = server.maxRam;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.level = server.requiredHackingSkill;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.ports = server.numOpenPortsRequired;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxMoney = server.moneyMax;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.security = server.minDifficulty;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.money = formatMoney(this.maxMoney);\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.faction = server.organizationName;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.parent = parentHostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.depth = depth;\\n\\t\\t/**\\n\\t\\t * @type {boolean}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.setup = false;\\n\\t\\tthis.updateStats(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Updates cached computed statistics with latest live information\\n\\t * @param {NS} ns\\n\\t */\\n\\tupdateStats(ns) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tthis.server = ns.getServer(this.hostname);\\n\\t\\tthis.hackEffect = calculateMaxMoneyHacked(this.server, player);\\n\\t\\tthis.effect = (this.hackEffect * 100).toFixed(2);\\n\\t\\t\\n\\n\\t\\t/**\\n\\t\\t * maximum number of threads that should be used to target this server for naive loops\\n\\t\\t * @property\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxTargetingThreads = (this.hackThreads * 25); // maximum number of threads that can target the server for naive hack loops\\n\\t\\tthis.hackChance = calculateMaxHackingChance(this.server, player);\\n\\t\\tthis.chance = (this.hackChance * 100).toFixed(0);\\n\\t\\tthis.usedMemory = this.server.ramUsed;\\n\\t\\tthis.availableMemory = this.memory - this.usedMemory;\\n\\t\\tthis.root = this.server.hasAdminRights;\\n\\t\\tthis.contracts = ns.ls(this.hostname, \\\".cct\\\").length;\\n\\t\\tthis.weakenTime = calculateMinWeakenTime(this.server, player);\\n\\t\\tthis.availableMoney = this.server.moneyAvailable;\\n\\t\\tthis.weak = this.weakenTime.toFixed(0);\\n\\t\\tthis.currentSecurity = this.server.hackDifficulty;\\n\\t\\tthis.shouldCrack = this.root ? \\\"done\\\" : (this.level <= ns.getHackingLevel() && this.ports <= numAvailableExploits(ns)) ? \\\"true\\\" : \\\"false\\\";\\n\\t\\tthis.backdoor = this.server.backdoorInstalled;\\n\\t\\tthis.xps = (calculateXp(this.server, player) / this.weakenTime).toFixed(2);\\n\\t\\treturn this;\\n\\t}\\n\\n\\tget hackThreads() {\\n\\t\\tlet threads = Math.max(Math.floor(35.82 / (this.hackEffect * 100)), 1); // 35.82% per hack will give 30% final funds after 4 hacks\\n\\t\\treturn threads === Number.POSITIVE_INFINITY ? 0 : threads;\\n\\t}\\n\\n\\t/**\\n\\t * (maxMoney ^ 1.25) * hackChance * hackEffect * (growth ^ 1.1)\\n\\t */\\n\\tget currentRating() {\\n\\t\\treturn (Math.pow(this.maxMoney, 1.25) * this.hackEffect * Math.pow(Math.min(this.growth, 100), 1.1) / this.weakenTime) / 1e3;\\n\\t}\\n\\n\\tget rating() {\\n\\t\\treturn formatMoney(this.currentRating / 1e3);\\n\\t}\\n\\n\\tget shouldGrow() {\\n\\t\\treturn this.availableMoney < this.maxMoney;\\n\\t}\\n\\n\\tget maxRunningThreads() {\\n\\t\\tlet maxThreads = Math.floor(this.memory / 1.75);\\n\\t\\treturn this.hostname === \\\"home\\\" ? Math.floor(maxThreads * .8) : maxThreads;\\n\\t}\\n\\n\\tisAtMinSecurity() {\\n\\t\\treturn this.currentSecurity === this.security;\\n\\t}\\n\\n\\tisAtMaxMoney() {\\n\\t\\treturn this.maxMoney === this.availableMoney;\\n\\t}\\n\\n\\t/**\\n\\t * @param {string} scriptName\\n\\t */\\n\\tisScriptRunning(ns, scriptName) {\\n\\t\\treturn ns.scriptRunning(scriptName, this.hostname);\\n\\t}\\n\\n\\t/**\\n\\t * @param {Zombie} target\\n\\t * @param {string} scriptName\\n\\t */\\n\\tgetRunningScriptLogs(ns, target, scriptName) {\\n\\t\\tlet script = ns.getRunningScript(scriptName, this.hostname, target.hostname);\\n\\t\\treturn script ? script.logs : [];\\n\\t}\\n\\n\\t/**\\n\\t * @param {string[]} files \\n\\t */\\n\\tasync uploadFiles(ns, files) {\\n\\t\\tawait ns.scp(files, this.hostname);\\n\\t}\\n\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateXp(server, player) {\\n\\tif (server.baseDifficulty == null) {\\n\\t\\tserver.baseDifficulty = server.hackDifficulty;\\n\\t}\\n\\treturn 3 + (server.baseDifficulty * player.hacking_exp_mult * .03);\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateMinWeakenTime(server, player) {\\n\\tconst difficultyMult = server.requiredHackingSkill * server.minDifficulty;\\n\\n\\tconst baseSkill = 50;\\n\\tlet skillFactor = 2.5 * difficultyMult + 500;\\n\\n\\tskillFactor /= player.hacking + baseSkill;\\n\\n\\tconst weakenTimeMultiplier = 20;\\n\\treturn (weakenTimeMultiplier * skillFactor) /\\n\\t\\t(player.hacking_speed_mult * calculateIntelligenceBonus(player.intelligence, 1));\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxHackingChance(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = 1.75 * player.hacking;\\n\\tconst skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n\\tconst chance = skillChance * difficultyMult * player.hacking_chance_mult * calculateIntelligenceBonus(player.intelligence, 1);\\n\\treturn Math.min(Math.max(chance, 0), 1);\\n}\\n\\nfunction calculateIntelligenceBonus(intelligence, weight = 1) {\\n\\treturn 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxMoneyHacked(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n\\tconst percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / 240;\\n\\treturn Math.min(Math.max(percentMoneyHacked, 0), 1);\\n}\\n\\n/**\\n * Compares two Zombie objects\\n * @param {Zombie} a\\n * @param {Zombie} b\\n * @param {string} field\\n */\\nexport function compareZombie(a, b, field, asc = false) {\\n\\t// Swap order if we're sorting in ascending order\\n\\tif (asc) {\\n\\t\\t[a, b] = [b, a];\\n\\t}\\n\\t// for formatted fields, use the base field to sort off\\n\\tswitch (field) {\\n\\t\\tcase \\\"rating\\\":\\n\\t\\t\\tfield = \\\"currentRating\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"effect\\\":\\n\\t\\t\\tfield = \\\"hackEffect\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"weak\\\":\\n\\t\\t\\tfield = \\\"weakenTime\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"chance\\\":\\n\\t\\t\\tfield = \\\"hackChance\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"threads\\\":\\n\\t\\t\\tfield = \\\"maxTargetingThreads\\\";\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t}\\n\\tswitch (field) {\\n\\t\\tcase \\\"hostname\\\":\\n\\t\\tcase \\\"parent\\\":\\n\\t\\tcase \\\"faction\\\":\\n\\t\\tcase \\\"canRoot\\\":\\n\\t\\t\\treturn a.hostname.localeCompare(b.hostname);\\n\\t\\tcase \\\"nuke\\\":\\n\\t\\tcase \\\"root\\\":\\n\\t\\t\\treturn a[field] === b[field] ? 0 : a[field] ? -1 : 1;\\n\\t\\tdefault:\\n\\t\\t\\treturn b[field] - a[field];\\n\\t}\\n}\",\"filename\":\"zombie.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":238245,\"_hash\":\"56b5e25fefd4c7a9f25717206f44cd440e9a26305e996893c0193707d039a840\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nimport { exploits, isExploitAvailable, runExploit } from './exploits.js';\\n\\n/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\n/**\\n * Performs a search from \\\"home\\\" server walking the tree up to the given depth, or all servers\\n * if no depth is given\\n * @param {{ns: NS, \\n * depth: number, \\n * type: string, \\n * host: string\\n * }} options\\n * @return {{depth: number, server: Server, parent: string}[]} list of all servers up to the given depth\\n */\\nexport function findServers(options) {\\n\\n\\tlet q = [ { server: options.ns.getServer(\\\"home\\\"), depth: 0 }];\\n\\tlet found = [];\\n\\twhile(q.length > 0) {\\n\\t\\tconst nextItem = q.shift();\\n\\t\\tif (nextItem.depth >= options.depth && options.depth > 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet children = getNonParentNeighbors(options.ns, nextItem.parent, nextItem.server.hostname, nextItem.depth + 1);\\n\\t\\tfor (const child of children) {\\n\\t\\t\\tif (found.indexOf(child.server.hostname) === -1) {\\n\\t\\t\\t\\tif (options.type === \\\"bfs\\\") {\\n\\t\\t\\t\\t\\tq.push(child);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tq.unshift(child);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfound.push(child);\\n\\t\\t\\t\\t// If we've specified to find a specific server exit when we've found it \\n\\t\\t\\t\\tif (options.host === child.server.hostname) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn found;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent The parent node\\n * @param {string} server The server to scan\\n * @param {number} depth How deep in the tree the server is\\n * @return {{depth: number, server: Server, parent: string}[]} - Array of all non-parent neighbor nodes\\n */\\n function getNonParentNeighbors(ns, parent, server, depth) {\\n\\treturn ns.scan(server)\\n\\t\\t.filter(child => child !== parent)\\n\\t\\t.map(child => {return { server: ns.getServer(child), parent: server, depth: depth}});\\n}\\n\\n/**\\n * Note: requires access to Singularity (Source File 4 - level 1)\\n * @param {string} server \\n */\\nexport async function installBackdoor(ns, server) {\\n\\tlet files = ns.getOwnedSourceFiles().filter(file => file.n === 4);\\n\\tif (!files || files[0].lvl < 1) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\t// if the server can't be rooted don't do anything\\n\\tif (!server.root) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\tlet chain = getConnectionChain(server);\\n\\t// If a connection can't be established don't try anything\\n\\tif (!chain) return false;\\n\\n\\tfor (hostname of chain) {\\n\\t\\tif (!ns.connect(hostname)) {\\n\\t\\t\\treturn Promise.resolve(false);\\n\\t\\t}\\n\\t}\\n\\tawait ns.installBackdoor();\\n\\tns.connect(\\\"home\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server \\n * @return {string[]} array of server hostnames\\n */\\nexport function getConnectionChain(ns, server) {\\n\\tlet allServers = {};\\n\\tfindServers({ns: ns, depth: -1, host: server, type: \\\"dfs\\\"})\\n\\t\\t.forEach(obj => allServers[obj.server.hostname] = obj);\\n\\t\\n\\t// ns.tprintf(\\\"%j\\\", allServers);\\n\\t// .reduce((obj, cur) => Object.defineProperty(obj, cur.server.hostname, { value: cur, writeable: true, enumerable: true } ), {});\\n\\n\\t// if the key doesn't exist the hostname isn't valid so we can't walk the connection chain backwards\\n\\tif (!allServers[server]) return;\\n\\n\\tlet chain = [ allServers[server] ];\\n\\tlet found = false;\\n\\twhile (!found) {\\n\\t\\tconst next = allServers[chain[0].parent];\\n\\t\\tif (typeof(next) === 'undefined') {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (next.parent === \\\"home\\\") {\\n\\t\\t\\tfound = true;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tchain.unshift(next);\\n\\t}\\n\\treturn found ? chain.map(current => current.server.hostname) : [];\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":72.8,\"server\":\"home\",\"moduleSequenceNumber\":451,\"_hash\":\"06434bec7cd74e0b30f8bdbb7d2c2d6d24e0996f0e903bb75d6eccd2f0edba7b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {number} money Amount to format\\n * @return {string} formatted amount\\n */\\n export function formatMoney(money, digits = true) {\\n\\tconst signs = [\\n\\t\\t{ val: 1, sign: \\\"\\\", digs: 0 },\\n\\t\\t{ val: 1e3, sign: \\\"K\\\", digs: 1 },\\n\\t\\t{ val: 1e6, sign: \\\"M\\\", digs: 1 },\\n\\t\\t{ val: 1e9, sign: \\\"B\\\", digs: 1 },\\n\\t\\t{ val: 1e12, sign: \\\"T\\\", digs: 1 },\\n\\t\\t{ val: 1e15, sign: \\\"Q\\\", digs: 1 }\\n\\t]\\n\\tfor (const sign of signs.reverse()) {\\n\\t\\tif(money >= sign.val) {\\n\\t\\t\\treturn (money / sign.val).toFixed(sign.digs) + sign.sign;\\n\\t\\t}\\n\\t}\\n\\treturn money === 0 ? money.toFixed(0) : money.toFixed(2);\\n}\",\"filename\":\"formatting.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":452,\"_hash\":\"ea932da14af34add7de199a3633a53c1e0e0f8371e0e43014ad4268af571bc59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { Logger } from './log.js';\\nimport { findServers } from './util.js';\\nimport { compareZombie, Zombie } from './zombie.js';\\n\\nlet _serverLogger;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t_serverLogger = new Logger(ns, false);\\n\\tlet HEADER_LENGTHS = {\\n\\t\\thostname: 18, depth: 3, contracts: 2, level: 4, shouldCrack: 5, root: 5, backdoor: 5, ports: 2, \\n\\t\\tmoney: 7, growth: 3, effect: 5, weak: 5, chance: 4, rating: 6, xps: 5, security: 4, parent: 18, faction: 0, maxTargetingThreads: 5\\n\\t};\\n\\n\\tlet SERVER_HEADER = {\\n\\t\\thostname: \\\"Server Name\\\", depth: \\\"Dep\\\", contracts: \\\"Cx\\\", level: \\\"LvL\\\", shouldCrack: \\\"Nuke\\\", root: \\\"Root\\\", backdoor: \\\"Back\\\", ports: \\\"P\\\", weak: \\\"Weak\\\",\\n\\t\\tmoney: \\\"Money\\\", growth: \\\"Gro\\\", effect: \\\"Eff\\\", chance: \\\"Chnc\\\", rating: \\\"Rate\\\", xps: \\\"XPS\\\", security: \\\"Sec\\\", parent: \\\"Parent\\\", faction: \\\"Faction\\\", maxTargetingThreads: \\\"Thrd\\\"\\n\\t};\\n\\n\\tlet [depth, sort] = ns.args;\\n\\tif (!depth || isNaN(depth)) {\\n\\t\\tdepth = -1;\\n\\t}\\n\\tif (!sort) {\\n\\t\\tsort = \\\"rating\\\";\\n\\t}\\n\\tlet asc = false;\\n\\tif (sort.endsWith(\\\"-\\\")) {\\n\\t\\tasc = true;\\n\\t\\tsort = sort.substring(0, sort.indexOf(\\\"-\\\"));\\n\\t}\\n\\n\\t_serverLogger.info(\\\"Starting scan with depth %i\\\", depth);\\n\\n\\tSERVER_HEADER[sort] = (asc ? \\\"-\\\" : \\\"+\\\") + SERVER_HEADER[sort] + (asc ? \\\"-\\\" : \\\"+\\\");\\n\\tHEADER_LENGTHS[sort] += 2;\\n\\tconst INFO_FORMAT = \\\"%(hostname)-\\\" + HEADER_LENGTHS.hostname \\n\\t+ \\\"s | %(depth)\\\" + HEADER_LENGTHS.depth\\n\\t+ \\\"s | %(contracts)\\\" + HEADER_LENGTHS.contracts \\n\\t+ \\\"s | %(level)\\\" + HEADER_LENGTHS.level \\n\\t+ \\\"s | %(shouldCrack)\\\" + HEADER_LENGTHS.shouldCrack\\n\\t+ \\\"s | %(root)\\\" + HEADER_LENGTHS.root\\n\\t+ \\\"s | %(backdoor)\\\" + HEADER_LENGTHS.backdoor\\n\\t+ \\\"s | %(ports)\\\" + HEADER_LENGTHS.ports\\n\\t+ \\\"s | %(money)\\\" + HEADER_LENGTHS.money\\n\\t+ \\\"s | %(growth)\\\" + HEADER_LENGTHS.growth\\n\\t+ \\\"s | %(effect)\\\" + HEADER_LENGTHS.effect\\n\\t+ \\\"s | %(maxTargetingThreads)\\\" + HEADER_LENGTHS.maxTargetingThreads\\n\\t+ \\\"s | %(weak)\\\" + HEADER_LENGTHS.weak\\n\\t+ \\\"s | %(chance)\\\" + HEADER_LENGTHS.chance\\n\\t+ \\\"s | %(rating)\\\" + HEADER_LENGTHS.rating\\n\\t+ \\\"s | %(xps)\\\" + HEADER_LENGTHS.xps\\n\\t+ \\\"s | %(security)\\\" + HEADER_LENGTHS.security\\n\\t+ \\\"s | %(parent)\\\" + HEADER_LENGTHS.parent\\n\\t+ \\\"s\\\" // | %(faction)s\\\";\\n\\n\\tconst servers = findServers({ns: ns, depth: depth, type: \\\"bfs\\\"})\\n\\t\\t.filter(current => !current.server.hostname.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(current => new Zombie(current.server, ns, current.parent, current.depth))\\n\\t\\t.sort((a, b) => compareZombie(a, b, sort, asc));\\n\\t_serverLogger.success(\\\"Found %i Servers: \\\", servers.length);\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\n\\n\\tfor (const zombie of servers) {\\n\\t\\tawait downloadTextFiles(ns, zombie.hostname)\\n\\t\\t\\t.then(() => _serverLogger.info(INFO_FORMAT, zombie));\\n\\t}\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\t\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n */\\nexport async function downloadTextFiles(ns, server) {\\n\\tconst files = ns.ls(server)\\n\\t\\t.filter(fileName => !fileName.endsWith(\\\".js\\\") && fileName !== \\\"A-Green-Tomorrow.lit\\\" && !ns.fileExists(fileName, \\\"home\\\"))\\n\\t\\t.filter(fileName => fileName.endsWith(\\\".txt\\\") || fileName.endsWith(\\\".lit\\\"));\\n\\tif (files.length == 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\t_serverLogger.warn(\\\"Found files to download: \\\" + files);\\n\\tawait ns.scp(files, server, \\\"home\\\");\\n}\",\"filename\":\"serverinfo.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"formatting.js\",\"url\":\"blob:file:///d79afc69-a0d7-40cb-992e-3f8eda64466c\",\"moduleSequenceNumber\":452},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///128ee776-5e2b-4a49-978a-37e40efa1cfa\",\"moduleSequenceNumber\":455},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///5fe4a239-0380-40c2-8ca8-b4d5bdffd19f\",\"moduleSequenceNumber\":238245},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///0605ed7b-7704-425f-b9d6-1e8edd682cb2\",\"moduleSequenceNumber\":455},{\"filename\":\"util.js\",\"url\":\"blob:file:///035301cc-a4c3-4b31-a35a-a5fe5a073797\",\"moduleSequenceNumber\":451},{\"filename\":\"log.js\",\"url\":\"blob:file:///003ce334-71e8-4670-8216-7985f4ad946f\",\"moduleSequenceNumber\":442},{\"filename\":\"serverinfo.js\",\"url\":\"blob:file:///03983747-145c-4ea8-9865-4c4ae1373caf\",\"moduleSequenceNumber\":238689}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":238689,\"_hash\":\"e6c1e7d79eac25f4a8a2841ede30e7cec0af69fe775f914c5365e8c5addcfd02\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n/**\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"augmentinfo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":454,\"_hash\":\"37bc85d3d380af949270c66774c3ac05871b964a503bde7bd341b7bc7621aa3c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nexport const exploits = [\\\"brutessh.exe\\\", \\\"ftpcrack.exe\\\", \\\"relaysmtp.exe\\\", \\\"httpworm.exe\\\", \\\"sqlinject.exe\\\"];\\n\\n/**\\n * Counts the number of exploits that are currently unlocked\\n * @param {NS} ns \\n */\\nexport function numAvailableExploits(ns) {\\n    let total = 0;\\n    for (const exploit of exploits) {\\n        if (isExploitAvailable(ns, exploit)) {\\n            total++;\\n        }\\n    }\\n\\treturn total;\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploit \\n * @returns \\n */\\n export function isExploitAvailable(ns, exploit) {\\n\\treturn ns.fileExists(exploit);\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploitName\\n * @param {string} hostname\\n */\\nexport function runExploit(ns, exploitName, hostname) {\\n    switch(exploitName.toLocaleLowerCase()) {\\n        case \\\"ftpcrack\\\":\\n            return ns.ftpcrack(hostname);\\n        case \\\"relaysmtp\\\": \\n            return ns.relaysmtp(hostname);\\n        case \\\"httpworm\\\":\\n            return ns.httpworm(hostname);\\n        case \\\"sqlinject\\\":\\n            return ns.sqlinject(hostname);\\n        case \\\"brutessh\\\":\\n            return ns.brutessh(hostname);\\n        default:\\n\\n    }\\n}\",\"filename\":\"exploits.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":455,\"_hash\":\"0de65fbf6ee34ce155221e4b6778ef0c38fafb121b10557d115188c3a40ad3a7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [threads] = ns.args;\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tns.exec(\\\"weaken.js\\\", threads, target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tns.exec(\\\"grow.js\\\", threads, target);\\n\\t\\t} else {\\n\\t\\t\\tns.exec(\\\"hack.js\\\", threads, target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-harakiri.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":456,\"_hash\":\"45231ae9c32afc4913e36049a208ae60f0e90391fce4e6935b0e2d932bbabd68\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n import * as log from \\\"./log.js\\\";\\n\\n/** \\t\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\t// initialize our logging system\\n\\tlog.initialize(ns);\\n    ns.disableLog(\\\"sleep\\\");\\n\\n\\t// run the main script\\n\\twhile(true) {\\n        let script = ns.getRunningScript(\\\"control.js\\\");\\n        if (!script) {\\n            log.warn(\\\"Restarting control.js\\\");\\n            ns.run(\\\"control.js\\\");\\n        } else {\\n            ns.print(\\\"control.js still running\\\");\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///cbdf7469-bc7c-42a6-96c8-90cbd0e2382e\"},{\"filename\":\"watcher.js\",\"url\":\"blob:file:///29301dcb-0c8e-4961-9b80-2b15ddb1e36e\"}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":457,\"_hash\":\"6e0513b3d6caeaf16dfe91b8efb5e837b729ba36148d833a1fb008a83df5fe94\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers } from \\\"infodump.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = findServers(ns, -1).filter(server => shouldStartHack(server, ns));\\n\\n\\twhile (servers.length > 0) {\\n\\t\\tawait startHack(ns, servers.shift());\\n\\t}\\n}\\n\\n/**\\n * @param {string} server\\n * @param {NS} ns\\n * @return if this server should be exploited\\n */\\nfunction shouldStartHack(server, ns) {\\n\\treturn ns.hasRootAccess(server);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n * @returns pid\\n **/\\nasync function startHack(ns, server) {\\n\\tawait ns.scp(\\\"simple-hack.js\\\", server);\\n\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(server)) / 2.2);\\n\\tif (numThreads <= 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\tns.tprint(server + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(server);\\n\\tns.exec('simple-hack.js', server, numThreads);\\n\\treturn Promise.resolve();\\n}\",\"filename\":\"/old/start-hacks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":458,\"_hash\":\"d77c59122aeb0c9fb4084b9ba23d66ed241a542bd3bf5c061481854ba010b645\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"max-hardware\\\";\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 200_000_000;\\n\\twhile (true) {\\n\\t\\t// Ratios: 7 weaken, 36 hack, 57 grow\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\t// reduces security by threads * 0.05\\n\\t\\t\\t// takes 60 seconds to run\\n\\t\\t\\t// .000_83/sec\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\t// Raises security by threads * .004\\n\\t\\t\\t// takes 45 seconds to run\\n\\t\\t\\t// .000_088/sec (19 grows per 2 weaken)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\t// raises security by threads * .002\\n\\t\\t\\t// takes 15 seconds to run\\n\\t\\t\\t// .000_13/sec (12 hacks per 2 weaken)\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/simple-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":459,\"_hash\":\"6b0a2d084cf161df1c49615cbb2e11586591e7f7a3a43ae87b000d842359b45a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.print(\\\"No target host given\\\");\\n\\t\\texit;\\n\\t}\\n\\tconst target = ns.args[0];\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst minMoney = ns.getServerMaxMoney(target) * .75;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":460,\"_hash\":\"09f67151de054766890602ddad2ca7124dc66bd2f49d4c525454f2764c58bc32\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.tprintf(\\\"ERROR| %s\\\", \\\"Missing arguments, check for runHost\\\");\\n\\t\\texit;\\n\\t}\\n\\tlet eTarget = ns.args[0];\\n\\tawait ns.scp(\\\"simple-hack.js\\\", eTarget);\\n\\t// const memNeeded = Math.max(ns.getScriptRam(\\\"weaken.js\\\"), ns.getScriptRam(\\\"hack.js\\\"), ns.getScriptRam(\\\"grow.js\\\"));\\n\\t// const controlMem = ns.getScriptRam(\\\"hack-harakiri.js\\\");\\n\\t// const minMemNeeded = controlMem + memNeeded;\\n\\t// if (ns.getServerMaxRam(eTarget) < minMemNeeded) {\\n\\t// \\tns.tprint(\\\"Server does not have enough memory to run hack control locally\\\");\\n\\t// \\texit;\\n\\t// }\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(eTarget)) / 2.2);\\n\\tns.tprint(eTarget + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(eTarget);\\n\\tns.exec('simple-hack.js', eTarget, numThreads);\\n}\",\"filename\":\"/old/remote-exec.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":461,\"_hash\":\"7d4f447ed51a5dd10455e91ae653c6a090fad6e8c962a989feb3af473697478c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers, getRootForServer } from \\\"../util.js\\\";\\nimport * as log from \\\"../log\\\";\\nimport { Zombie } from \\\"../zombie\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlog.initialize(ns);\\n\\tlet servers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\t// TODO: connect to each server in the tree and backdoor it\\n\\t// servers.filter(server => ns.hasRootAccess(server))\\n\\t// \\t.forEach(server => checkBackDoor(server, ns));\\n\\tlet exploitable = servers.filter(server => server.shouldCrack === \\\"true\\\");\\n\\n\\tlog.info(\\\"Found exploitable servers: %j\\\", exploitable.map(zombie => zombie.hostname));\\n\\tif (ns.args[0] === \\\"-d\\\") {\\n\\t\\texploitable.forEach(server => getRootForServer(server));\\n\\t} else {\\n\\t\\tlog.warn(\\\"To spread to new servers run with -d options.\\\");\\n\\t}\\n}\",\"filename\":\"/old/spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":462,\"_hash\":\"a42ea0dd68be3b73ffc5d89d8e04cb14c2e442a8f81e24465404fcc50f138009\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"hacknodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":463,\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { formatMoney } from './formatting';\\nimport { Logger } from './log';\\n/** \\n * Main script for handling upgrades.\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\tconst log = new Logger(ns, false);\\n\\t// initialize our logging system\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getPurchasedServers\\\");\\n\\tns.disableLog(\\\"getPurchasedServerCost\\\");\\n\\n\\t// TODO: adjust\\n\\tconst maxPurchasedServers = 12;\\n\\tconst wantedRam = 4096;\\n\\tconst cost = ns.getPurchasedServerCost(wantedRam);\\n\\t// run the main script\\n\\t\\tns.tprint(\\\"Cost: \\\" + formatMoney(cost));\\n\\t\\tlet nextServerNum = ns.getPurchasedServers().length;\\n\\t\\twhile(nextServerNum < maxPurchasedServers && cost < ns.getPlayer().money) {\\n\\t\\t\\tif (ns.purchaseServer(\\\"zombie-\\\" + nextServerNum, wantedRam)) {\\n\\t\\t\\t\\tns.print(\\\"Purchased new server: zombie-\\\" + nextServerNum + \\\" | \\\" + wantedRam);\\n\\t\\t\\t\\tlog.success(\\\"Purchased new server: zombie-%(num)s - %(ram)sG\\\", { num: nextServerNum, ram: wantedRam});\\n\\t\\t\\t\\tnextServerNum++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if we fail to buy a server break out.\\n\\t\\t\\t\\tns.print(\\\"Failed to purchase the server, something went wrong.\\\");\\n\\t\\t\\t\\tlog.error(\\\"Failed to purchase a server, something went wrong: %(money)s / %(price)\\\", { money: ns.getPlayer().money, price: cost })\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// TODO: find best way to analyze and purchase hacknet nodes.\\n\\t\\t\\n\\t\\t//TODO: make this purchase TOR + programs (requires Source file 4)?\\n\\n\\t\\t// await ns.sleep(30000);\\n\\t\\n}\",\"filename\":\"upgrades.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///9381a962-dfa6-4cbe-80ec-4ebeee1662a7\",\"moduleSequenceNumber\":392},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///90d56b38-3d3b-4464-bb2c-e5354cc06346\",\"moduleSequenceNumber\":402},{\"filename\":\"upgrades.js\",\"url\":\"blob:file:///209086d9-11bb-48ba-9b0b-d0856c3f8d1d\",\"moduleSequenceNumber\":17746}],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":238247,\"_hash\":\"d549d7a94d67a7109676aa8518d0e1ec548122d1fb49010377bdf9e2d8b432f5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { findServers, getRootForServer } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport * as logger from \\\"./log.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\t// initialize our logging system\\n\\tlogger.initialize(ns);\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n * @param {Zombie[]} servers\\n * @param {Zombie} target\\n * @param {boolean} setup\\n */\\nasync function control(ns) {\\n\\tconst home = new Zombie(ns.getServer(\\\"home\\\"), ns);\\n\\tlet servers = await findNewServers(ns);\\n\\tlet runners = servers.filter(zombie => zombie.memory > 0);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const zombie of runners) {\\n\\t\\tif (zombie.hostname !== \\\"home\\\") {\\n\\t\\t\\tdestroy(zombie);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\tlet maxThreads = countTotalAvailableThreads(runners);\\n\\tlet targets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\tlogger.info(\\\"%(stage)s | Starting up against %(target)s using %(threads)d total threads.\\\", \\n\\t\\t{ stage: targets[0].setup ? \\\"SETUP\\\" : \\\"HACK\\\", target: targets[0].zombie.hostname, threads: maxThreads });\\n\\twhile (true) {\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tif (target.setup && target.zombie.isAtMinSecurity() && target.zombie.isAtMaxMoney()) {\\n\\t\\t\\t\\tlogger.success(\\\"Finished hack setup: %s\\\", targets[0].zombie.hostname);\\n\\t\\t\\t\\tns.print(\\\"Finished hack setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// TODO: adjust ratio reselection to allow for more than 2 servers.\\n\\t\\tif (targets.length === 1 && !targets[0].setup && targets[0].zombie.availableMoney < targets[0].zombie.maxMoney * .20) {\\n\\t\\t\\ttargets[0].setup = true;\\n\\t\\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t// if (servers[1] && targets[0].threadRatio > .5) {\\n\\t\\t\\t// \\ttargets[0].threadRatio -= .1;\\n\\t\\t\\t// \\ttargets[0].threads = maxThreads * targets[0].threadRatio;\\n\\t\\t\\t// \\tif (!targets[1]) {\\n\\t\\t\\t// \\t\\ttargets[1] = { zombie: servers[1], setup: true, threadRatio: 0 };\\n\\t\\t\\t// \\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup, and adding new target: \\\" + targets[1].zombie.hostname);\\n\\t\\t\\t// \\t}\\n\\t\\t\\t// \\ttargets[1].threadRatio += .1;\\n\\t\\t\\t// \\ttargets[1].threads = maxThreads - targets[0].threads;\\n\\t\\t\\t// \\tns.print(\\\"Updated hack ratio: \\\" + targets[0].threadRatio + \\\"|\\\" + targets[1].threadRatio);\\n\\t\\t\\t// }\\n\\t\\t}\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\thome.updateStats();\\n\\t\\t\\tcounter = 0;\\n\\t\\t\\tservers = await findNewServers(ns);\\n\\t\\t\\trunners = servers.filter(zombie => zombie.memory > 0);\\n\\t\\t\\tif (runners.length === 0 || !targets[0].zombie) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\n\\t\\t\\trunners.push(home);\\n\\t\\t\\tmaxThreads = countTotalAvailableThreads(runners);\\n\\t\\t\\tlet usedThreads = 0;\\n\\t\\t\\t// TODO: this might be buggy? needs testing\\n\\t\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\tif (servers[index].hostname !== target.zombie.hostname) {\\n\\t\\t\\t\\t\\tif (index === 0) {\\n\\t\\t\\t\\t\\t\\t// if main target resets, just start from scratch\\n\\t\\t\\t\\t\\t\\ttargets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting main target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting main hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ttarget.zombie = servers[index];\\n\\t\\t\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting secondary target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting secondary hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// adjust thread usage based on new maximum threadcount\\n\\t\\t\\t\\tif (usedThreads === 0) {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads * target.threadRatio;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads - usedThreads;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t\\n\\t\\tawait doHacks(runners, targets);\\n\\t\\t\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {Zombie[]} servers \\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n */\\nasync function doHacks(servers, targets) {\\n\\t// TODO: script counts don't seem to be tracked property and arren't being updated on the objects properly.\\n\\t// TODO: this seems to be a result of how bitBurner caches objects/classes as Zombie objects seem to not be getting updated properly with\\n\\t// new data in some circumstances, Updating the zombie.class also doesn't cause a refresh properly.\\n\\tlet [growRunners, hackRunners, weakenRunners] = getRunningScriptCounts(servers, targets);\\n\\tfor (const [index, target] of targets.entries()) {\\n\\t\\tconst growRate = target.setup ? target.zombie.shouldGrow ? .9 : 0 : .84;\\n\\t\\tconst hackRate = target.setup ? 0 : .04;\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((target.threads * growRate) - growRunners[index]), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.floor((target.threads * hackRate) - hackRunners[index]), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(target.threads - target.wantedGrowThreads - target.wantedHackThreads - weakenRunners[index] - hackRunners[index] - growRunners[index], 0);\\n\\t\\tlogger.debug(\\\"Start: %j\\\", {threads: [target.wantedGrowThreads, target.wantedHackThreads, target.wantedWeakenThreads], running: [growRunners, hackRunners, weakenRunners]});\\n\\t}\\n\\n\\t// ns.print(\\\"Running | Grow: \\\" + runningGrow + \\\" | Hack: \\\" + runningHack + \\\" | Weaken: \\\" + runningWeaken);\\n\\t\\n\\tfor (const zombie of servers) {\\n\\t\\tlet availableRunners = zombie.maxHackThreads - zombie.growRunners - zombie.hackRunners - zombie.weakenRunners;\\n\\t\\tif (availableRunners <= 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\tconst weakenScript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\t// logger.info(\\\"Script: %j\\\", weakenScript);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tzombie.ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"weaken.js\\\", zombie.hostname, toWeaken, target.zombie.hostname);\\n\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tzombie.ns.print(\\\"Failed to startup weaken on: \\\" + zombie.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ zombie.weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\tlet serverData = zombie.ns.getServer(zombie.hostname);\\n\\t\\t\\t\\t\\tlogger.warn(\\\"%j\\\", { weakRunners: zombie.weakenRunners,\\n\\t\\t\\t\\t\\t\\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t\\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t\\thostname: zombie.hostname, server: zombie.server, updated: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"weaken.js\\\")[0] + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tlogger.debug(\\\"Calcs: new Grow: %s\\\", toGrow);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"grow.js\\\", zombie.hostname, toGrow, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"grow.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.zombie.maxMoney));\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tawait zombie.ns.sleep(100)\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"hack.js\\\", zombie.hostname, toHack, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"hack.js\\\")[0] + \\\" <- Money \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// logger.info(\\\"End:   %j\\\", {threads: [wantedGrowThreads, wantedHackThreads, wantedWeakenThreads]});\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\n\\tfor (const zombie of allServers) {\\n\\t\\tif (zombie.shouldCrack === \\\"true\\\") {\\n\\t\\t\\tgetRootForServer(zombie);\\n\\t\\t}\\n\\t\\tawait zombie.uploadFiles([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\tzombie.updateStats();\\n\\t}\\n\\tlet rooted = allServers.filter(zombie => zombie.root).sort((a, b) => b.currentRating - a.currentRating);\\n\\treturn Promise.resolve(rooted);\\n}\\n\\n/**\\n * @param {Zombie} server\\n */\\n function destroy(server) {\\n\\treturn server.ns.killall(server.hostname);\\n}\\n\\n/**\\n * @param {Zombie[]} servers\\n */\\nfunction countTotalAvailableThreads(servers) {\\n\\treturn servers\\n\\t\\t.map(zombie => zombie.maxHackThreads)\\n\\t\\t.reduce((total, num) => total + num);\\n}\\n\\n\\n/**\\n * @param {Zombie[]} servers\\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n * @return {number[][]} runningGrow, runningHack, runningWeaken\\n */\\nfunction getRunningScriptCounts(servers, targets) {\\n\\n\\tlet counts = [[], [], []];\\n\\tfor (let target of targets) {\\n\\t\\ttarget.zombie.updateStats();\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t\\tcounts[0].push(0);\\n\\t\\tcounts[1].push(0);\\n\\t\\tcounts[2].push(0);\\n\\t}\\n\\tfor (let zombie of servers) {\\n\\t\\tzombie.updateStats();\\n\\t\\tzombie.growRunners = 0;\\n\\t\\tzombie.hackRunners = 0;\\n\\t\\tzombie.weakenRunners = 0;\\n\\t\\t\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\tlet script = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\t\\t\\t\\tcounts[0][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\t\\t\\t\\tcounts[1][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t\\tcounts[2][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn counts;\\n}\",\"filename\":\"/old/oldcontrol.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.25,\"server\":\"home\",\"moduleSequenceNumber\":465,\"_hash\":\"760e99d456cf8c1f59b08d03ff87b804652819e54c062390e75db947d043d35f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\nimport { getConnectionChain } from './util';\\nimport { Logger } from './log';\\n\\n/**\\n * @param {NS} ns \\n * @param {string} hostname \\n */\\n export async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const file = ns.getOwnedSourceFiles()\\n        .find(file => file.n === 4);\\n    if (!file || file.lvl < 1) {\\n        log.error(\\\"Need access to Source File 4 before using this.\\\");\\n        ns.exit();\\n    }\\n    \\n    let [hostname] = ns.args;\\n    if (!hostname) {\\n        log.error(\\\"hostname must be defined\\\");\\n        ns.exit();\\n    }\\n    const connectChain = getConnectionChain(ns, hostname);\\n    if (!connectChain || connectChain.length === 0) {\\n        log.error(\\\"%s not found, unable to connect\\\", hostname);\\n        ns.exit();\\n    }\\n    for (const connector of connectChain) {\\n        if (!ns.connect(connector)) {\\n            ns.connect(\\\"home\\\");\\n            log.error(\\\"Failed to connect to %s during connection chaining\\\", connector);\\n            ns.exit();\\n        }\\n    }\\n}\",\"filename\":\"ssh.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///c7dfeffd-5c8a-4836-b3e1-1c876ecd348e\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///b3bfdb65-8f35-4c68-999e-fcbfdbf9efa8\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///9bf8bf6b-bb18-40ef-bfb0-ef0b4731fc75\"},{\"filename\":\"ssh.js\",\"url\":\"blob:file:///eefefc1b-ea49-4628-8c52-780d16bc9853\"}],\"dependents\":[],\"ramUsage\":40.8,\"server\":\"home\",\"moduleSequenceNumber\":466,\"_hash\":\"913fd5fef0433d3e5113fd986bbad741779c55984001fc6790bcc7fe841c9b72\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":467,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n*/\\n\\nimport { Logger } from \\\"./log.js\\\";\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from \\\"./zombie.js\\\";\\n \\n /**  \\t\\n  * This is for testing copied formulas and making sure statistics line up properly, requires Formulas.exe \\n  * once \\n  * @param {NS} ns\\n  **/\\nexport async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const header = \\\" %(sec)s | %(exp)s \\\";\\n    log.info(\\\"ExpGained = 3 + (security * 4.53 * .3)\\\");\\n    \\n    log.info(\\\"\\\");\\n    let servers = findServers({ns: ns, depth: 5})\\n        .map(server => new Zombie(server.server, ns, server.depth));\\n    const format = \\\"%(hostname)15s | %(maxUsefulThreads)3s | %(hackThreads)3s | %(effect)5s | %(hackCalcEffect)5s | %(diff)4s | %(xp)6s | %(myxp)6s | %(xps)6s | %(security)3s | %(currentSecurity)4s | %(level)4s \\\";\\n    log.info(format, { hostname: \\\"Name\\\", maxUsefulThreads: \\\"Use\\\", hackThreads: \\\"Thr\\\", effect: \\\"Eff\\\", hackCalcEffect: \\\"CHack\\\", weakenTime: \\\"Weak\\\", diff: \\\"Diff\\\", xp: \\\"XP\\\", myxp: \\\"MyXP\\\", \\n        xps: \\\"XPPS\\\", security: \\\"Sec\\\", currentSecurity: \\\"CSec\\\",  level: \\\"Lvl\\\"})\\n    for (const server of servers) {\\n        // server.actualWeaken = ns.formulas.hacking.weakenTime(server.server, ns.getPlayer());\\n        server.xp = ns.formulas.hacking.hackExp(server.server, ns.getPlayer()).toFixed(2);\\n        server.myxp = (3 + (server.server.baseDifficulty * ns.getPlayer().hacking_exp_mult *  .3)).toFixed(2);\\n        server.diff = server.server.baseDifficulty;\\n        server.maxUsefulThreads = Math.floor( 41 / (ns.formulas.hacking.hackPercent(server.server, ns.getPlayer()) * 100));\\n        server.hackCalcEffect = (100 * ns.formulas.hacking.hackPercent(server.server, ns.getPlayer())).toFixed(2);\\n        log.info(format, server);\\n    }\\n\\n    \\n    // let test = document.getElementById(\\\"clickable\\\");\\n    // test.style = \\\"display: block; visibility: visible; transform: translate(-10px, -10px);\\\";\\n    // test.id = \\\"unclickable\\\";\\n}\",\"filename\":\"rates.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///4d90d78e-036a-4607-9c36-c574f4a3754e\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///aaebad0d-c565-44f5-ae8e-c07f925bfab9\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///6e27e5f5-fe7d-49c1-9db0-898d0f106cb3\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///a9e25ca6-af2b-43aa-9e67-db3e7f0274ff\"},{\"filename\":\"rates.js\",\"url\":\"blob:file:///5798d9bd-67b8-4292-acec-7ff6cc5f614f\"}],\"dependents\":[],\"ramUsage\":6.45,\"server\":\"home\",\"moduleSequenceNumber\":468,\"_hash\":\"78c2da00aaebe409c35a9228adce1784ccb45dd17dc54d07b2cba9d154682986\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * WARNING THIS FILE HAS SPOILERS FOR HOW TO SOLVE CONTRACTS\\n * IF YOU WANT TO SOLVE THESE YOURSELF CLOSE THIS NOW!\\n */\\n\\n/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\nimport { findServers } from './util';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        let contracts = findServers({ns: ns, depth: -1})\\n            .filter(server => hasContracts(ns, server.server))\\n            .flatMap(server => getContracts(ns, server.server));\\n\\n        for (const contract of contracts) {\\n            switch (contract.type) {\\n                case \\\"Array Jumping Game\\\":\\n                    contract.solution = jump(contract.data);\\n                    break;\\n                case \\\"Total Ways to Sum\\\":\\n                    contract.solution = partition(contract.data);\\n                    break;\\n                case \\\"Unique Paths in a Grid I\\\":\\n                case \\\"Unique Paths in a Grid II\\\":\\n                    contract.solution = uniquePaths(contract.data);\\n                    break;\\n                case \\\"Spiralize Matrix\\\":\\n                    contract.solution = spiralFlatten(contract.data);\\n                    break;\\n                case \\\"Find Largest Prime Factor\\\":\\n                    contract.solution = findLargestPrimeFactor(contract.data);\\n                    break;\\n                case \\\"Subarray with Maximum Sum\\\":\\n                    contract.solution = findMaxSubArraySum(contract.data);\\n                    break\\n                case \\\"Merge Overlapping Intervals\\\":\\n                    contract.solution = reduceIntervals(contract.data);\\n                    break;\\n                case \\\"Minimum Path Sum in a Triangle\\\":\\n                    contract.solution = minimumSumTriangle(contract.data);\\n                    break;\\n                case \\\"Generate IP Addresses\\\":\\n                    contract.solution = findValidIps(contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader I\\\":\\n                    contract.solution = stockSolver(1, contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader II\\\":\\n                    contract.solution = stockSolver(Math.floor(contract.data.length / 2), contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader III\\\":\\n                    contract.solution = stockSolver(2, contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader IV\\\":\\n                    contract.solution = stockSolver(contract.data[0], contract.data[1]);\\n                    break;\\n                case \\\"Sanitize Parentheses in Expression\\\":\\n                    contract.solution = sanitizeParentheses(contract.data);\\n                    break;\\n                case \\\"Find All Valid Math Expressions\\\":\\n                    contract.solution = findValidMathExpressions(contract.data[0], contract.data[1]);\\n                    break;\\n                default:\\n            }\\n            if (typeof(contract.solution) !== 'undefined') {\\n                contract.result = ns.codingcontract.attempt(contract.solution, contract.filename, contract.hostname, { returnReward: true});\\n                ns.print(\\\"Solved \\\" + contract.filename + \\\"  Result: \\\" + contract.result);\\n            }\\n            else {\\n                ns.print(\\\"No solution available for contract: \\\" + contract.type + \\\" | \\\" + contract.hostname + \\\"/\\\" + contract.filename);\\n            }\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction hasContracts(ns, server) {\\n    // ns.tprintf(\\\"%j\\\", server);\\n    return ns.ls(server.hostname, \\\".cct\\\").length > 0;\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction getContracts(ns, server) {\\n    return ns.ls(server.hostname, \\\".cct\\\")\\n        .map(filename => { \\n            return {\\n                hostname: server.hostname,\\n                filename: filename,\\n                type: ns.codingcontract.getContractType(filename, server.hostname),\\n                data: ns.codingcontract.getData(filename, server.hostname),\\n                desc: ns.codingcontract.getDescription(filename, server.hostname)\\n            };\\n    });\\n}\\n\\nfunction stockSolver(txns, prices) {\\n    let len = prices.length\\n    if (len < 2) {\\n        return 0\\n    }\\n    if (txns > len / 2) {\\n        var res = 0\\n        for (var i = 1; i < len; ++i) {\\n            res += Math.max(prices[i] - prices[i - 1], 0)\\n        }\\n        return res\\n    }\\n    var hold = []\\n    var rele = []\\n    hold.length = txns + 1\\n    rele.length = txns + 1\\n    for (var i = 0; i <= txns; ++i) {\\n        hold[i] = Number.MIN_SAFE_INTEGER\\n        rele[i] = 0\\n    }\\n    var cur\\n    for (var i = 0; i < len; ++i) {\\n        cur = prices[i]\\n        for (var j = txns; j > 0; --j) {\\n            rele[j] = Math.max(rele[j], hold[j] + cur)\\n            hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n        }\\n    }\\n    return rele[txns]\\n}\\n\\n/**\\n * Given a list of intervals. merges all overlapping intervals and return the merged list.\\n * @param {number[][]} intervals \\n */\\nfunction reduceIntervals(intervals) {\\n    let final = [];\\n    let sorted = intervals.sort((a, b) => a[0] - b[0]);\\n    // push the first item to the top of the stack\\n    final.unshift(sorted.shift());\\n    while (sorted.length > 0) {\\n        let int = sorted.shift();\\n\\n        // If the current interval starts within the top of the stack, try to merge\\n        if (int[0] >= final[0][0] && int[0] <= final[0][1]) {\\n            // merge\\n            if (int[1] > final[0][1]) {\\n                final[0][1] = int[1];\\n            }\\n            // if it's not greater than the current then this interval is already contained.\\n        } else {\\n            // otherwise push this to the stack\\n            final.unshift(int);\\n        }\\n    }\\n    return final.reverse();\\n}\\n\\n/**\\n * Finds a contiguous subarray with maximum sum of elements and returns the sum.\\n * @param {number[]} nums \\n */\\nfunction findMaxSubArraySum(nums) {\\n    let end = 0;\\n    let currMax = nums[0];\\n    let max = nums[0];\\n    // iterate over all elements to find the maximum value to stop at\\n    for (let i = 1; i < nums.length; ++i) {\\n        // if the current element is greater than all previous elements combined then just start here.\\n        currMax = Math.max(nums[i], nums[i] + currMax);\\n        if (currMax > max) {\\n            max = currMax;\\n            end = i;\\n        }\\n    }\\n    let start = end;\\n    // walk back from the end index to fix the start\\n    while (start >= 0) {\\n        max -= nums[start];\\n        if (max == 0) {\\n            break;\\n        }\\n        start--;\\n    }\\n    return nums.slice(start, end + 1).reduce((tot, num) => tot + num, 0);\\n}\\n\\n/**\\n * Finds the largest prime factor of the given number\\n * @param {number} num \\n * @returns \\n */\\nfunction findLargestPrimeFactor(num) {\\n    let maxPrime = -1;\\n    // remove all factors of 2\\n    while(num % 2 === 0) {\\n        num /= 2;\\n        maxPrime = 2;\\n    }\\n    // factorize for all odd numbers\\n    for (let i = 3; i <= Math.sqrt(num); i += 2) {\\n        while (num % i === 0) {\\n            maxPrime = i;\\n            num /= i;\\n        }\\n    }\\n    return num > 2 ? num : maxPrime;\\n}\\n\\n/**\\n * Flattens a 2d array by evaluating the entries in 'spiral' order\\n * @param {NS} ns \\n * @param {number[][]} grid \\n */\\nexport function spiralFlatten(grid) {\\n    let answer = [];\\n\\n    let dir = \\\"right\\\";\\n    let totalElements = grid[0].length * grid.length;\\n    while (answer.length < totalElements) {\\n        switch (dir) {\\n            case \\\"left\\\":\\n                const last = grid.length - 1;\\n                while (grid[last].length > 0) {\\n                    answer.push(grid[last].pop());\\n                }\\n                grid.pop();\\n                break;\\n            case \\\"up\\\":\\n                for (let i = grid.length - 1; i >= 0; i--) {\\n                    answer.push(grid[i].shift());\\n                }\\n                break;\\n            case \\\"down\\\":\\n                for (let i = 0; i < grid.length; i++) {\\n                    answer.push(grid[i].pop());\\n                }\\n                break;\\n            case \\\"right\\\":\\n            default:\\n                while (grid[0].length > 0) {\\n                    answer.push(grid[0].shift());\\n                }\\n                grid.shift();\\n        }\\n\\n        switch (dir) {\\n            case \\\"down\\\":\\n                dir = \\\"left\\\";\\n                break;\\n            case \\\"left\\\":\\n                dir = \\\"up\\\";\\n                break;\\n            case \\\"up\\\":\\n                dir = \\\"right\\\";\\n                break;\\n            case \\\"right\\\":      \\n            default:\\n                dir = \\\"down\\\";\\n                break;\\n        }\\n    }\\n    return answer;\\n}\\n\\n/**\\n * Counts the number of ways to partition the given number by whole integers\\n * @param {NS} ns \\n * @param {number} num \\n */\\nexport function partition(num) {\\n    let ways = [1];\\n    for (let i = 1; i <= num; i++) {\\n        ways.push(0);\\n    }\\n\\n    for (let i = 1; i < num; i++) {\\n        for (let j = i; j <= num ; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n    return ways[num];\\n}\\n\\n/**\\n * Finds the minimum sum to traverse to a bottom element by walking the tree from bottom to top\\n * \\n * @param {number[][]} triangle - 2d array of numbers in 'triangle' form ex: [[1], [2,3], [4,5,6], [7,8,9,0]]\\n */\\nexport function minimumSumTriangle(triangle) {\\n    let cache = [];\\n    let h = triangle.length - 1;\\n    // cache the bottom row\\n    for (let i = 0; i < triangle[h].length; i++) {\\n        cache.push(triangle[h][i]);\\n    }\\n    // loop over each row starting from the 2nd from the bottom one\\n    for (let i = h - 1; i >= 0; i--) {\\n        // for each number in this row\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            // update the cache at j to be the current value in the tree plus the minimum of the neighbor cache values\\n            cache[j] = triangle[i][j] + Math.min(cache[j], cache[j + 1]);\\n        }\\n    }\\n    return cache[0];\\n}\\n\\n/**\\n * Finds the number of unique paths of an unobstructed grid of the given size, or given an obstructed grid.\\n * @param {number[]|number[][]} data\\n * @param {NS} ns\\n */\\nexport function uniquePaths(data, ns) {\\n    let grid = [];\\n    if (data.length == 2 && typeof(data[0]) === 'number') {\\n        // if this is a 1d array then the inputs are the size of an unobstructed grid\\n        grid = generateEmptyGrid(data[0], data[1]);\\n    } else {\\n        grid = data;\\n    }\\n\\n    return uniquePathsFromGrid(grid);\\n}\\n\\nfunction generateEmptyGrid(sizeX, sizeY) {\\n    let grid = [];\\n    for (let i = 0; i < sizeY; i ++) {\\n        grid.push([]);\\n        for (let j = 0; j < sizeX; ++j) {\\n            grid[i].push(0);\\n        } \\n    }\\n    return grid;\\n}\\n\\n/**\\n * Accepts a grid initialized with 0s and 1s. a '1' in a cell denotes an obstacle\\n * @param {number[]} grid \\n */\\nfunction uniquePathsFromGrid(grid) {\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[0].length; j++) {\\n            // if there's an obstacle in this cell mark it as non-traversible\\n            if (grid[i][j] === 1) {\\n                grid[i][j] = 0;\\n                continue;\\n            }\\n            // for the first cell default to 1 \\n            if (j === 0 && i === 0) {\\n                grid[i][j] = 1;\\n            }\\n            // for all other edge cells default to previous edge cell value\\n            else if (j === 0) {\\n                grid[i][j] = grid[i - 1][j];\\n            } else if (i === 0) {\\n                grid[i][j] = grid[i][j - 1];\\n            } \\n            // for all other cells add neighbor cell values\\n            else {    \\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\\n            }\\n        }\\n    }\\n    return grid[grid.length -1][grid[0].length - 1];\\n}\\n\\n/**\\n * \\n * @param {string} str \\n * @returns \\n */\\nexport function sanitizeParentheses(str) {\\n    let left = 0;\\n    let right = 0;\\n    let answer = [];\\n    for (let i = 0; i < str.length; ++i) {\\n        if (str[i] === '(') {\\n            ++left;\\n        } else if (str[i] === ')') {\\n            left > 0 ? --left : ++right;\\n        }\\n    }\\n    dfs(0, 0, left, right, str, '', answer);\\n\\n    return answer;\\n}\\n\\n/**\\n * \\n * @param {number} pair \\n * @param {number} index \\n * @param {number} left \\n * @param {number} right \\n * @param {string} s \\n * @param {string} solution \\n * @param {string[]} answers \\n */\\nfunction dfs(pair, index, left, right, s, solution, answers) {\\n    if (s.length === index) {\\n        if (left === 0 && right === 0 && pair === 0) {\\n            for (let i = 0; i < answers.length; i++) {\\n                if (answers[i] === solution) {\\n                    return;\\n                }\\n            }\\n            answers.push(solution);\\n        }\\n        return;\\n    }\\n    if (s[index] === '(') {\\n        if (left > 0) {\\n            dfs(pair, index + 1, left - 1, right, s, solution, answers);\\n        }\\n        dfs(pair + 1, index + 1, left, right, s, solution + s[index], answers);\\n    } else if (s[index] === ')') {\\n        if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, answers);\\n        if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], answers);\\n    } else {\\n        dfs(pair, index + 1, left, right, s, solution + s[index], answers);\\n    }\\n}\\n\\nexport function findValidIps(str) {\\n    let answer = [];\\n    for (let a = 1; a <= 3; ++a) {\\n        for (let b = 1; b <= 3; ++b) {\\n            for (let c = 1; c <= 3; ++c) {\\n                for (let d = 1; d <= 3; ++d) {\\n                    if (a + b + c + d === str.length) {\\n                        const A = parseInt(str.substring(0, a), 10);\\n                        const B = parseInt(str.substring(a, a + b), 10);\\n                        const C = parseInt(str.substring(a + b, a + b + c), 10);\\n                        const D = parseInt(str.substring(a + b + c, a + b + c + d), 10);\\n                        if (A < 256 && B < 256 && C < 256 && D < 256) {\\n                            const ip = A.toString() + \\\".\\\" + B.toString() + \\\".\\\" + C.toString() + \\\".\\\" + D.toString();\\n                            if (ip.length !== str.length + 3) continue;\\n                            answer.push(ip);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return answer;\\n}\\n\\n/**\\n * For a given list of numbers attempts to permutate the list using +, - and * operations for each number\\n * to get to the target value. Once all operation chains are found, returns the list.\\n * @param {number[]} nums - the array of numbers to perform calculations with\\n * @param {number} target - the result we are attempting to get\\n * @returns \\n */\\nexport function findValidMathExpressions(nums, target) {\\n    if (nums == null || nums.length === 0) {\\n        return [];\\n    }\\n    let answer = [];\\n    mathHelper(answer, '', nums, target, 0, 0, 0);\\n    return answer;\\n}\\n\\nfunction mathHelper(answer, path, num, target, pos, evaluated, multed) {\\n    if (pos === num.length) {\\n        if (target === evaluated) {\\n            answer.push(path);\\n        }\\n        return;\\n    }\\n    for (let i = pos; i < num.length; ++i) {\\n        if (i != pos && num[pos] == '0') {\\n            break;\\n        }\\n        let cur = parseInt(num.substring(pos, i + 1));\\n        if (pos === 0) {\\n            mathHelper(answer, path + cur, num, target, i + 1, cur, cur);\\n        } else {\\n            mathHelper(answer, path + '+' + cur, num, target, i + 1, evaluated + cur, cur);\\n            mathHelper(answer, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur);\\n            mathHelper(answer, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n        }\\n    }\\n}\\n\\n/**\\n * Finds if you can jump to the end of the array where each value in the array represents the MAXIMUM distance you can jump in the array\\n * @param {number[]} nums \\n */\\nfunction jump(nums) {\\n    let nextMax = 0;\\n    for (let i = 0; i < nums.length && i <= nextMax; i++) {\\n        nextMax = Math.max(nextMax, i + nums[i]);\\n    }\\n    return (nextMax >= (nums.length - 1)) ? 1 : 0;\\n}\",\"filename\":\"contracts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///23a49243-582f-4aae-aa2a-d70d6a4042f0\",\"moduleSequenceNumber\":455},{\"filename\":\"util.js\",\"url\":\"blob:file:///6311c587-f074-41bb-8d9c-0ec33edcb2f6\",\"moduleSequenceNumber\":451},{\"filename\":\"contracts.js\",\"url\":\"blob:file:///7e984d91-299b-4c4b-91f1-433439434025\",\"moduleSequenceNumber\":883}],\"dependents\":[],\"ramUsage\":29,\"server\":\"home\",\"moduleSequenceNumber\":883,\"_hash\":\"51e83fc0ccfe3c61f86adcac66e0286bb73cd99159703ec214417766e0fdfe0e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n**/\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true) {\\n\\t    await ns.share();\\n    }\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ce6902e1-9630-4bd6-b05b-d0fe57e6969d\",\"moduleSequenceNumber\":169461}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":470,\"_hash\":\"ad80d026a3a1178e5b82e766cf1564c7d0387c209b7eda13ba695bf2a9bedf10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.print(\\\"No target host given\\\");\\n\\t\\texit;\\n\\t}\\n\\tconst target = ns.args[0];\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst minMoney = ns.getServerMaxMoney(target) * .75;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":471,\"_hash\":\"09f67151de054766890602ddad2ca7124dc66bd2f49d4c525454f2764c58bc32\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":238237,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst standardGlobals = new Set([\\\"window\\\", \\\"self\\\", \\\"document\\\", \\\"name\\\", \\\"location\\\", \\\"customElements\\\", \\\"history\\\", \\\"locationbar\\\", \\\"menubar\\\", \\\"personalbar\\\", \\\"scrollbars\\\", \\\"statusbar\\\", \\\"toolbar\\\", \\\"status\\\", \\\"closed\\\", \\\"frames\\\", \\\"length\\\", \\\"top\\\", \\\"opener\\\", \\\"parent\\\", \\\"frameElement\\\", \\\"navigator\\\", \\\"origin\\\", \\\"external\\\", \\\"screen\\\", \\\"innerWidth\\\", \\\"innerHeight\\\", \\\"scrollX\\\", \\\"pageXOffset\\\", \\\"scrollY\\\", \\\"pageYOffset\\\", \\\"visualViewport\\\", \\\"screenX\\\", \\\"screenY\\\", \\\"outerWidth\\\", \\\"outerHeight\\\", \\\"devicePixelRatio\\\", \\\"clientInformation\\\", \\\"screenLeft\\\", \\\"screenTop\\\", \\\"defaultStatus\\\", \\\"defaultstatus\\\", \\\"styleMedia\\\", \\\"onsearch\\\", \\\"isSecureContext\\\", \\\"performance\\\", \\\"onappinstalled\\\", \\\"onbeforeinstallprompt\\\", \\\"crypto\\\", \\\"indexedDB\\\", \\\"webkitStorageInfo\\\", \\\"sessionStorage\\\", \\\"localStorage\\\", \\\"onabort\\\", \\\"onblur\\\", \\\"oncancel\\\", \\\"oncanplay\\\", \\\"oncanplaythrough\\\", \\\"onchange\\\", \\\"onclick\\\", \\\"onclose\\\", \\\"oncontextmenu\\\", \\\"oncuechange\\\", \\\"ondblclick\\\", \\\"ondrag\\\", \\\"ondragend\\\", \\\"ondragenter\\\", \\\"ondragleave\\\", \\\"ondragover\\\", \\\"ondragstart\\\", \\\"ondrop\\\", \\\"ondurationchange\\\", \\\"onemptied\\\", \\\"onended\\\", \\\"onerror\\\", \\\"onfocus\\\", \\\"onformdata\\\", \\\"oninput\\\", \\\"oninvalid\\\", \\\"onkeydown\\\", \\\"onkeypress\\\", \\\"onkeyup\\\", \\\"onload\\\", \\\"onloadeddata\\\", \\\"onloadedmetadata\\\", \\\"onloadstart\\\", \\\"onmousedown\\\", \\\"onmouseenter\\\", \\\"onmouseleave\\\", \\\"onmousemove\\\", \\\"onmouseout\\\", \\\"onmouseover\\\", \\\"onmouseup\\\", \\\"onmousewheel\\\", \\\"onpause\\\", \\\"onplay\\\", \\\"onplaying\\\", \\\"onprogress\\\", \\\"onratechange\\\", \\\"onreset\\\", \\\"onresize\\\", \\\"onscroll\\\", \\\"onseeked\\\", \\\"onseeking\\\", \\\"onselect\\\", \\\"onstalled\\\", \\\"onsubmit\\\", \\\"onsuspend\\\", \\\"ontimeupdate\\\", \\\"ontoggle\\\", \\\"onvolumechange\\\", \\\"onwaiting\\\", \\\"onwebkitanimationend\\\", \\\"onwebkitanimationiteration\\\", \\\"onwebkitanimationstart\\\", \\\"onwebkittransitionend\\\", \\\"onwheel\\\", \\\"onauxclick\\\", \\\"ongotpointercapture\\\", \\\"onlostpointercapture\\\", \\\"onpointerdown\\\", \\\"onpointermove\\\", \\\"onpointerup\\\", \\\"onpointercancel\\\", \\\"onpointerover\\\", \\\"onpointerout\\\", \\\"onpointerenter\\\", \\\"onpointerleave\\\", \\\"onselectstart\\\", \\\"onselectionchange\\\", \\\"onanimationend\\\", \\\"onanimationiteration\\\", \\\"onanimationstart\\\", \\\"ontransitionrun\\\", \\\"ontransitionstart\\\", \\\"ontransitionend\\\", \\\"ontransitioncancel\\\", \\\"onafterprint\\\", \\\"onbeforeprint\\\", \\\"onbeforeunload\\\", \\\"onhashchange\\\", \\\"onlanguagechange\\\", \\\"onmessage\\\", \\\"onmessageerror\\\", \\\"onoffline\\\", \\\"ononline\\\", \\\"onpagehide\\\", \\\"onpageshow\\\", \\\"onpopstate\\\", \\\"onrejectionhandled\\\", \\\"onstorage\\\", \\\"onunhandledrejection\\\", \\\"onunload\\\", \\\"alert\\\", \\\"atob\\\", \\\"blur\\\", \\\"btoa\\\", \\\"cancelAnimationFrame\\\", \\\"cancelIdleCallback\\\", \\\"captureEvents\\\", \\\"clearInterval\\\", \\\"clearTimeout\\\", \\\"close\\\", \\\"confirm\\\", \\\"createImageBitmap\\\", \\\"fetch\\\", \\\"find\\\", \\\"focus\\\", \\\"getComputedStyle\\\", \\\"getSelection\\\", \\\"matchMedia\\\", \\\"moveBy\\\", \\\"moveTo\\\", \\\"open\\\", \\\"postMessage\\\", \\\"print\\\", \\\"prompt\\\", \\\"queueMicrotask\\\", \\\"releaseEvents\\\", \\\"requestAnimationFrame\\\", \\\"requestIdleCallback\\\", \\\"resizeBy\\\", \\\"resizeTo\\\", \\\"scroll\\\", \\\"scrollBy\\\", \\\"scrollTo\\\", \\\"setInterval\\\", \\\"setTimeout\\\", \\\"stop\\\", \\\"webkitCancelAnimationFrame\\\", \\\"webkitRequestAnimationFrame\\\", \\\"chrome\\\", \\\"caches\\\", \\\"ondevicemotion\\\", \\\"ondeviceorientation\\\", \\\"ondeviceorientationabsolute\\\", \\\"originAgentCluster\\\", \\\"cookieStore\\\", \\\"showDirectoryPicker\\\", \\\"showOpenFilePicker\\\", \\\"showSaveFilePicker\\\", \\\"speechSynthesis\\\", \\\"onpointerrawupdate\\\", \\\"trustedTypes\\\", \\\"crossOriginIsolated\\\", \\\"openDatabase\\\", \\\"webkitRequestFileSystem\\\", \\\"webkitResolveLocalFileSystemURL\\\"]);\\n\\t// for (const key of Object.keys(window)) {\\n\\t// \\tif (!standardGlobals.has(key)) {\\n\\t// \\t\\tns.tprint(key);\\n\\t// \\t}\\n\\t// }\\n\\tfor (const key of Object.keys(window[\\\"_\\\"])) {\\n\\t\\tns.tprint(key);\\n\\t}\\n\\t// let element = document.getElementById(\\\"unclickable\\\");\\n\\t// let clickEvent = new MouseEvent(\\\"click\\\", {\\n\\t// \\tview: window,\\n\\t// \\tbubbles: true,\\n\\t// \\tcancelable: false\\n\\t// })\\n\\t// element.dispatchEvent(clickEvent);\\n\\t// element.click();\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///0667c972-5ed8-47e5-a2d3-4e96e0198af6\",\"moduleSequenceNumber\":250646}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":250646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"zombie-0\",\"zombie-1\",\"zombie-2\",\"zombie-3\",\"zombie-4\",\"zombie-5\",\"zombie-6\",\"zombie-7\",\"zombie-8\",\"zombie-9\",\"zombie-10\",\"zombie-11\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"22.8.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":473,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":474,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":475,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":476,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":477,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30880886668,\"moneyMax\":772022166700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1345,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"78.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":478,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":479,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":480,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":481,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":482,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":44980898053,\"moneyMax\":1124522451325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1214,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"53.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":483,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":484,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":485,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":486,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":487,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":15793755220,\"moneyMax\":394843880500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"33.8.8.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":488,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":489,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":490,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":491,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"blade\",\"moduleSequenceNumber\":492,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":33892098933,\"moneyMax\":847302473325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":996,\"serverGrowth\":85}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"19.3.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":493,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":494,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":495,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":496,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nwo\",\"moduleSequenceNumber\":497,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":33507414257,\"moneyMax\":837685356425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":72}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"55.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":498,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":499,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":500,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":501,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":502,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":20704363491,\"moneyMax\":517609087275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":56}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"74.4.5.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":503,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":504,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":505,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":506,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":507,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":20275493954,\"moneyMax\":506887348850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":978,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"24.4.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":508,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":509,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":510,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":511,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":512,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":24221662017,\"moneyMax\":605541550425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1124,\"serverGrowth\":81}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"91.1.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":513,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":514,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":515,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":516,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":517,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24622058658,\"moneyMax\":615551466450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"81.2.1.6\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":518,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":519,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":520,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":521,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":522,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1601168569,\"moneyMax\":40029214225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1070,\"serverGrowth\":80}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"52.1.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":523,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":524,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":525,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":526,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":527,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1282,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"4.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":528,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":529,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":530,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":531,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":532,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1105433804,\"moneyMax\":27635845100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":90}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"72.5.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":533,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":534,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":535,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":536,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":537,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":849971303,\"moneyMax\":21249282575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1029,\"serverGrowth\":47}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"20.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":538,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":539,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":540,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":541,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":542,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":741821950,\"moneyMax\":18545548750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":908,\"serverGrowth\":68}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"90.7.0.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":543,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":544,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":545,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":546,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"helios\",\"moduleSequenceNumber\":547,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":696892337,\"moneyMax\":17422308425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"14.7.3.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":548,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":549,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":550,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":551,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":552,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":776690819,\"moneyMax\":19417270475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":68}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"40.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":553,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":554,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":555,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":556,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"icarus\",\"moduleSequenceNumber\":557,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":914817242,\"moneyMax\":22870431050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"88.7.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":558,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":559,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":560,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":561,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":562,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1170946562,\"moneyMax\":29273664050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":852,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"44.4.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":563,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":564,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":565,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":566,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":567,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":889311329,\"moneyMax\":22232783225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"87.0.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":568,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":569,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":570,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":571,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":572,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":584450359,\"moneyMax\":14611258975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":73}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"34.4.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":573,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":574,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":575,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":576,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":577,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":818616427,\"moneyMax\":20465410675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"37.3.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":578,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":579,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":580,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":581,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":582,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":785227897,\"moneyMax\":19630697425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"54.8.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":583,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":584,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":585,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":586,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":587,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1139781640,\"moneyMax\":28494541000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":58}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"52.1.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":588,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":589,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":590,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":591,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnia\",\"moduleSequenceNumber\":592,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":915293851,\"moneyMax\":22882346275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"11.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":593,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":594,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":595,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":596,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":597,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1094704552,\"moneyMax\":27367613800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":782,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"61.5.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":598,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":599,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":600,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":601,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":602,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":869735976,\"moneyMax\":21743399400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":70}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"47.5.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":603,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":604,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":605,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":606,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"solaris\",\"moduleSequenceNumber\":607,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":837067973,\"moneyMax\":20926699325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":756,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"62.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":608,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":609,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":610,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":611,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":612,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1450195129,\"moneyMax\":36254878225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":832,\"serverGrowth\":69}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"33.8.4.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":613,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":614,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":615,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":616,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":617,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1591094205,\"moneyMax\":39777355125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"21.4.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":618,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":619,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":620,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":621,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":622,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zeus-med\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1219597517,\"moneyMax\":30489937925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":69}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"32.2.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":623,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":624,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":625,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":626,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":627,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1476313238,\"moneyMax\":36907830950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"33.9.2.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":628,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":629,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":630,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":631,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":632,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1065744589,\"moneyMax\":26643614725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"27.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":633,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":634,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":635,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":636,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":637,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":790611929,\"moneyMax\":19765298225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":736,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"54.6.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":638,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":639,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":640,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":641,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":642,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":555752784,\"moneyMax\":13893819600,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":475,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"61.3.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":643,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":644,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":645,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":646,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":647,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":641408126,\"moneyMax\":16035203150,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":521,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"18.3.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,29178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":189073.44000000635,\"onlineMoneyMade\":0,\"onlineRunningTime\":29827.210000069073,\"pid\":632,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ce5de2fc-1d52-4c2d-89fc-854761e2a590\",\"moduleSequenceNumber\":28742}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":28742,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":649,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":650,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":651,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":652,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":340060790,\"moneyMax\":8501519750,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":413,\"serverGrowth\":36}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"30.4.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,133006]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":861878.8800000164,\"onlineMoneyMade\":0,\"onlineRunningTime\":33640.61000005926,\"pid\":61,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///0133a7b2-fb5e-44c4-b329-900ef33d1768\",\"moduleSequenceNumber\":943}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":943,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":654,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":655,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":656,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":657,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":209777527,\"moneyMax\":5244438175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":372,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"92.2.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":658,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":659,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":660,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":661,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":662,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1056419083,\"moneyMax\":26410477075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":736,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"65.2.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,3357]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21753.359999999917,\"onlineMoneyMade\":0,\"onlineRunningTime\":6743.409999996059,\"pid\":7147,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///c95ecd01-0d7e-4326-90db-f3d383eec826\",\"moduleSequenceNumber\":197651}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":197651,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":664,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":665,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":666,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":667,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":281577721,\"moneyMax\":7039443025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":433,\"serverGrowth\":43}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"12.4.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":668,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":669,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":670,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":671,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"syscore\",\"moduleSequenceNumber\":672,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"comptek\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":499987468,\"moneyMax\":12499686700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":583,\"serverGrowth\":64}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"15.6.9.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,133006]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":861878.8800000164,\"onlineMoneyMade\":0,\"onlineRunningTime\":33640.61000005926,\"pid\":62,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///925b9f01-2532-46a2-825c-3eb6a1966d80\",\"moduleSequenceNumber\":944}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":944,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":674,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":675,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":676,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":677,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":354176158,\"moneyMax\":8854403950,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":34}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"80.7.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.58346719984,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.522,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":7,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f071ccb5-0427-473b-9108-cb21e9ff3636\",\"moduleSequenceNumber\":25935}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///eee9a44e-5a5b-4c7e-9198-d40427e6db82\",\"moduleSequenceNumber\":889}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":889,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":679,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":680,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":681,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///9a92437e-f8c1-4469-a282-2e41859d0d46\",\"moduleSequenceNumber\":26365}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":682,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":15.84,\"minDifficulty\":14,\"moneyAvailable\":3322801384.5910177,\"moneyMax\":4229845525,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":312,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"14.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":683,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":684,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":685,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":686,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"moduleSequenceNumber\":687,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":248765967,\"moneyMax\":6219149175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":362,\"serverGrowth\":62}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"47.8.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,133006]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":861878.8800000164,\"onlineMoneyMade\":0,\"onlineRunningTime\":33640.61000005926,\"pid\":60,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///98a6eb42-484d-4b99-aadc-6f0df16bef6a\",\"moduleSequenceNumber\":942}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":942,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":689,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":690,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":691,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":692,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":387,\"serverGrowth\":67}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"10.5.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":693,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":694,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":695,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":696,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":697,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":78188361,\"moneyMax\":1954709025,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":294,\"serverGrowth\":52}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"78.4.2.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,4160]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":11182.352796000025,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.526,\"onlineExpGained\":26956.79999999876,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":8,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///57e8f123-a330-463b-a69c-1de5ccfdba88\",\"moduleSequenceNumber\":14818}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///48152f78-2e2e-4645-b7b8-1b2eee5f6f82\",\"moduleSequenceNumber\":890}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":890,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":699,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":700,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":701,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///02b5f2a9-22b1-4f0b-9b9d-39c6ddd0479b\",\"moduleSequenceNumber\":787}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":702,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"41.8.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.58758199983,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.526,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":9,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///a7ceac9e-2af9-4c41-8935-a7ad3b295e31\",\"moduleSequenceNumber\":14819}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///fa91a64e-4815-459b-b09d-7adee73136d0\",\"moduleSequenceNumber\":891}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":891,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":704,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":705,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":706,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///3b722f40-d2a5-4846-911a-38aaa53d3ca8\",\"moduleSequenceNumber\":788}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":707,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"18.8.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.589639399834,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.528,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":10,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///d6287ad2-af83-4dbb-87e4-7cd3ce49e027\",\"moduleSequenceNumber\":14820}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///57bcf10b-121a-4acf-be89-17d8a72b53d2\",\"moduleSequenceNumber\":892}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":892,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":709,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":710,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":711,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///1eff7d86-de40-452d-bc1c-cd164bd54e9c\",\"moduleSequenceNumber\":789}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":712,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.85,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"16.3.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.591696799835,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.53,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":11,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///924505cd-d7c5-44a3-99ce-dca08204b63a\",\"moduleSequenceNumber\":14821}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///7a09c641-caa0-4aee-9ef8-29b2b895ddde\",\"moduleSequenceNumber\":893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":893,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":714,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":715,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":716,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///a8387029-703f-466c-a66e-74cd7605b349\",\"moduleSequenceNumber\":790}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":717,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"max-hardware\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.512,\"minDifficulty\":5,\"moneyAvailable\":2533435.8453050386,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"52.6.2.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.18750839967,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.532,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":12,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///a820dad9-8841-4a9a-ad34-0c2e498b9b45\",\"moduleSequenceNumber\":14849}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///bbc4fc47-e095-441c-b1b8-fe58df79f4c4\",\"moduleSequenceNumber\":894}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":894,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":719,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":720,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":721,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///5512e529-d4ec-4899-9c8e-619f54430165\",\"moduleSequenceNumber\":791}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":722,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"57.8.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.59581159984,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.534,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":13,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ef56a4c7-7f06-46ec-93ff-812a296a2b7e\",\"moduleSequenceNumber\":14847}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///33a65022-2ee4-4cb8-8a0e-eda3051aa72c\",\"moduleSequenceNumber\":895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":895,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":724,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":725,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":726,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///97e778ff-f87d-4c97-b0aa-e2004b43df8d\",\"moduleSequenceNumber\":792}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":727,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"72.4.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.19573799966,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.536,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":14,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///80621fa2-9552-40e3-a28e-fe0c542dc44b\",\"moduleSequenceNumber\":14852}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///be8aeaf6-75b3-4545-a54f-958b7069e6b2\",\"moduleSequenceNumber\":896}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":896,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":729,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":730,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":731,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///d09b5add-a79d-418d-bbeb-031299101b11\",\"moduleSequenceNumber\":793}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":732,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\",\"netlink\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"41.0.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,74880]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":201282.39970559935,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.538,\"onlineExpGained\":485222.4000000255,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":15,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///d9a4f796-fe96-4eb4-ba14-97fd71b0a68e\",\"moduleSequenceNumber\":14853}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ccc5e185-7ce8-4539-92f8-bb762021f637\",\"moduleSequenceNumber\":897}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":897,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":734,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":735,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":736,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///f3ef2e95-7d5c-47a0-bba2-06c194ece3f2\",\"moduleSequenceNumber\":794}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":737,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":18.03,\"minDifficulty\":10,\"moneyAvailable\":795720506.1738893,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"18.7.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.60404119984,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.542,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":16,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ff93b1f0-f58c-48f4-ac78-0a1d752be34c\",\"moduleSequenceNumber\":14822}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///16eb696a-6589-4179-85da-7dacd55e788b\",\"moduleSequenceNumber\":898}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":898,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":739,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":740,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":741,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///acb91786-d920-4204-ac48-2ad584d31a29\",\"moduleSequenceNumber\":795}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":742,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"61.0.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,18720]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50320.606098599834,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.544,\"onlineExpGained\":121305.60000000638,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":17,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///bff615b7-4f7f-4d0b-811d-6987c90e43ef\",\"moduleSequenceNumber\":14823}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///d7da8ac0-804c-4e0c-96d6-22e6561a8c66\",\"moduleSequenceNumber\":899}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":899,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":744,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":745,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":746,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///4a74a6d0-bd11-4809-8b6e-0f128005f90f\",\"moduleSequenceNumber\":796}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":747,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.796,\"minDifficulty\":5,\"moneyAvailable\":390102.2436342915,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"25.9.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.21428699968,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.545000000006,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":18,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///108dc7c1-7ab9-4785-93ed-869c23d48529\",\"moduleSequenceNumber\":14848}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///af848ab8-8e7d-40c6-b67a-6c391c078cfa\",\"moduleSequenceNumber\":900}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":900,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":749,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":750,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":751,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///67852c98-3b37-42da-acc8-c5aecc05f10f\",\"moduleSequenceNumber\":797}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":752,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":11.463999999999999,\"minDifficulty\":7,\"moneyAvailable\":1927.999461226439,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"67.0.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.21631199967,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.546,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":19,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///fe395ee1-f3e5-4b3b-a89c-df78ed359ae3\",\"moduleSequenceNumber\":14850}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f69827f8-4231-44b4-9610-ae7cda355ade\",\"moduleSequenceNumber\":901}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":901,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":754,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":755,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":756,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///bfbd9c81-47fc-482f-81de-1d8522e7b93b\",\"moduleSequenceNumber\":798}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":757,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.045999999999999,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"90.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.22042679967,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.547999999995,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":20,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///92da37bc-0b9e-40f4-a9bf-7d8eb0fc63b3\",\"moduleSequenceNumber\":14855}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///a6593ae0-4f13-458b-9579-a71ec3f59e4a\",\"moduleSequenceNumber\":902}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":902,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":759,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":760,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":761,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///46f3abc7-b5dc-4a53-bd6e-7f3ec35f363a\",\"moduleSequenceNumber\":799}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":762,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":9.338,\"minDifficulty\":9,\"moneyAvailable\":931634032,\"moneyMax\":1500973400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":215,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"62.7.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":763,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":764,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":765,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":766,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":767,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":48990180,\"moneyMax\":1224754500,\"numOpenPortsRequired\":2,\"openPortCount\":4,\"requiredHackingSkill\":263,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"71.4.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37440]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":100641.22251659968,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.549,\"onlineExpGained\":242611.20000001276,\"onlineMoneyMade\":0,\"onlineRunningTime\":39346.40999996159,\"pid\":21,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///8dd24534-0b3c-4b96-afe6-351a495e0302\",\"moduleSequenceNumber\":14824}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ce3a9966-2309-4ecc-8abc-4c5f7197e002\",\"moduleSequenceNumber\":903}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":903,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":769,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":770,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":771,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///f843002e-ab41-4491-bbec-9e7d77b74b9a\",\"moduleSequenceNumber\":800}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":772,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"68.1.2.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":773,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":774,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":775,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":776,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":777,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":514,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"32.5.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":778,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":779,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":780,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":781,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":782,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":58}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"10.3.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":783,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":784,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":785,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":786,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":787,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":691,\"serverGrowth\":40}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"75.3.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":788,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":789,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":790,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":791,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":792,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"27.6.1.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,267180]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":22795.1101152,\"offlineMoneyMade\":0,\"offlineRunningTime\":43369.702000000005,\"onlineExpGained\":1731326.4000000334,\"onlineMoneyMade\":0,\"onlineRunningTime\":33820.41000005625,\"pid\":22,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":146,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///bc0b231d-59f9-4a62-a92b-47c141e5de85\",\"moduleSequenceNumber\":904}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":904,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":794,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":795,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":796,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":797,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":351,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"65.6.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,39348]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":142121.51573399946,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.551,\"onlineExpGained\":254975.04000001424,\"onlineMoneyMade\":0,\"onlineRunningTime\":41929.80999992259,\"pid\":23,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f4a7c223-f6b1-40d7-b620-3a275cba6f1f\",\"moduleSequenceNumber\":819}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///db4e9378-449f-4123-b52c-1f971c00752a\",\"moduleSequenceNumber\":905}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":905,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":799,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":800,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":801,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///74ac7e3a-56eb-4490-a99e-56e09c9bdf9c\",\"moduleSequenceNumber\":801}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":802,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":219,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"12.8.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":803,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":804,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":805,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":806,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\".\",\"moduleSequenceNumber\":807,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":535,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"56.3.2.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,8744]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31582.56034800008,\"offlineMoneyMade\":0,\"offlineRunningTime\":48311.553,\"onlineExpGained\":56661.11999999733,\"onlineMoneyMade\":0,\"onlineRunningTime\":41929.80999992259,\"pid\":24,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f4a7c223-f6b1-40d7-b620-3a275cba6f1f\",\"moduleSequenceNumber\":816}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///4759ace0-166a-4e01-8f28-717af5bd3727\",\"moduleSequenceNumber\":906}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":906,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":809,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":810,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":811,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///9827b468-70e6-40db-ae7c-8cf30a28677b\",\"moduleSequenceNumber\":802}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":812,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":58,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"75.4.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":813,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":814,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":815,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":816,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":817,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"25.7.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"55.1.9.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":818,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":819,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":820,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":821,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":822,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-0\",\"httpPortOpen\":false,\"ip\":\"33.7.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":173.4099999999987,\"pid\":9268,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":31,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a88a1a65-2cef-40b4-bdb3-958c6f274366\",\"moduleSequenceNumber\":907}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":76.81000000000056,\"pid\":9306,\"ramUsage\":1.7,\"server\":\"zombie-0\",\"threads\":5,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f460238-0559-4795-8bfc-693f1d8ef258\",\"moduleSequenceNumber\":43298}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b32a0476-a146-4455-8d6a-e130e4899df6\",\"moduleSequenceNumber\":12417}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":12417,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///1f460238-0559-4795-8bfc-693f1d8ef258\",\"moduleSequenceNumber\":43298}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-0\",\"moduleSequenceNumber\":43298,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a88a1a65-2cef-40b4-bdb3-958c6f274366\",\"moduleSequenceNumber\":907}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":907,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///df9ccf05-d9a3-4fa2-8edb-96444edca731\",\"moduleSequenceNumber\":930}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":930,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///33dd7d27-ddc2-4bdb-999a-c4d5c35a69f7\",\"moduleSequenceNumber\":805}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-0\",\"moduleSequenceNumber\":827,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-1\",\"httpPortOpen\":false,\"ip\":\"79.0.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":247.2099999999945,\"pid\":9230,\"ramUsage\":1.75,\"server\":\"zombie-1\",\"threads\":26,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a2a30c98-91f3-4902-a28e-01f98b09b186\",\"moduleSequenceNumber\":908}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.210000000000004,\"pid\":9336,\"ramUsage\":1.7,\"server\":\"zombie-1\",\"threads\":10,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bb386566-38b8-42b9-8faf-ef74562a9df9\",\"moduleSequenceNumber\":22126}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///800363ab-6f7d-42ae-a865-47232a19c558\",\"moduleSequenceNumber\":12418}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":12418,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///bb386566-38b8-42b9-8faf-ef74562a9df9\",\"moduleSequenceNumber\":22126}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-1\",\"moduleSequenceNumber\":22126,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///a2a30c98-91f3-4902-a28e-01f98b09b186\",\"moduleSequenceNumber\":908}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":908,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///962cd485-e75f-47ad-96e5-a00c29146f55\",\"moduleSequenceNumber\":931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":931,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///9a0e78ff-493b-4b79-b3a3-1f25c7d94ff1\",\"moduleSequenceNumber\":806}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-1\",\"moduleSequenceNumber\":832,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-2\",\"httpPortOpen\":false,\"ip\":\"0.1.8.6\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1017.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":222.00999999999593,\"pid\":9240,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":42,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0a264696-2586-4836-9b47-5f7f85955999\",\"moduleSequenceNumber\":20359}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":206.8099999999968,\"pid\":9249,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":101,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f9e64061-4aaf-4901-905a-3efd5c8b4c1b\",\"moduleSequenceNumber\":909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.01000000000087,\"pid\":9291,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":210,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f9e64061-4aaf-4901-905a-3efd5c8b4c1b\",\"moduleSequenceNumber\":909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":77.81000000000057,\"pid\":9304,\"ramUsage\":1.7,\"server\":\"zombie-2\",\"threads\":123,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5f6e5283-5389-4c3e-8752-20f8696c7e84\",\"moduleSequenceNumber\":30949}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.20999999999995,\"pid\":9327,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":88,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f9e64061-4aaf-4901-905a-3efd5c8b4c1b\",\"moduleSequenceNumber\":909}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.209999999999965,\"pid\":9330,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":21,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0a264696-2586-4836-9b47-5f7f85955999\",\"moduleSequenceNumber\":20359}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0a264696-2586-4836-9b47-5f7f85955999\",\"moduleSequenceNumber\":20359}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":20359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///5f6e5283-5389-4c3e-8752-20f8696c7e84\",\"moduleSequenceNumber\":30949}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-2\",\"moduleSequenceNumber\":30949,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///f9e64061-4aaf-4901-905a-3efd5c8b4c1b\",\"moduleSequenceNumber\":909}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":909,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///1a8e24b2-04a6-45a6-a79c-ef4fd0a77357\",\"moduleSequenceNumber\":932}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":932,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-2\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-3\",\"httpPortOpen\":false,\"ip\":\"73.6.5.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1023.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.209999999999976,\"pid\":9331,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":585,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ed02a53a-6ed5-4890-9f72-f66a0b4cf7a1\",\"moduleSequenceNumber\":910}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d50243f9-e0b0-4c20-9426-5502aabfde8a\",\"moduleSequenceNumber\":20360}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":20360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///16150c75-017a-4a15-ac96-1ad46aaccec7\",\"moduleSequenceNumber\":902}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-3\",\"moduleSequenceNumber\":839,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///ed02a53a-6ed5-4890-9f72-f66a0b4cf7a1\",\"moduleSequenceNumber\":910}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":910,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///b7e1ea88-3b97-4056-9eea-8d72e0212f90\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-3\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-4\",\"httpPortOpen\":false,\"ip\":\"53.0.4.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1012.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":261.2099999999937,\"pid\":9227,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":211,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51adad7f-9732-4d0e-9a72-f9c39da3a7ec\",\"moduleSequenceNumber\":911}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":9241,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":9,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e0dd763a-9739-4f43-a0a4-31d6e05aac41\",\"moduleSequenceNumber\":20361}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":9319,\"ramUsage\":1.7,\"server\":\"zombie-4\",\"threads\":222,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0d1a5ad3-4f26-4b2a-9c28-bf6625240c0c\",\"moduleSequenceNumber\":82989}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":9322,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":128,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51adad7f-9732-4d0e-9a72-f9c39da3a7ec\",\"moduleSequenceNumber\":911}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":23.20999999999995,\"pid\":9328,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51adad7f-9732-4d0e-9a72-f9c39da3a7ec\",\"moduleSequenceNumber\":911}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e0dd763a-9739-4f43-a0a4-31d6e05aac41\",\"moduleSequenceNumber\":20361}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":20361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///0d1a5ad3-4f26-4b2a-9c28-bf6625240c0c\",\"moduleSequenceNumber\":82989}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-4\",\"moduleSequenceNumber\":82989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///51adad7f-9732-4d0e-9a72-f9c39da3a7ec\",\"moduleSequenceNumber\":911}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":911,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///c691ecd7-623a-45a1-9a1d-1f6f9262e6f0\",\"moduleSequenceNumber\":934}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":934,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-4\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-5\",\"httpPortOpen\":false,\"ip\":\"12.8.2.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1014.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":231.00999999999542,\"pid\":9236,\"ramUsage\":1.75,\"server\":\"zombie-5\",\"threads\":130,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cd6a4118-3a1f-47fa-aaec-7b1fb50ab8c8\",\"moduleSequenceNumber\":913}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.21000000000063,\"pid\":9281,\"ramUsage\":1.75,\"server\":\"zombie-5\",\"threads\":247,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80481fc0-6c28-4c1f-b2ff-5a68fb093df1\",\"moduleSequenceNumber\":912}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000072,\"pid\":9298,\"ramUsage\":1.7,\"server\":\"zombie-5\",\"threads\":193,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8ac2c9ed-b70a-49ae-8ce9-f5a609382416\",\"moduleSequenceNumber\":157078}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":9332,\"ramUsage\":1.75,\"server\":\"zombie-5\",\"threads\":15,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80481fc0-6c28-4c1f-b2ff-5a68fb093df1\",\"moduleSequenceNumber\":912}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///cd6a4118-3a1f-47fa-aaec-7b1fb50ab8c8\",\"moduleSequenceNumber\":913}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8ac2c9ed-b70a-49ae-8ce9-f5a609382416\",\"moduleSequenceNumber\":157078}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-5\",\"moduleSequenceNumber\":157078,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///80481fc0-6c28-4c1f-b2ff-5a68fb093df1\",\"moduleSequenceNumber\":912}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///64a3ada9-692c-4372-b4e3-8f28ad2cfdc6\",\"moduleSequenceNumber\":935}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":935,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-5\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-6\",\"httpPortOpen\":false,\"ip\":\"75.1.6.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4054.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":616.0100000000032,\"pid\":9129,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e90915a0-a378-460b-96bb-392efffabaac\",\"moduleSequenceNumber\":917}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":325.80999999999005,\"pid\":9208,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":62,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6643d233-1b10-4dcc-a02f-b226e3563704\",\"moduleSequenceNumber\":916}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":139.21000000000063,\"pid\":9282,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":737,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6643d233-1b10-4dcc-a02f-b226e3563704\",\"moduleSequenceNumber\":916}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87.81000000000071,\"pid\":9299,\"ramUsage\":1.7,\"server\":\"zombie-6\",\"threads\":282,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///402ae11c-336c-4f2c-a5f6-474b496e2063\",\"moduleSequenceNumber\":914}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":9323,\"ramUsage\":1.7,\"server\":\"zombie-6\",\"threads\":521,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///402ae11c-336c-4f2c-a5f6-474b496e2063\",\"moduleSequenceNumber\":914}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29.40999999999993,\"pid\":9324,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":708,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6643d233-1b10-4dcc-a02f-b226e3563704\",\"moduleSequenceNumber\":916}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.209999999999983,\"pid\":9333,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":14,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6643d233-1b10-4dcc-a02f-b226e3563704\",\"moduleSequenceNumber\":916}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///e90915a0-a378-460b-96bb-392efffabaac\",\"moduleSequenceNumber\":917}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":917,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///402ae11c-336c-4f2c-a5f6-474b496e2063\",\"moduleSequenceNumber\":914}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-6\",\"moduleSequenceNumber\":914,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///6643d233-1b10-4dcc-a02f-b226e3563704\",\"moduleSequenceNumber\":916}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":916,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///bf95413e-1892-434d-a5ab-81fa4ea03f38\",\"moduleSequenceNumber\":936}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":936,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-6\",\"moduleSequenceNumber\":857,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-7\",\"httpPortOpen\":false,\"ip\":\"42.4.4.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4073.15,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":202.80999999999702,\"pid\":9252,\"ramUsage\":1.75,\"server\":\"zombie-7\",\"threads\":107,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d8b16335-2ffc-444d-993a-033d0ff73b78\",\"moduleSequenceNumber\":918}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.6099999999984,\"pid\":9262,\"ramUsage\":1.75,\"server\":\"zombie-7\",\"threads\":1652,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5c4c15cb-cdc7-4b23-9893-11ccae64b610\",\"moduleSequenceNumber\":920}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":9320,\"ramUsage\":1.7,\"server\":\"zombie-7\",\"threads\":437,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9017a4df-a469-4331-81d9-63302d0aa2f1\",\"moduleSequenceNumber\":30066}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.209999999999987,\"pid\":9334,\"ramUsage\":1.75,\"server\":\"zombie-7\",\"threads\":144,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5c4c15cb-cdc7-4b23-9893-11ccae64b610\",\"moduleSequenceNumber\":920}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///d8b16335-2ffc-444d-993a-033d0ff73b78\",\"moduleSequenceNumber\":918}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///9017a4df-a469-4331-81d9-63302d0aa2f1\",\"moduleSequenceNumber\":30066}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-7\",\"moduleSequenceNumber\":30066,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///5c4c15cb-cdc7-4b23-9893-11ccae64b610\",\"moduleSequenceNumber\":920}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":920,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ac6a4303-83bf-4ca1-aafa-36574a5f2646\",\"moduleSequenceNumber\":937}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":937,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-7\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-8\",\"httpPortOpen\":false,\"ip\":\"65.4.9.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4082.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":325.80999999999005,\"pid\":9209,\"ramUsage\":1.75,\"server\":\"zombie-8\",\"threads\":265,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///339eb2b3-9366-45fd-b41a-1e81531d233a\",\"moduleSequenceNumber\":924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.6099999999984,\"pid\":9263,\"ramUsage\":1.75,\"server\":\"zombie-8\",\"threads\":1383,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///339eb2b3-9366-45fd-b41a-1e81531d233a\",\"moduleSequenceNumber\":924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":103.01000000000093,\"pid\":9289,\"ramUsage\":1.7,\"server\":\"zombie-8\",\"threads\":221,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7d9a4574-52b4-481b-a25e-1e9526a01ddb\",\"moduleSequenceNumber\":925}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.01000000000076,\"pid\":9293,\"ramUsage\":1.75,\"server\":\"zombie-8\",\"threads\":54,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///24dd286e-bbf1-48a3-ba6c-8a02a9c553a9\",\"moduleSequenceNumber\":921}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.610000000000355,\"pid\":9308,\"ramUsage\":1.75,\"server\":\"zombie-8\",\"threads\":382,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///339eb2b3-9366-45fd-b41a-1e81531d233a\",\"moduleSequenceNumber\":924}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":9316,\"ramUsage\":1.7,\"server\":\"zombie-8\",\"threads\":35,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7d9a4574-52b4-481b-a25e-1e9526a01ddb\",\"moduleSequenceNumber\":925}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///24dd286e-bbf1-48a3-ba6c-8a02a9c553a9\",\"moduleSequenceNumber\":921}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-8\",\"moduleSequenceNumber\":921,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///7d9a4574-52b4-481b-a25e-1e9526a01ddb\",\"moduleSequenceNumber\":925}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-8\",\"moduleSequenceNumber\":925,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///339eb2b3-9366-45fd-b41a-1e81531d233a\",\"moduleSequenceNumber\":924}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-8\",\"moduleSequenceNumber\":924,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///69f940ed-168f-456e-bee3-33edb877ba82\",\"moduleSequenceNumber\":938}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-8\",\"moduleSequenceNumber\":938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-8\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-9\",\"httpPortOpen\":false,\"ip\":\"71.0.2.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4044.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":239.20999999999495,\"pid\":9232,\"ramUsage\":1.75,\"server\":\"zombie-9\",\"threads\":164,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///11d28c1e-6e92-4120-bd73-379e41bddd6c\",\"moduleSequenceNumber\":946}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.40999999999897,\"pid\":9272,\"ramUsage\":1.75,\"server\":\"zombie-9\",\"threads\":3,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fd80658-2e29-4db6-915a-41447d38d43c\",\"moduleSequenceNumber\":926}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":114.01000000000109,\"pid\":9286,\"ramUsage\":1.7,\"server\":\"zombie-9\",\"threads\":141,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///553b4d9c-7a5d-4fbe-b7e2-61a98de06837\",\"moduleSequenceNumber\":945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000027,\"pid\":9312,\"ramUsage\":1.75,\"server\":\"zombie-9\",\"threads\":1016,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fd80658-2e29-4db6-915a-41447d38d43c\",\"moduleSequenceNumber\":926}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":9317,\"ramUsage\":1.75,\"server\":\"zombie-9\",\"threads\":109,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///11d28c1e-6e92-4120-bd73-379e41bddd6c\",\"moduleSequenceNumber\":946}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.40999999999997,\"pid\":9318,\"ramUsage\":1.7,\"server\":\"zombie-9\",\"threads\":865,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///553b4d9c-7a5d-4fbe-b7e2-61a98de06837\",\"moduleSequenceNumber\":945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.209999999999948,\"pid\":9326,\"ramUsage\":1.75,\"server\":\"zombie-9\",\"threads\":42,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fd80658-2e29-4db6-915a-41447d38d43c\",\"moduleSequenceNumber\":926}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///11d28c1e-6e92-4120-bd73-379e41bddd6c\",\"moduleSequenceNumber\":946}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-9\",\"moduleSequenceNumber\":946,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///553b4d9c-7a5d-4fbe-b7e2-61a98de06837\",\"moduleSequenceNumber\":945}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-9\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4fd80658-2e29-4db6-915a-41447d38d43c\",\"moduleSequenceNumber\":926}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-9\",\"moduleSequenceNumber\":926,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///2cceca09-e4b6-4359-8562-896bca944492\",\"moduleSequenceNumber\":939}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-9\",\"moduleSequenceNumber\":939,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-9\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-10\",\"httpPortOpen\":false,\"ip\":\"81.5.5.9\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4091.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":239.20999999999495,\"pid\":9233,\"ramUsage\":1.75,\"server\":\"zombie-10\",\"threads\":1240,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c7c71135-a2e9-43f7-bb57-76e56598aaa8\",\"moduleSequenceNumber\":947}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":178.6099999999984,\"pid\":9264,\"ramUsage\":1.75,\"server\":\"zombie-10\",\"threads\":201,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0a0ecc7a-4542-47a5-bafd-9e8734d83de1\",\"moduleSequenceNumber\":928}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":9321,\"ramUsage\":1.7,\"server\":\"zombie-10\",\"threads\":65,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2a73fdd8-a784-46e7-961f-e9dbb7f3da2a\",\"moduleSequenceNumber\":4918}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.209999999999955,\"pid\":9329,\"ramUsage\":1.75,\"server\":\"zombie-10\",\"threads\":300,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0a0ecc7a-4542-47a5-bafd-9e8734d83de1\",\"moduleSequenceNumber\":928}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.01,\"pid\":9337,\"ramUsage\":1.75,\"server\":\"zombie-10\",\"threads\":534,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0a0ecc7a-4542-47a5-bafd-9e8734d83de1\",\"moduleSequenceNumber\":928}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///c7c71135-a2e9-43f7-bb57-76e56598aaa8\",\"moduleSequenceNumber\":947}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-10\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///2a73fdd8-a784-46e7-961f-e9dbb7f3da2a\",\"moduleSequenceNumber\":4918}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-10\",\"moduleSequenceNumber\":4918,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///0a0ecc7a-4542-47a5-bafd-9e8734d83de1\",\"moduleSequenceNumber\":928}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-10\",\"moduleSequenceNumber\":928,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///203158aa-6698-44c3-87e7-c130aca0c170\",\"moduleSequenceNumber\":940}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-10\",\"moduleSequenceNumber\":940,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-10\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-11\",\"httpPortOpen\":false,\"ip\":\"48.5.6.5\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":4081.45,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":135.21000000000086,\"pid\":9285,\"ramUsage\":1.75,\"server\":\"zombie-11\",\"threads\":853,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4dae92ff-7d6b-4ada-b080-9faca851c515\",\"moduleSequenceNumber\":929}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":105.01000000000096,\"pid\":9288,\"ramUsage\":1.7,\"server\":\"zombie-11\",\"threads\":102,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f658250e-c97e-4c48-a541-afd89cac7c0a\",\"moduleSequenceNumber\":9329}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.0100000000009,\"pid\":9290,\"ramUsage\":1.75,\"server\":\"zombie-11\",\"threads\":213,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4dae92ff-7d6b-4ada-b080-9faca851c515\",\"moduleSequenceNumber\":929}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":93.01000000000079,\"pid\":9292,\"ramUsage\":1.75,\"server\":\"zombie-11\",\"threads\":74,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b3032276-e2ae-4b80-b07a-faf47eefdba4\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":56.61000000000027,\"pid\":9313,\"ramUsage\":1.75,\"server\":\"zombie-11\",\"threads\":929,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4dae92ff-7d6b-4ada-b080-9faca851c515\",\"moduleSequenceNumber\":929}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.21,\"pid\":9335,\"ramUsage\":1.7,\"server\":\"zombie-11\",\"threads\":169,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f658250e-c97e-4c48-a541-afd89cac7c0a\",\"moduleSequenceNumber\":9329}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b3032276-e2ae-4b80-b07a-faf47eefdba4\",\"moduleSequenceNumber\":948}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-11\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///f658250e-c97e-4c48-a541-afd89cac7c0a\",\"moduleSequenceNumber\":9329}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-11\",\"moduleSequenceNumber\":9329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4dae92ff-7d6b-4ada-b080-9faca851c515\",\"moduleSequenceNumber\":929}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-11\",\"moduleSequenceNumber\":929,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///58e7826d-49a9-4688-bf56-5ddd7eb9f3f5\",\"moduleSequenceNumber\":941}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-11\",\"moduleSequenceNumber\":941,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-11\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":111718.0132999368,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8143.615470092307,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":25513.739947958977,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":20034.237538892306,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":152002.47192697437,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":5119.843486151273}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":15160.301715254298}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":115564.15667198104}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":46826.741432781346}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":13640.269575382672}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":2,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":13998.944048998052}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"ll\":\"ls\",\"man\":\"help\",\"init\":\"wget http://localhost:8000/init.js init.js; wget http://localhost:8000/deployment/self-update.js deployment/self-update.js\",\"serverinfo\":\"run serverinfo.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":20,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"hh:mm:ss\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1642836933434","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642836933450"}}