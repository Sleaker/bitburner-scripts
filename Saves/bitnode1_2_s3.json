{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":740,\"hp\":15,\"max_hp\":15,\"strength\":52,\"defense\":52,\"dexterity\":53,\"agility\":53,\"charisma\":162,\"intelligence\":0,\"hacking_chance_mult\":1.4494171437900003,\"hacking_speed_mult\":1.3194144143316269,\"hacking_money_mult\":1.1951491599999997,\"hacking_grow_mult\":1.1951491599999997,\"hacking_exp\":2046395066.087763,\"strength_exp\":1532.9390672022685,\"defense_exp\":1532.9390672022685,\"dexterity_exp\":1542.7661811703686,\"agility_exp\":1542.7661811703686,\"charisma_exp\":24144.467623368182,\"intelligence_exp\":0,\"hacking_mult\":1.5226785921488404,\"strength_mult\":1.1951491599999997,\"defense_mult\":1.1951491599999997,\"dexterity_mult\":1.1951491599999997,\"agility_mult\":1.1951491599999997,\"charisma_mult\":1.3146640760000001,\"hacking_exp_mult\":2.222439620478,\"strength_exp_mult\":1.5118636873999998,\"defense_exp_mult\":1.5118636873999998,\"dexterity_exp_mult\":1.5118636873999998,\"agility_exp_mult\":1.5118636873999998,\"charisma_exp_mult\":1.5118636873999998,\"company_rep_mult\":1.9956600673680003,\"faction_rep_mult\":1.5118636873999998,\"money\":10331280931807.463,\"city\":\"Sector-12\",\"location\":\"MegaCorp\",\"jobs\":{\"Blade Industries\":\"Software Engineering Intern\",\"Joe's Guns\":\"Employee\",\"MegaCorp\":\"Software Engineering Intern\"},\"companyName\":\"MegaCorp\",\"currentServer\":\"home\",\"purchasedServers\":[\"zombie-0\",\"zombie-1\",\"zombie-2\",\"zombie-3\",\"zombie-4\",\"zombie-5\",\"zombie-6\",\"zombie-7\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515838.00000000076,\"ram\":64,\"totalMoneyGenerated\":2661866737.500503,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515837.60000000073,\"ram\":64,\"totalMoneyGenerated\":2661860060.345712,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515837.00000000076,\"ram\":64,\"totalMoneyGenerated\":2661855963.191082,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515834.60000000073,\"ram\":64,\"totalMoneyGenerated\":2661815956.613238,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515834.60000000073,\"ram\":64,\"totalMoneyGenerated\":2661809908.5252075,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515834.4000000007,\"ram\":64,\"totalMoneyGenerated\":2661682644.602168,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515831.4000000007,\"ram\":64,\"totalMoneyGenerated\":2661669281.468274,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515831.00000000076,\"ram\":64,\"totalMoneyGenerated\":2661667481.3158054,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515828.60000000073,\"ram\":64,\"totalMoneyGenerated\":2649977902.858809,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515826.80000000075,\"ram\":64,\"totalMoneyGenerated\":2650033558.6138816,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515826.4000000007,\"ram\":64,\"totalMoneyGenerated\":2650031733.3131905,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515825.20000000077,\"ram\":64,\"totalMoneyGenerated\":2650029827.949457,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515824.60000000073,\"ram\":64,\"totalMoneyGenerated\":2650024754.2021375,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":4,\"level\":200,\"moneyGainRatePerSecond\":5167.367465052363,\"onlineTimeSeconds\":515824.4000000007,\"ram\":64,\"totalMoneyGenerated\":2650023962.7693386,\"name\":\"hacknet-node-13\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\",\"NiteSec\",\"Tian Di Hui\",\"Blade Industries\",\"Slum Snakes\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"}],\"augmentations\":[{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"numPeopleKilled\":5,\"karma\":-23.85,\"crime_money_mult\":1.1951491599999997,\"crime_success_mult\":1.1951491599999997,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":20,\"workExpMult\":10,\"currentWorkFactionName\":\"Blade Industries\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.33336594307170003,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":1.1474657730010254,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":20.335322527373712,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":69.9954121530625,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":50,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":12200,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.3146640760000001,\"hacknet_node_money_mult\":1.3146640760000001,\"hacknet_node_purchase_cost_mult\":0.733546044,\"hacknet_node_ram_cost_mult\":0.8150511599999999,\"hacknet_node_core_cost_mult\":0.8150511599999999,\"hacknet_node_level_cost_mult\":0.8150511599999999,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1643359016574,\"totalPlaytime\":1923953800,\"playtimeSinceLastAug\":516553200,\"playtimeSinceLastBitnode\":702420600,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1237500000,\"corporation\":0,\"crime\":1792723.7399999988,\"gang\":0,\"hacking\":10346925755985.188,\"hacknet\":37194349773.81658,\"hacknet_expenses\":-456614101.75732577,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-30000000000,\"total\":10331280930807.463,\"work\":35123732.87618717,\"servers\":-3604480000,\"other\":-5315000000,\"augmentations\":-14737497125}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":5137500000,\"corporation\":0,\"crime\":1792723.7399999988,\"gang\":0,\"hacking\":10724411866244.527,\"hacknet\":62892769949.35099,\"hacknet_expenses\":-11258211830.636974,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":10335816417220.684,\"work\":97961989.11402662,\"servers\":-115345600141.54442,\"other\":-5627700000,\"augmentations\":-293293961520.2337}},\"scriptProdSinceLastAug\":1649554110522,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641754584653},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641754584662},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641754584664},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641754584666},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641754584668},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641754584671},{\"ID\":\"NS2\",\"unlockedOn\":1641754584674},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641754584677},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641754584679},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641754584682},{\"ID\":\"TOR\",\"unlockedOn\":1641754584684},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641845444497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641850365093},{\"ID\":\"NITESEC\",\"unlockedOn\":1641861956094},{\"ID\":\"FROZE\",\"unlockedOn\":1641875022751},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641960792866},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641969706253},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642038598392},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642042880540},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642121167108},{\"ID\":\"4S\",\"unlockedOn\":1642134698100},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642309956412},{\"ID\":\"DONATION\",\"unlockedOn\":1642364578003},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1642460741823},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1642564918740},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1642582018745},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1642585258746},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1642586518778},{\"ID\":\"SF1.1\",\"unlockedOn\":1642653271757}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":3,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"28.3.8.1\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"new-triads.lit\",\"the-new-god.lit\",\"the-hidden-world.lit\",\"brighter-than-the-sun.lit\",\"sector-12-crime.lit\",\"democracy-is-dead.lit\",\"simulated-reality.lit\",\"man-and-machine.lit\",\"secret-societies.lit\",\"tensions-in-tech-race.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\",\"history-of-synthoids.lit\",\"coded-intelligence.lit\",\"beyond-man.lit\",\"cost-of-immortality.lit\",\"alpha-omega.lit\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\",\"Formulas.exe\"],\"ramUsed\":6585.95,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"contracts.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":485599.702,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":29863.610000037,\"pid\":1,\"ramUsage\":29,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///23a49243-582f-4aae-aa2a-d70d6a4042f0\",\"moduleSequenceNumber\":455},{\"filename\":\"util.js\",\"url\":\"blob:file:///6311c587-f074-41bb-8d9c-0ec33edcb2f6\",\"moduleSequenceNumber\":451},{\"filename\":\"contracts.js\",\"url\":\"blob:file:///7e984d91-299b-4c4b-91f1-433439434025\",\"moduleSequenceNumber\":883}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"control.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1686923682.2168899,\"offlineMoneyMade\":0,\"offlineRunningTime\":485599.74799999996,\"onlineExpGained\":111373147.12812456,\"onlineMoneyMade\":1647992067920,\"onlineRunningTime\":30543.010000039467,\"pid\":2,\"ramUsage\":10.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///b375bb60-9104-419a-a6de-a533c0004702\",\"moduleSequenceNumber\":293112},{\"filename\":\"log.js\",\"url\":\"blob:file:///701ad488-a0ee-4406-a869-cb4b0e783c0e\",\"moduleSequenceNumber\":293099},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///1d15ad7b-4e33-4671-9092-5b52a980b858\",\"moduleSequenceNumber\":293109},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///a2d63980-385c-4fde-9828-bbb43e4ebab1\",\"moduleSequenceNumber\":293109},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///d40f4233-113a-4620-a0fe-4fe333d8de52\",\"moduleSequenceNumber\":293112},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///c26abb9b-7512-44cc-b285-6827f3dafdea\",\"moduleSequenceNumber\":293107},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a9449c0e-a20c-4797-8773-dd3d28342dee\",\"moduleSequenceNumber\":293112},{\"filename\":\"util.js\",\"url\":\"blob:file:///ebb42cf3-4423-4e2d-abec-c5ba72684c7c\",\"moduleSequenceNumber\":293108},{\"filename\":\"control.js\",\"url\":\"blob:file:///159bb2eb-8ee9-4d66-a83e-a40c076cc106\",\"moduleSequenceNumber\":293163}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1549.2100000002154,\"pid\":499,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":453,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///84ca9633-9977-426b-9e6b-b1396e87648c\",\"moduleSequenceNumber\":856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":261.6099999999937,\"pid\":827,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":4,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b94a3e12-10d0-404d-8c6e-94f504e9c1a3\",\"moduleSequenceNumber\":858}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":242.40999999999477,\"pid\":831,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":32,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b94a3e12-10d0-404d-8c6e-94f504e9c1a3\",\"moduleSequenceNumber\":858}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":161.80999999999935,\"pid\":849,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":2860,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///84ca9633-9977-426b-9e6b-b1396e87648c\",\"moduleSequenceNumber\":856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":113.61000000000108,\"pid\":857,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":5,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///84ca9633-9977-426b-9e6b-b1396e87648c\",\"moduleSequenceNumber\":856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":107.610000000001,\"pid\":862,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":284,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///84ca9633-9977-426b-9e6b-b1396e87648c\",\"moduleSequenceNumber\":856}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11.809999999999992,\"pid\":887,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":106,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3484ac3c-be14-4d4d-aae9-5135b50e7156\",\"moduleSequenceNumber\":859}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @type {import('./types/NetscriptDefinitions').NS}\\n */\\n\\n/**\\n * @class\\n */\\nexport class Logger {\\n\\n\\tconstructor(ns, debug = false) {\\n\\t\\tthis.ns = ns;\\n\\t\\tthis.debugEnabled = debug;\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\terror(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"ERROR  | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tfail(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"FAIL   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tinfo(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"INFO   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\twarn(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"WARNING| \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tsuccess(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"SUCCESS| \\\" + format, values);\\n\\t}\\n\\n\\t/**\\n\\t * \\n\\t * @param {string} format \\n\\t * @param {any[]} values \\n\\t */\\n\\tdebug(format, values) {\\n\\t\\tif (this.debugEnabled) {\\n\\t\\t\\tthis.ns.tprintf(\\\"DEBUG| \\\" + format, values);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"log.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":427,\"_hash\":\"d373aa5a5d9ab1f50dec82f92041c5fee046884dc0a599b37441f117e2c5d738\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b94a3e12-10d0-404d-8c6e-94f504e9c1a3\",\"moduleSequenceNumber\":858}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":858,\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3484ac3c-be14-4d4d-aae9-5135b50e7156\",\"moduleSequenceNumber\":859}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":859,\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///84ca9633-9977-426b-9e6b-b1396e87648c\",\"moduleSequenceNumber\":856}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":856,\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport { Logger } from \\\"./log.js\\\";\\nimport { exploits, numAvailableExploits, isExploitAvailable, runExploit } from \\\"./exploits.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {Logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"killall\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n */\\nasync function control(ns) {\\n\\t// initialize our logging system\\n\\tconst logger = new Logger(ns, false);\\n\\n\\tlet targets = await findNewServers(ns);\\n\\tlet runners = await findRunners(ns);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const runner of runners) {\\n\\t\\tif (runner.hostname !== \\\"home\\\") {\\n\\t\\t\\tns.killall(runner.hostname);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n    ns.print(\\\"Starting up with total threads: -> \\\" + threads.counts.maxThreads);\\n\\n\\twhile (true) {\\n\\t\\twhile(ns.peek(9) !== \\\"NULL PORT DATA\\\") {\\n\\t\\t\\tns.print(ns.readPort(9));\\n\\t\\t}\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (target.setup && target.isAtMinSecurity() && target.isAtMaxMoney()) {\\n\\t\\t\\t\\tns.print(\\\"-> Finished hack setup <- \\\" + target.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!target.setup && target.root && target.availableMoney < target.maxMoney * .15) {\\n\\t\\t\\t\\tns.print(\\\"-> temporarily stopping hacks <- \\\" + target.hostname);\\n\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\t\\tgetRoot(ns, target);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\tcounter = 0;\\n\\n\\t\\t\\trunners = await findRunners(ns);\\n\\t\\t\\tif (runners.length === 0) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t\\tfor (const target of targets) {\\n\\t\\t\\t\\tif (target.root) {\\n\\t\\t\\t\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tstartupTargetScripts(ns, target);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// re-sort the list so we are always using the best target\\n\\t\\t\\ttargets = targets.sort((a, b) => b.currentRating - a.currentRating);\\n\\t\\t}\\n\\n\\t\\tawait doHacks(runners, targets, ns, logger);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * @param {ns}\\n * @param {Zombie} zombie \\n */\\nfunction getRoot(ns, zombie) {\\n\\texploits.filter(exploit => isExploitAvailable(ns, exploit))\\n\\t\\t.map(exploit => exploit.substring(0, exploit.indexOf(\\\".\\\")))\\n\\t\\t.forEach(exploit => runExploit(ns, exploit, zombie.hostname));\\n\\tns.nuke(zombie.hostname);\\n\\tzombie.updateStats(ns);\\n\\tns.print(\\\"Rooted server: \\\" + zombie.hostname);\\n\\tns.tprintf(\\\"SUCCESS | Rooted server: %s\\\", zombie.hostname);\\n}\\n\\n/**\\n * \\n * @param {Server[]} runners \\n * @param {Zombie[]} targets\\n * @param {NS} ns\\n * @param {Logger} logger\\n */\\nasync function doHacks(runners, targets, ns, logger) {\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n\\n\\tfor (const server of runners) {\\n\\t\\tlet availableRunners = threads[server.hostname].maxThreads - threads[server.hostname].growRunners - threads[server.hostname].hackRunners - threads[server.hostname].weakenRunners;\\n\\t\\tif (availableRunners <= 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (!target.root || target.wantedGrowThreads === 0 && target.wantedHackThreads === 0 && target.wantedWeakenThreads === 0) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\t// ns.print(\\\"Weaken: \\\" + target.weakenRunners + \\\" Hack: \\\" + target.hackRunners + \\\"Grow: \\\" + target.growRunners);\\n\\t\\t\\tconst weakenScript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\t// ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.hostname);\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"weaken.js\\\", server.hostname, toWeaken, target.hostname);\\n\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tns.print(\\\"Failed to startup weaken on: \\\" + server.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ threads[server.hostname].weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\t// logger.warn(\\\"%j\\\", { weakRunners: threads[server.hostname].weakenRunners,\\n\\t\\t\\t\\t\\t// \\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t// \\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t// \\tserver: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" weaken.js -> \\\" + target.hostname + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"grow.js\\\", server.hostname, toGrow, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" grow.js -> \\\" + target.hostname + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> Sec: \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"hack.js\\\", server.hostname, toHack, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" hack.js -> \\\" + target.hostname + \\\" <- Money \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (availableRunners > 0 && server.hostname === \\\"home\\\") {\\n\\t\\t\\tlet shareScript = ns.getRunningScript(\\\"share.js\\\", server.hostname);\\n\\t\\t\\tif (!shareScript && ns.getServer(\\\"home\\\").maxRam - ns.getServer(\\\"home\\\").ramUsed > 32000) {\\n\\t\\t\\t\\tns.print(\\\"Spinning up new share with leftover runners on home.\\\");\\n\\t\\t\\t\\tns.run(\\\"share.js\\\", Math.ceil(availableRunners / 3));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"})\\n\\t\\t.map(server => new Zombie(server.server, ns, server.parent, server.depth));\\n\\n\\tfor (const target of allServers) {\\n\\t\\ttarget.setup = target.isAtMinSecurity() && target.isAtMaxMoney();\\n\\n\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\tgetRoot(ns, target);\\n\\t\\t}\\n\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\", \\\"earlyhack.js\\\"]);\\n\\t\\ttarget.updateStats(ns);\\n\\n\\t\\t// \\n\\t\\tif (target.maxRunningThreads === 0) continue;\\n\\n\\t\\tstartupTargetScripts(ns, target);\\n\\t}\\n\\treturn Promise.resolve(allServers.filter(target => target.maxMoney > 0).sort((a, b) => b.currentRating - a.currentRating));\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nasync function findRunners(ns) {\\n\\tlet runners = ns.scan(\\\"home\\\")\\n\\t\\t.filter(child => child.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(child => ns.getServer(child));\\n\\n\\tfor (const runner of runners) {\\n\\t\\tawait ns.scp([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"], runner.hostname);\\n\\t}\\n\\n\\trunners.push(ns.getServer(\\\"home\\\"));\\n\\treturn runners;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Server[]} runners\\n * @param {Zombie[]} targets\\n * @return {{counts: { growRunners: number[], weakenRunners: number[], hackRunners: number[], maxThreads: number, usedThreads: number}}} \\n */\\nfunction getThreadCounts(ns, runners, targets) {\\n\\t// initialize all of our data\\n\\tlet data = {\\n\\t\\tcounts: {\\n\\t\\t\\tmaxThreads: 0,\\n\\t\\t\\tusedThreads: 0\\n\\t\\t}\\n\\t};\\n\\tfor (let target of targets) {\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t\\ttarget.growRate = target.setup ? target.shouldGrow ? .9 : 0 : .84;\\n\\t\\ttarget.hackRate = target.setup ? 0 : .04;\\n\\t}\\n\\t// count the number of already running\\n\\tfor (const server of runners) {\\n\\t\\tlet maxServerThreads = Math.floor(server.maxRam / 1.75);\\n\\t\\tif (server.hostname === \\\"home\\\") {\\n\\t\\t\\tmaxServerThreads = Math.floor(maxServerThreads * 0.8);\\n\\t\\t}\\n\\t\\tdata[server.hostname] = { growRunners: 0, hackRunners: 0, weakenRunners: 0, maxThreads: maxServerThreads};\\n\\t\\tdata.counts.maxThreads += maxServerThreads;\\n\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tlet script = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// setup how many actual threads we can use for each target based on total capacity\\n\\tfor (const target of targets) {\\n\\t\\tconst totalTargetingThreads = Math.min(target.maxTargetingThreads, data.counts.maxThreads - data.counts.usedThreads);\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((totalTargetingThreads * target.growRate) - target.growRunners), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.ceil((totalTargetingThreads * target.hackRate) - target.hackRunners), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(totalTargetingThreads - target.wantedGrowThreads - target.wantedHackThreads - target.weakenRunners - target.hackRunners - target.growRunners, 0);\\n\\n\\t\\tdata.counts.usedThreads += totalTargetingThreads;\\n\\t}\\n\\n\\treturn data;\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Zombie} target \\n */\\nfunction startupTargetScripts(ns, target) {\\n\\t// if this is early game, run oldschool single target hacks against harakiri-sushi\\n\\tconst earlyThreads = Math.floor(target.memory / 2.2);\\n\\tif (ns.getPlayer().money < 5_000_000_000 && earlyThreads > 0 && ns.getServer(\\\"harakiri-sushi\\\").hasAdminRights) {\\n\\t\\tif (!ns.isRunning(\\\"earlyhack.js\\\", target.hostname)) {\\n\\t\\t\\tns.killall(target.hostname);\\n\\t\\t\\tns.exec(\\\"earlyhack.js\\\", target.hostname, earlyThreads);\\n\\t\\t}\\n\\t}  \\n\\t// foodnstuff has the best XP rate, so just target it for weakenloops\\n\\telse if (!ns.isRunning(\\\"weakenloop.js\\\", target.hostname, \\\"foodnstuff\\\") && target.maxRunningThreads > 0) {\\n\\t\\tns.killall(target.hostname);\\n\\t\\tns.exec(\\\"weakenloop.js\\\", target.hostname, target.maxRunningThreads, \\\"foodnstuff\\\");\\n\\t}\\n}\",\"filename\":\"control.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///df504a41-1d33-4a23-ab96-047531b5fb5b\",\"moduleSequenceNumber\":440},{\"filename\":\"log.js\",\"url\":\"blob:file:///b09e6f87-e7a8-4c17-8551-07945ed40084\",\"moduleSequenceNumber\":427},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///d56b7d0a-8b8e-4d60-8514-739fe5a0eb14\",\"moduleSequenceNumber\":437},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///63c649a4-1ef5-4b39-ac75-58ecf5a86a69\",\"moduleSequenceNumber\":437},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///67003293-688a-4bac-8e8b-015cb06c5197\",\"moduleSequenceNumber\":440},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///75c53ec3-a42d-41dc-a49d-dd461709f7d7\",\"moduleSequenceNumber\":435},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///c18d331d-f7e4-4201-889c-9f8e649a6ce7\",\"moduleSequenceNumber\":440},{\"filename\":\"util.js\",\"url\":\"blob:file:///9f03a915-769e-49e2-a3f8-92cc093ed43e\",\"moduleSequenceNumber\":436},{\"filename\":\"control.js\",\"url\":\"blob:file:///63743e32-3a8f-4a35-8d30-f028beb6b0c4\",\"moduleSequenceNumber\":854}],\"dependents\":[],\"ramUsage\":9.75,\"server\":\"home\",\"moduleSequenceNumber\":854,\"_hash\":\"99c579475e095fb68793a4b58cf51c0861e0348120f08dc3d4cd704a84dd05e3\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tns.getPurchasedServers();\\n\\tns.getPurchasedServerCost()\\n\\tns.getPurchasedServerMaxRam();\\n\\tns.purchaseProgram()\\n}\",\"filename\":\"servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":36.15,\"server\":\"home\",\"moduleSequenceNumber\":432,\"_hash\":\"b4b570dd4faa257518f373d8abc3d274cb1ef69085dcbe4901223364a111f453\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @public\\n */\\n interface Player {\\n    hacking: number;\\n    hp: number;\\n    max_hp: number;\\n    strength: number;\\n    defense: number;\\n    dexterity: number;\\n    agility: number;\\n    charisma: number;\\n    intelligence: number;\\n    hacking_chance_mult: number;\\n    hacking_speed_mult: number;\\n    hacking_money_mult: number;\\n    hacking_grow_mult: number;\\n    hacking_exp: number;\\n    strength_exp: number;\\n    defense_exp: number;\\n    dexterity_exp: number;\\n    agility_exp: number;\\n    charisma_exp: number;\\n    hacking_mult: number;\\n    strength_mult: number;\\n    defense_mult: number;\\n    dexterity_mult: number;\\n    agility_mult: number;\\n    charisma_mult: number;\\n    hacking_exp_mult: number;\\n    strength_exp_mult: number;\\n    defense_exp_mult: number;\\n    dexterity_exp_mult: number;\\n    agility_exp_mult: number;\\n    charisma_exp_mult: number;\\n    company_rep_mult: number;\\n    faction_rep_mult: number;\\n    numPeopleKilled: number;\\n    money: number;\\n    city: string;\\n    location: string;\\n    companyName: string;\\n    crime_money_mult: number;\\n    crime_success_mult: number;\\n    isWorking: boolean;\\n    workType: string;\\n    currentWorkFactionName: string;\\n    currentWorkFactionDescription: string;\\n    workHackExpGainRate: number;\\n    workStrExpGainRate: number;\\n    workDefExpGainRate: number;\\n    workDexExpGainRate: number;\\n    workAgiExpGainRate: number;\\n    workChaExpGainRate: number;\\n    workRepGainRate: number;\\n    workMoneyGainRate: number;\\n    workMoneyLossRate: number;\\n    workHackExpGained: number;\\n    workStrExpGained: number;\\n    workDefExpGained: number;\\n    workDexExpGained: number;\\n    workAgiExpGained: number;\\n    workChaExpGained: number;\\n    workRepGained: number;\\n    workMoneyGained: number;\\n    createProgramName: string;\\n    createProgramReqLvl: number;\\n    className: string;\\n    crimeType: string;\\n    work_money_mult: number;\\n    hacknet_node_money_mult: number;\\n    hacknet_node_purchase_cost_mult: number;\\n    hacknet_node_ram_cost_mult: number;\\n    hacknet_node_core_cost_mult: number;\\n    hacknet_node_level_cost_mult: number;\\n    hasWseAccount: boolean;\\n    hasTixApiAccess: boolean;\\n    has4SData: boolean;\\n    has4SDataTixApi: boolean;\\n    bladeburner_max_stamina_mult: number;\\n    bladeburner_stamina_gain_mult: number;\\n    bladeburner_analysis_mult: number;\\n    bladeburner_success_chance_mult: number;\\n    bitNodeN: number;\\n    totalPlaytime: number;\\n    playtimeSinceLastAug: number;\\n    playtimeSinceLastBitnode: number;\\n    jobs: any;\\n    factions: string[];\\n    tor: boolean;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  interface RunningScript {\\n    args: string[];\\n    filename: string;\\n    logs: string[];\\n    offlineExpGained: number;\\n    offlineMoneyMade: number;\\n    offlineRunningTime: number;\\n    onlineExpGained: number;\\n    onlineMoneyMade: number;\\n    onlineRunningTime: number;\\n    pid: number;\\n    ramUsage: number;\\n    server: string;\\n    threads: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of a crime.\\n   * @public\\n   */\\n  export interface CrimeStats {\\n    /** Number representing the difficulty of the crime. Used for success chance calculations */\\n    difficulty: number;\\n    /** Amount of karma lost for successfully committing this crime */\\n    karma: number;\\n    /** How many people die as a result of this crime */\\n    kills: number;\\n    /** How much money is given */\\n    money: number;\\n    /** Name of crime */\\n    name: number;\\n    /** Milliseconds it takes to attempt the crime */\\n    time: number;\\n    /** Description of the crime activity */\\n    type: string;\\n    /** hacking level impact on success change of the crime */\\n    hacking_success_weight: number;\\n    /** strength level impact on success change of the crime */\\n    strength_success_weight: number;\\n    /** defense level impact on success change of the crime */\\n    defense_success_weight: number;\\n    /** dexterity level impact on success change of the crime */\\n    dexterity_success_weight: number;\\n    /** agility level impact on success change of the crime */\\n    agility_success_weight: number;\\n    /** charisma level impact on success change of the crime */\\n    charisma_success_weight: number;\\n    /** hacking exp gained from crime */\\n    hacking_exp: number;\\n    /** strength exp gained from crime */\\n    strength_exp: number;\\n    /** defense exp gained from crime */\\n    defense_exp: number;\\n    /** dexterity exp gained from crime */\\n    dexterity_exp: number;\\n    /** agility exp gained from crime */\\n    agility_exp: number;\\n    /** charisma exp gained from crime */\\n    charisma_exp: number;\\n    /** intelligence exp gained from crime */\\n    intelligence_exp: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of an Augmentation.\\n   * @public\\n   */\\n  export interface AugmentationStats {\\n    /** Multipler to hacking skill */\\n    hacking_mult?: number;\\n    /** Multipler to strength skill */\\n    strength_mult?: number;\\n    /** Multipler to defense skill */\\n    defense_mult?: number;\\n    /** Multipler to dexterity skill */\\n    dexterity_mult?: number;\\n    /** Multipler to agility skill */\\n    agility_mult?: number;\\n    /** Multipler to charisma skill */\\n    charisma_mult?: number;\\n    /** Multipler to hacking experience gain rate */\\n    hacking_exp_mult?: number;\\n    /** Multipler to strength experience gain rate */\\n    strength_exp_mult?: number;\\n    /** Multipler to defense experience gain rate */\\n    defense_exp_mult?: number;\\n    /** Multipler to dexterity experience gain rate */\\n    dexterity_exp_mult?: number;\\n    /** Multipler to agility experience gain rate */\\n    agility_exp_mult?: number;\\n    /** Multipler to charisma experience gain rate */\\n    charisma_exp_mult?: number;\\n    /** Multipler to chance of successfully performing a hack */\\n    hacking_chance_mult?: number;\\n    /** Multipler to hacking speed */\\n    hacking_speed_mult?: number;\\n    /** Multipler to amount of money the player gains from hacking */\\n    hacking_money_mult?: number;\\n    /** Multipler to amount of money injected into servers using grow */\\n    hacking_grow_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    company_rep_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    faction_rep_mult?: number;\\n    /** Multipler to amount of money gained from crimes */\\n    crime_money_mult?: number;\\n    /** Multipler to crime success rate */\\n    crime_success_mult?: number;\\n    /** Multipler to amount of money gained from working */\\n    work_money_mult?: number;\\n    /** Multipler to amount of money produced by Hacknet Nodes */\\n    hacknet_node_money_mult?: number;\\n    /** Multipler to cost of purchasing a Hacknet Node */\\n    hacknet_node_purchase_cost_mult?: number;\\n    /** Multipler to cost of ram for a Hacknet Node */\\n    hacknet_node_ram_cost_mult?: number;\\n    /** Multipler to cost of core for a Hacknet Node */\\n    hacknet_node_core_cost_mult?: number;\\n    /** Multipler to cost of leveling up a Hacknet Node */\\n    hacknet_node_level_cost_mult?: number;\\n    /** Multipler to Bladeburner max stamina */\\n    bladeburner_max_stamina_mult?: number;\\n    /** Multipler to Bladeburner stamina gain rate */\\n    bladeburner_stamina_gain_mult?: number;\\n    /** Multipler to effectiveness in Bladeburner Field Analysis */\\n    bladeburner_analysis_mult?: number;\\n    /** Multipler to success chance in Bladeburner contracts/operations */\\n    bladeburner_success_chance_mult?: number;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link NS.hack | hack}, {@link NS.grow | grow}, and {@link NS.weaken | weaken}.\\n   * @public\\n   */\\n  export interface BasicHGWOptions {\\n    /** Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. */\\n    threads?: number;\\n    /** Set to true this action will affect the stock market. */\\n    stock?: boolean;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link CodingContract} attempt.\\n   * @public\\n   */\\n  export interface CodingAttemptOptions {\\n    /** If truthy, then the function will return a string that states the contract’s reward when it is successfully solved. */\\n    returnReward: boolean;\\n  }\\n  \\n  /**\\n   * Return value of {@link Sleeve.getSleevePurchasableAugs | getSleevePurchasableAugs}\\n   * @public\\n   */\\n  export interface AugmentPair {\\n    /** augmentation name */\\n    name: string;\\n    /** augmentation cost */\\n    cost: number;\\n  }\\n  \\n  /**\\n   * Value in map of {@link StockOrder}\\n   * @public\\n   */\\n  export interface StockOrderObject {\\n    /** Number of shares */\\n    shares: number;\\n    /** Price per share */\\n    price: number;\\n    /** Order type */\\n    type: string;\\n    /** Order position */\\n    position: string;\\n  }\\n  \\n  /**\\n   * Return value of {@link TIX.getOrders | getOrders}\\n   * @public\\n   */\\n  export interface StockOrder {\\n    /** Stock Symbol */\\n    [key: string]: StockOrderObject[];\\n  }\\n  \\n  /**\\n   * A single process on a server.\\n   * @public\\n   */\\n  export interface ProcessInfo {\\n    /** Script name. */\\n    filename: string;\\n    /** Number of threads script is running with */\\n    threads: number;\\n    /** Script's arguments */\\n    args: string[];\\n    /** Process ID */\\n    pid: number;\\n  }\\n  \\n  /**\\n   * Hack related multipliers.\\n   * @public\\n   */\\n  export interface HackingMultipliers {\\n    /** Player's hacking chance multiplier. */\\n    chance: number;\\n    /** Player's hacking speed multiplier. */\\n    speed: number;\\n    /** Player's hacking money stolen multiplier. */\\n    money: number;\\n    /** Player's hacking growth multiplier */\\n    growth: number;\\n  }\\n  \\n  /**\\n   * Hacknet related multipliers.\\n   * @public\\n   */\\n  export interface HacknetMultipliers {\\n    /** Player's hacknet production multiplier */\\n    production: number;\\n    /** Player's hacknet purchase cost multiplier */\\n    purchaseCost: number;\\n    /** Player's hacknet ram cost multiplier */\\n    ramCost: number;\\n    /** Player's hacknet core cost multiplier */\\n    coreCost: number;\\n    /** Player's hacknet level cost multiplier */\\n    levelCost: number;\\n  }\\n  \\n  /**\\n   * A single server.\\n   * @public\\n   */\\n  export interface Server {\\n    /**\\n     * How many CPU cores this server has. Maximum of 8.\\n     * Affects magnitude of grow and weaken.\\n     */\\n    cpuCores: number;\\n  \\n    /** Flag indicating whether the FTP port is open */\\n    ftpPortOpen: boolean;\\n  \\n    /** Flag indicating whether player has admin/root access to this server */\\n    hasAdminRights: boolean;\\n  \\n    /** Hostname. Must be unique */\\n    hostname: string;\\n  \\n    /** Flag indicating whether HTTP Port is open */\\n    httpPortOpen: boolean;\\n  \\n    /** IP Address. Must be unique */\\n    ip: string;\\n  \\n    /** Flag indicating whether player is curently connected to this server */\\n    isConnectedTo: boolean;\\n  \\n    /** RAM (GB) available on this server */\\n    maxRam: number;\\n  \\n    /**\\n     * Name of company/faction/etc. that this server belongs to.\\n     * Optional, not applicable to all Servers\\n     */\\n    organizationName: string;\\n  \\n    /** RAM (GB) used. i.e. unavailable RAM */\\n    ramUsed: number;\\n  \\n    /** Flag indicating whether SMTP Port is open */\\n    smtpPortOpen: boolean;\\n  \\n    /** Flag indicating whether SQL Port is open */\\n    sqlPortOpen: boolean;\\n  \\n    /** Flag indicating whether the SSH Port is open */\\n    sshPortOpen: boolean;\\n  \\n    /** Flag indicating whether this is a purchased server */\\n    purchasedByPlayer: boolean;\\n  \\n    /** Flag indicating whether this server has a backdoor installed by a player */\\n    backdoorInstalled: boolean;\\n  \\n    /**\\n     * Initial server security level\\n     * (i.e. security level when the server was created)\\n     */\\n    baseDifficulty: number;\\n  \\n    /** Server Security Level */\\n    hackDifficulty: number;\\n  \\n    /** Minimum server security level that this server can be weakened to */\\n    minDifficulty: number;\\n  \\n    /** How much money currently resides on the server and can be hacked */\\n    moneyAvailable: number;\\n  \\n    /** Maximum amount of money that this server can hold */\\n    moneyMax: number;\\n  \\n    /** Number of open ports required in order to gain admin/root access */\\n    numOpenPortsRequired: number;\\n  \\n    /** How many ports are currently opened on the server */\\n    openPortCount: number;\\n  \\n    /** Hacking level required to hack this server */\\n    requiredHackingSkill: number;\\n  \\n    /**\\n     * Parameter that affects how effectively this server's money can\\n     * be increased using the grow() Netscript function\\n     */\\n    serverGrowth: number;\\n  }\\n  \\n  /**\\n   * All multipliers affecting the difficulty of the current challenge.\\n   * @public\\n   */\\n  export interface BitNodeMultipliers {\\n    /** Influences how quickly the player's agility level (not exp) scales */\\n    AgilityLevelMultiplier: number;\\n    /** Influences the base cost to purchase an augmentation. */\\n    AugmentationMoneyCost: number;\\n    /** Influences the base rep the player must have with a faction to purchase an augmentation. */\\n    AugmentationRepCost: number;\\n    /** Influences how quickly the player can gain rank within Bladeburner. */\\n    BladeburnerRank: number;\\n    /** Influences the cost of skill levels from Bladeburner. */\\n    BladeburnerSkillCost: number;\\n    /** Influences how quickly the player's charisma level (not exp) scales */\\n    CharismaLevelMultiplier: number;\\n    /** Influences the experience gained for each ability when a player completes a class. */\\n    ClassGymExpGain: number;\\n    /** Influences the amount of money gained from completing Coding Contracts */\\n    CodingContractMoney: number;\\n    /** Influences the experience gained for each ability when the player completes working their job. */\\n    CompanyWorkExpGain: number;\\n    /** Influences how much money the player earns when completing working their job. */\\n    CompanyWorkMoney: number;\\n    /** Influences the valuation of corporations created by the player. */\\n    CorporationValuation: number;\\n    /** Influences the base experience gained for each ability when the player commits a crime. */\\n    CrimeExpGain: number;\\n    /** Influences the base money gained when the player commits a crime. */\\n    CrimeMoney: number;\\n    /** Influences how many Augmentations you need in order to get invited to the Daedalus faction */\\n    DaedalusAugsRequirement: number;\\n    /** Influences how quickly the player's defense level (not exp) scales */\\n    DefenseLevelMultiplier: number;\\n    /** Influences how quickly the player's dexterity level (not exp) scales */\\n    DexterityLevelMultiplier: number;\\n    /** Influences how much rep the player gains in each faction simply by being a member. */\\n    FactionPassiveRepGain: number;\\n    /** Influences the experience gained for each ability when the player completes work for a Faction. */\\n    FactionWorkExpGain: number;\\n    /** Influences how much rep the player gains when performing work for a faction. */\\n    FactionWorkRepGain: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data API */\\n    FourSigmaMarketDataApiCost: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) */\\n    FourSigmaMarketDataCost: number;\\n    /** Influences the experienced gained when hacking a server. */\\n    HackExpGain: number;\\n    /** Influences how quickly the player's hacking level (not experience) scales */\\n    HackingLevelMultiplier: number;\\n    /** Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) */\\n    HacknetNodeMoney: number;\\n    /** Influences how much money it costs to upgrade your home computer's RAM */\\n    HomeComputerRamCost: number;\\n    /** Influences how much money is gained when the player infiltrates a company. */\\n    InfiltrationMoney: number;\\n    /** Influences how much rep the player can gain from factions when selling stolen documents and secrets */\\n    InfiltrationRep: number;\\n    /** Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. */\\n    ManualHackMoney: number;\\n    /** Influence how much it costs to purchase a server */\\n    PurchasedServerCost: number;\\n    /** Influences the maximum number of purchased servers you can have */\\n    PurchasedServerLimit: number;\\n    /** Influences the maximum allowed RAM for a purchased server */\\n    PurchasedServerMaxRam: number;\\n    /** Influences the minimum favor the player must have with a faction before they can donate to gain rep. */\\n    RepToDonateToFaction: number;\\n    /** Influences how much money can be stolen from a server when a script performs a hack against it. */\\n    ScriptHackMoney: number;\\n    /** Influences the growth percentage per cycle against a server. */\\n    ServerGrowthRate: number;\\n    /** Influences the maxmimum money that a server can grow to. */\\n    ServerMaxMoney: number;\\n    /** Influences the initial money that a server starts with. */\\n    ServerStartingMoney: number;\\n    /** Influences the initial security level (hackDifficulty) of a server. */\\n    ServerStartingSecurity: number;\\n    /** Influences the weaken amount per invocation against a server. */\\n    ServerWeakenRate: number;\\n    /** Influences how quickly the player's strength level (not exp) scales */\\n    StrengthLevelMultiplier: number;\\n  }\\n  \\n  /**\\n   * Object representing all the values related to a hacknet node.\\n   * @public\\n   */\\n  export interface NodeStats {\\n    /** Node's name */\\n    name: string;\\n    /** Node's level */\\n    level: number;\\n    /** Node's RAM */\\n    ram: number;\\n    /** Node's used RAM */\\n    ramUsed: number;\\n    /** Node's number of cores */\\n    cores: number;\\n    /** Cache level. Only applicable for Hacknet Servers */\\n    cache: number;\\n    /** Hash Capacity provided by this Node. Only applicable for Hacknet Servers */\\n    hashCapacity: number;\\n    /** Node's production per second */\\n    production: number;\\n    /** Number of seconds since Node has been purchased */\\n    timeOnline: number;\\n    /** Total number of money Node has produced */\\n    totalProduction: number;\\n  }\\n  \\n  /**\\n   * Short summary of the players skills.\\n   * @public\\n   */\\n  export interface PlayerSkills {\\n    /** Hacking level */\\n    hacking: number;\\n    /** Strength level */\\n    strength: number;\\n    /** Defense level */\\n    defense: number;\\n    /** Dexterity level */\\n    dexterity: number;\\n    /** Agility level */\\n    agility: number;\\n    /** Chraisma level */\\n    charisma: number;\\n    /** Intelligence level */\\n    intelligence: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterMult {\\n    /** Agility stat */\\n    agility: number;\\n    /** Agility exp */\\n    agilityExp: number;\\n    /** Company reputation */\\n    companyRep: number;\\n    /** Money earned from crimes */\\n    crimeMoney: number;\\n    /** Crime success chance */\\n    crimeSuccess: number;\\n    /** Defense stat */\\n    defense: number;\\n    /** Defense exp */\\n    defenseExp: number;\\n    /** Dexterity stat */\\n    dexterity: number;\\n    /** Dexterity exp */\\n    dexterityExp: number;\\n    /** Faction reputation */\\n    factionRep: number;\\n    /** Hacking stat */\\n    hacking: number;\\n    /** Hacking exp */\\n    hackingExp: number;\\n    /** Strength stat */\\n    strength: number;\\n    /** Strength exp */\\n    strengthExp: number;\\n    /** Money earned from jobs */\\n    workMoney: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterInfo {\\n    /** Current BitNode number */\\n    bitnode: number;\\n    /** Name of city you are currently in */\\n    city: string;\\n    /** Array of factions you are currently a member of */\\n    factions: string[];\\n    /** Current health points */\\n    hp: number;\\n    /** Array of all companies at which you have jobs */\\n    company: string[];\\n    /** Array of job positions for all companies you are employed at. Same order as 'jobs' */\\n    jobTitle: string[];\\n    /** Maximum health points */\\n    maxHp: number;\\n    /** Boolean indicating whether or not you have a tor router */\\n    tor: boolean;\\n    /** Object with many of the player's multipliers from Augmentations/Source Files */\\n    mult: CharacterMult;\\n    /** Timed worked in ms */\\n    timeWorked: number;\\n    /** Hacking experience earned so far from work */\\n    workHackExpGain: number;\\n    /** Str experience earned so far from work */\\n    workStrExpGain: number;\\n    /** Def experience earned so far from work */\\n    workDefExpGain: number;\\n    /** Dex experience earned so far from work */\\n    workDexExpGain: number;\\n    /** Agi experience earned so far from work */\\n    workAgiExpGain: number;\\n    /** Cha experience earned so far from work */\\n    workChaExpGain: number;\\n    /** Reputation earned so far from work, if applicable */\\n    workRepGain: number;\\n    /** Money earned so far from work, if applicable */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SleeveWorkGains {\\n    /** Hacking exp gained from work */\\n    workHackExpGain: number;\\n    /** Strength exp gained from work */\\n    workStrExpGain: number;\\n    /** Defense exp gained from work, */\\n    workDefExpGain: number;\\n    /** Dexterity exp gained from work */\\n    workDexExpGain: number;\\n    /** Agility exp gained from work */\\n    workAgiExpGain: number;\\n    /** Charisma exp gained from work */\\n    workChaExpGain: number;\\n    /** Money gained from work */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SourceFileLvl {\\n    /** The number of the source file */\\n    n: number;\\n    /** The level of the source file */\\n    lvl: number;\\n  }\\n  \\n  /**\\n   * Bladeburner current action.\\n   * @public\\n   */\\n  export interface BladeburnerCurAction {\\n    /** Type of Action */\\n    type: string;\\n    /** Name of Action */\\n    name: string;\\n  }\\n  \\n  /**\\n   * Gang general info.\\n   * @public\\n   */\\n  export interface GangGenInfo {\\n    /** Name of faction that the gang belongs to (\\\"Slum Snakes\\\", etc.) */\\n    faction: string;\\n    /** Indicating whether or not it's a hacking gang */\\n    isHacking: boolean;\\n    /** Money earned per game cycle */\\n    moneyGainRate: number;\\n    /** Gang's power for territory warfare */\\n    power: number;\\n    /** Gang's respect */\\n    respect: number;\\n    /** Respect earned per game cycle */\\n    respectGainRate: number;\\n    /** Amount of territory held */\\n    territory: number;\\n    /** Clash chance */\\n    territoryClashChance: number;\\n    /** Gang's wanted level */\\n    wantedLevel: number;\\n    /** Wanted level gained/lost per game cycle (negative for losses) */\\n    wantedLevelGainRate: number;\\n    /** Indicating if territory warfare is enabled */\\n    territoryWarfareEngaged: boolean;\\n    /** Number indicating the current wanted penalty */\\n    wantedPenalty: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfoObject {\\n    /** Gang power */\\n    power: number;\\n    /** Gang territory, in decimal form */\\n    territory: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfo {\\n    \\\"Slum Snakes\\\": GangOtherInfoObject;\\n    Tetrads: GangOtherInfoObject;\\n    \\\"The Syndicate\\\": GangOtherInfoObject;\\n    \\\"The Dark Army\\\": GangOtherInfoObject;\\n    \\\"Speakers for the Dead\\\": GangOtherInfoObject;\\n    NiteSec: GangOtherInfoObject;\\n    \\\"The Black Hand\\\": GangOtherInfoObject;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member task.\\n   * @public\\n   */\\n  export interface GangTaskStats {\\n    /** Task name */\\n    name: string;\\n    /** Task Description */\\n    desc: string;\\n    /** Is a task of a hacking gang */\\n    isHacking: boolean;\\n    /** Is a task of a combat gang */\\n    isCombat: boolean;\\n    /** Base respect earned */\\n    baseRespect: number;\\n    /** Base wanted earned */\\n    baseWanted: number;\\n    /** Base money earned */\\n    baseMoney: number;\\n    /** Hacking skill impact on task scaling */\\n    hackWeight: number;\\n    /** Stength skill impact on task scaling */\\n    strWeight: number;\\n    /** Defense skill impact on task scaling */\\n    defWeight: number;\\n    /** Dexterity skill impact on task scaling */\\n    dexWeight: number;\\n    /** Agility skill impact on task scaling */\\n    agiWeight: number;\\n    /** Charisma skill impact on task scaling */\\n    chaWeight: number;\\n    /** Number representing the difficulty of the task */\\n    difficulty: number;\\n    /** Territory impact on task scaling */\\n    territory: GangTerritory;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member equipment.\\n   * @public\\n   */\\n  export interface EquipmentStats {\\n    /** Strength multiplier */\\n    str?: number;\\n    /** Defense multiplier */\\n    def?: number;\\n    /** Dexterity multiplier */\\n    dex?: number;\\n    /** Agility multiplier */\\n    agi?: number;\\n    /** Charisma multiplier */\\n    cha?: number;\\n    /** Hacking multiplier */\\n    hack?: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangTerritory {\\n    /** Money gain impact on task scaling */\\n    money: number;\\n    /** Respect gain impact on task scaling */\\n    respect: number;\\n    /** Wanted gain impact on task scaling */\\n    wanted: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberInfo {\\n    name: string;\\n    task: string;\\n    earnedRespect: number;\\n    hack: number;\\n    str: number;\\n    def: number;\\n    dex: number;\\n    agi: number;\\n    cha: number;\\n  \\n    hack_exp: number;\\n    str_exp: number;\\n    def_exp: number;\\n    dex_exp: number;\\n    agi_exp: number;\\n    cha_exp: number;\\n  \\n    hack_mult: number;\\n    str_mult: number;\\n    def_mult: number;\\n    dex_mult: number;\\n    agi_mult: number;\\n    cha_mult: number;\\n  \\n    hack_asc_mult: number;\\n    str_asc_mult: number;\\n    def_asc_mult: number;\\n    dex_asc_mult: number;\\n    agi_asc_mult: number;\\n    cha_asc_mult: number;\\n  \\n    hack_asc_points: number;\\n    str_asc_points: number;\\n    def_asc_points: number;\\n    dex_asc_points: number;\\n    agi_asc_points: number;\\n    cha_asc_points: number;\\n  \\n    upgrades: string[];\\n    augmentations: string[];\\n  \\n    respectGain: number;\\n    wantedLevelGain: number;\\n    moneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberAscension {\\n    /** Amount of respect lost from ascending */\\n    respect: number;\\n    /** Hacking multiplier gained from ascending */\\n    hack: number;\\n    /** Strength multiplier gained from ascending */\\n    str: number;\\n    /** Defense multiplier gained from ascending */\\n    def: number;\\n    /** Dexterity multiplier gained from ascending */\\n    dex: number;\\n    /** Agility multiplier gained from ascending */\\n    agi: number;\\n    /** Charisma multiplier gained from ascending */\\n    cha: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve stats.\\n   * @public\\n   */\\n  export interface SleeveSkills {\\n    /** Current shock of the sleeve [0-100] */\\n    shock: number;\\n    /** Current sync of the sleeve [0-100] */\\n    sync: number;\\n    /** Current hacking skill of the sleeve */\\n    hacking: number;\\n    /** Current strength of the sleeve */\\n    strength: number;\\n    /** Current defense of the sleeve */\\n    defense: number;\\n    /** Current dexterity of the sleeve */\\n    dexterity: number;\\n    /** Current agility of the sleeve */\\n    agility: number;\\n    /** Current charisma of the sleeve */\\n    charisma: number;\\n  }\\n  \\n  /**\\n   * Object representing sleeve information.\\n   * @public\\n   */\\n  export interface SleeveInformation {\\n    /** Location of the sleeve */\\n    city: string;\\n    /** Current hp of the sleeve */\\n    hp: number;\\n    /** Max hp of the sleeve */\\n    maxHp: number;\\n    /** Jobs available to the sleeve */\\n    jobs: string[];\\n    /** Job titles available to the sleeve */\\n    jobTitle: string[];\\n    /** Does this sleeve have access to the tor router */\\n    tor: boolean;\\n    /** Sleeve multipliers */\\n    mult: CharacterMult;\\n    /** Time spent on the current task in milliseconds */\\n    timeWorked: number;\\n    /** Earnings synchronized to other sleeves */\\n    earningsForSleeves: SleeveWorkGains;\\n    /** Earnings synchronized to the player */\\n    earningsForPlayer: SleeveWorkGains;\\n    /** Earnings for this sleeve */\\n    earningsForTask: SleeveWorkGains;\\n    /** Faction or company reputation gained for the current task */\\n    workRepGain: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve current task.\\n   * @public\\n   */\\n  export interface SleeveTask {\\n    /** Task type */\\n    task: string;\\n    /** Crime currently attempting, if any */\\n    crime: string;\\n    /** Location of the task, if any */\\n    location: string;\\n    /** Stat being trained at the gym, if any */\\n    gymStatType: string;\\n    /** Faction work type being performed, if any */\\n    factionWorkType: string;\\n  }\\n  \\n  /**\\n   * Stock market API\\n   * @public\\n   */\\n  export interface TIX {\\n    /**\\n     * Returns an array of the symbols of the tradable stocks\\n     *\\n     * @remarks RAM cost: 2 GB\\n     * @returns Array of the symbols of the tradable stocks.\\n     */\\n    getSymbols(): string[];\\n  \\n    /**\\n     * Returns the price of a stock\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * The stock’s price is the average of its bid and ask price.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns The price of a stock.\\n     */\\n    getPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the ask price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The ask price of a stock.\\n     */\\n    getAskPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the bid price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The bid price of a stock.\\n     */\\n    getBidPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the player’s position in a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Returns an array of four elements that represents the player’s position in a stock.\\n     *\\n     * The first element is the returned array is the number of shares the player owns of\\n     * the stock in the Long position. The second element in the array is the average price\\n     * of the player’s shares in the Long position.\\n     *\\n     * The third element in the array is the number of shares the player owns of the stock\\n     * in the Short position. The fourth element in the array is the average price of the\\n     * player’s Short position.\\n     *\\n     * All elements in the returned array are numeric.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * var pos = stock.getPosition(\\\"ECP\\\");\\n     * var shares      = pos[0];\\n     * var avgPx       = pos[1];\\n     * var sharesShort = pos[2];\\n     * var avgPxShort  = pos[3];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * const [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\\\"ECP\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns Array of four elements that represents the player’s position in a stock.\\n     */\\n    getPosition(sym: string): [number, number, number, number];\\n  \\n    /**\\n     * Returns the maximum number of shares of a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * This is the maximum amount of the stock that can be purchased\\n     * in both the Long and Short positions combined.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Maximum number of shares that the stock has.\\n     */\\n    getMaxShares(sym: string): number;\\n  \\n    /**\\n     * Calculates cost of buying stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much it would cost to buy a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchase.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Cost to buy a given number of shares of a stock.\\n     */\\n    getPurchaseCost(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Calculate profit of selling stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much you would gain from selling a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Gain from selling a given number of shares of a stock.\\n     */\\n    getSaleGain(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Buy stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase shares of a stock using a Market Order.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If this function successfully purchases the shares, it will return the stock price at which\\n     * each share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchased. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    buy(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell shares of a stock using a Market Order.\\n     *\\n     * If the specified number of shares in the function exceeds the amount that the player\\n     * actually owns, then this function will sell all owned shares. Remember that every\\n     * transaction on the stock exchange costs a certain commission fee.\\n     *\\n     * The net profit made from selling stocks with this function is reflected in the script’s\\n     * statistics. This net profit is calculated as:\\n     *\\n     *    shares * (sell_price - average_price_of_purchased_shares)\\n     *\\n     * If the sale is successful, this function will return the stock price at\\n     * which each share was sold. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sell(sym: string, shares: number): number;\\n  \\n    /**\\n     * Short stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If the purchase is successful, this function will return the stock price at which each\\n     * share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to short. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    short(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell short stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the specified number of shares exceeds the amount that the player actually owns,\\n     * then this function will sell all owned shares. Remember that every transaction on\\n     * the stock exchange costs a certain commission fee.\\n     *\\n     * If the sale is successful, this function will return the stock price at which each\\n     * share was sold. Otherwise it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sellShort(sym: string, shares: number): number;\\n  \\n    /**\\n     * Place order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Places an order on the stock market. This function only works for Limit and Stop Orders.\\n     *\\n     * The ability to place limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * Returns true if the order is successfully placed, and false otherwise.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns True if the order is successfully placed, and false otherwise.\\n     */\\n    placeOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\\n  \\n    /**\\n     * Cancel order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Cancels an oustanding Limit or Stop order on the stock market.\\n     *\\n     * The ability to use limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     */\\n    cancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\\n  \\n    /**\\n     * Returns your order book for the stock market.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * This is an object containing information for all the Limit and Stop Orders you have in the stock market.\\n     * The object has the following structure:\\n     *\\n     * ```ts\\n     * {\\n     *  string1: [ // Array of orders for this stock\\n     *      {\\n     *          shares: Order quantity\\n     *          price: Order price\\n     *          type: Order type\\n     *          position: Either \\\"L\\\" or \\\"S\\\" for Long or Short position\\n     *      },\\n     *      {\\n     *          ...\\n     *      },\\n     *      ...\\n     *  ],\\n     *  string2: [ // Array of orders for this stock\\n     *      ...\\n     *  ],\\n     *  ...\\n     * }\\n     * ```\\n     * The “Order type” property can have one of the following four values: \\\"Limit Buy Order\\\", \\\"Limit Sell Order\\\", \\\"Stop Buy Order\\\", \\\"Stop Sell Order\\\".\\n     * Note that the order book will only contain information for stocks that you actually have orders in.\\n     *\\n     * @example\\n     * ```ts\\n     * \\\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a “NVMD” property.\\\"\\n     * {\\n     *  ECP: [\\n     *      {\\n     *          shares: 5,\\n     *          price: 100,000\\n     *          type: \\\"Stop Buy Order\\\",\\n     *          position: \\\"S\\\",\\n     *      },\\n     *      {\\n     *          shares: 25,\\n     *          price: 125,000\\n     *          type: \\\"Limit Sell Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     *  SYSC: [\\n     *      {\\n     *          shares: 100,\\n     *          price: 10,000\\n     *          type: \\\"Limit Buy Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     * }\\n     * ```\\n     * @returns Object containing information for all the Limit and Stop Orders you have in the stock market.\\n     */\\n    getOrders(): StockOrder;\\n  \\n    /**\\n     * Returns the volatility of the specified stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Volatility represents the maximum percentage by which a stock’s price can change every tick.\\n     * The volatility is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Volatility of the specified stock.\\n     */\\n    getVolatility(sym: string): number;\\n  \\n    /**\\n     * Returns the probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * The probability is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\\n     *\\n     * In other words, if this function returned 0.30 for a stock, then this means that the stock’s price has a\\n     * 30% chance of increasing and a 70% chance of decreasing during the next tick.\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     */\\n    getForecast(sym: string): number;\\n  \\n    /**\\n     * Purchase 4S Market Data Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketData(): boolean;\\n  \\n    /**\\n     * Purchase 4S Market Data TIX API Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketDataTixApi(): boolean;\\n  }\\n  \\n  /**\\n   * Singularity API\\n   * @remarks\\n   * This API requires Source-File 4 level 1 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\\n   * @public\\n   */\\n  export interface Singularity {\\n    /**\\n     * Take university class.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start taking a course at a university.\\n     * If you are already in the middle of some “working” action (such as working at a\\n     * company, for a faction, or on a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these universities and classes are the same as\\n     * if you were to manually visit and take these classes.\\n     *\\n     * @param universityName - Name of university. You must be in the correct city for whatever university you specify.\\n     * @param courseName - Name of course.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    universityCourse(universityName: string, courseName: string): boolean;\\n  \\n    /**\\n     * Workout at the gym.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n  \\n     * This function will automatically set you to start working out at a gym to train\\n     * a particular stat. If you are already in the middle of some “working” action\\n     * (such as working at a company, for a faction, or on a program), then running\\n     * this function will automatically cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these gyms are the same as if you were\\n     * to manually visit these gyms and train\\n     *\\n     * @param gymName - Name of gym. You must be in the correct city for whatever gym you specify.\\n     * @param stat - The stat you want to train.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    gymWorkout(gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Travel to another city.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows the player to travel to any city. The cost for using this\\n     * function is the same as the cost for traveling through the Travel Agency.\\n     *\\n     * @param city - City to travel to.\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    travelToCity(city: string): boolean;\\n  \\n    /**\\n     * Purchase the TOR router.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase a TOR router. The cost for\\n     * purchasing a TOR router using this function is the same as if you were to\\n     * manually purchase one.\\n     *\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    purchaseTor(): boolean;\\n  \\n    /**\\n     * Purchase a program from the dark web.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase programs. You MUST have a\\n     * TOR router in order to use this function. The cost of purchasing programs\\n     * using this function is the same as if you were purchasing them through the Dark\\n     * Web using the Terminal buy command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @param programName - Name of program to purchase.\\n     * @returns True if the specified program is purchased, and false otherwise.\\n     */\\n    purchaseProgram(programName: string): boolean;\\n  \\n    /**\\n     * Check if the player is busy.\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns a boolean indicating whether or not the player is currently performing an\\n     * ‘action’. These actions include working for a company/faction, studying at a univeristy,\\n     * working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\\n     *\\n     * @returns True if the player is currently performing an ‘action’, false otherwise.\\n     */\\n    isBusy(): boolean;\\n  \\n    /**\\n     * Stop the current action.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to end whatever ‘action’ the player is currently performing.\\n     * The player will receive whatever money/experience/etc. he has earned from that action.\\n     *\\n     * The actions that can be stopped with this function are:\\n     *\\n     * * Studying at a university\\n     * * Working for a company/faction\\n     * * Creating a program\\n     * * Committing a Crime\\n     *\\n     * This function will return true if the player’s action was ended.\\n     * It will return false if the player was not performing an action when this function was called.\\n     *\\n     * @returns True if the player’s action was ended, false if the player was not performing an action.\\n     */\\n    stopAction(): boolean;\\n  \\n    /**\\n     * Upgrade home computer RAM.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of RAM on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeRam(): boolean;\\n  \\n    /**\\n     * Upgrade home computer cores.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of cores on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeCores(): boolean;\\n  \\n    /**\\n     * Get the price of upgrading home RAM.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer RAM.\\n     *\\n     * @returns Cost of upgrading the player’s home computer RAM.\\n     */\\n    getUpgradeHomeRamCost(): number;\\n  \\n    /**\\n     * Get the price of upgrading home cores.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer cores.\\n     *\\n     * @returns Cost of upgrading the player’s home computer cores.\\n     */\\n    getUpgradeHomeCoresCost(): number;\\n  \\n    /**\\n     * Work for a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working at the company\\n     * at which you are employed. If you are already in the middle of some “working”\\n     * action (such as working for a faction, training at a gym, or creating a program),\\n     * then running this function will automatically cancel that action and give you\\n     * your earnings.\\n     *\\n     * This function will return true if the player starts working, and false otherwise.\\n     *\\n     * Note that when you are working for a company, you will not actually receive your earnings (reputation, money, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    workForCompany();\\n     *    sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    ns.workForCompany();\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @param companyName - Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForCompany(companyName?: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Apply for a job at a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically try to apply to the specified company\\n     * for a position in the specified field. This function can also be used to\\n     * apply for promotions by specifying the company and field you are already\\n     * employed at.\\n     *\\n     * This function will return true if you successfully get a job/promotion,\\n     * and false otherwise. Note that if you are trying to use this function to\\n     * apply for a promotion and you don’t get one, it will return false.\\n     *\\n     * @param companyName - Name of company to apply to.\\n     * @param field - Field to which you want to apply.\\n     * @returns True if the player successfully get a job/promotion, and false otherwise.\\n     */\\n    applyToCompany(companyName: string, field: string): boolean;\\n  \\n    /**\\n     * Get company reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of reputation you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of reputation you have at the specified company.\\n     */\\n    getCompanyRep(companyName: string): number;\\n  \\n    /**\\n     * Get company favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you have at the specified company.\\n     */\\n    getCompanyFavor(companyName: string): number;\\n  \\n    /**\\n     * Get company favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you will gain for the specified\\n     * company when you reset by installing Augmentations.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you gain at the specified company when you reset by installing Augmentations.\\n     */\\n    getCompanyFavorGain(companyName: string): number;\\n  \\n    /**\\n     * List all current faction invitations.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array with the name of all Factions you currently have oustanding invitations from.\\n     *\\n     * @returns Array with the name of all Factions you currently have oustanding invitations from.\\n     */\\n    checkFactionInvitations(): string[];\\n  \\n    /**\\n     * Join a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically accept an invitation from a faction and join it.\\n     *\\n     * @param faction - Name of faction to join.\\n     * @returns True if player joined the faction, and false otherwise.\\n     */\\n    joinFaction(faction: string): boolean;\\n  \\n    /**\\n     * Work for a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working for the specified faction.\\n     * Obviously, you must be a member of the faction or else this function will fail. If\\n     * you are already in the middle of some “working” action (such as working for a company,\\n     * training at a gym, or creating a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * This function will return true if you successfully start working for the specified faction, and false otherwise.\\n     *\\n     * Note that when you are working for a faction, you will not actually receive your earnings (reputation, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getFactionRep(FACTION NAME) < VALUE) {\\n     *    workForFaction(FACNAME, WORKTYPE);\\n     *    sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getFactionRep(FACTION NAME) < VALUE) {\\n     *    ns.workForFaction(FACNAME, WORKTYPE);\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @param faction - Name of faction to work for.\\n     * @param workType - Type of work to perform for the faction.\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForFaction(faction: string, workType: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Get faction reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of reputation you have for the specified faction.\\n     *\\n     * @param faction - Name of faction to work for.\\n     * @returns Amount of reputation you have for the specified faction.\\n     */\\n    getFactionRep(faction: string): number;\\n  \\n    /**\\n     * Get faction favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you have for the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you have for the specified faction.\\n     */\\n    getFactionFavor(faction: string): number;\\n  \\n    /**\\n     * Get faction favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you will gain for the specified\\n     * faction when you reset by installing Augmentations.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you will gain for the specified faction when you reset by installing Augmentations.\\n     */\\n    getFactionFavorGain(faction: string): number;\\n  \\n    /**\\n     * Donate to a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Attempts to donate money to the specified faction in exchange for reputation.\\n     * Returns true if you successfully donate the money, and false otherwise.\\n     *\\n     * @param faction - Name of faction to donate to.\\n     * @param amount - Amount of money to donate.\\n     * @returns True if the money was donated, and false otherwise.\\n     */\\n    donateToFaction(faction: string, amount: number): boolean;\\n  \\n    /**\\n     * Create a program.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working on creating the\\n     * specified program. If you are already in the middle of some “working” action\\n     * (such as working for a company, training at a gym, or taking a course), then\\n     * running this function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns true if you successfully start working on the specified program, and false otherwise.\\n     *\\n     * Note that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are:\\n     * * BruteSSH.exe: 50\\n     * * FTPCrack.exe: 100\\n     * * relaySMTP.exe: 250\\n     * * HTTPWorm.exe: 500\\n     * * SQLInject.exe: 750\\n     * * DeepscanV1.exe: 75\\n     * * DeepscanV2.exe: 400\\n     * * ServerProfiler.exe: 75\\n     * * AutoLink.exe: 25\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @param program - Name of program to create.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    createProgram(program: string): boolean;\\n  \\n    /**\\n     * Commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to automatically attempt to commit crimes.\\n     * If you are already in the middle of some ‘working’ action (such\\n     * as working for a company or training at a gym), then running this\\n     * function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns the number of milliseconds it takes to attempt the\\n     * specified crime (e.g It takes 60 seconds to attempt the ‘Rob Store’ crime,\\n     * so running `commitCrime('rob store')` will return 60,000).\\n     *\\n     * Warning: I do not recommend using the time returned from this function to try\\n     * and schedule your crime attempts. Instead, I would use the isBusy Singularity\\n     * function to check whether you have finished attempting a crime. This is because\\n     * although the game sets a certain crime to be X amount of seconds, there is no\\n     * guarantee that your browser will follow that time limit.\\n     *\\n     * @param crime - Name of crime to attempt.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    commitCrime(crime: string): number;\\n  \\n    /**\\n     * Get chance to successfully commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns your chance of success at commiting the specified crime.\\n     *\\n     * @param crime - Name of crime.\\n     * @returns Chance of success at commiting the specified crime.\\n     */\\n    getCrimeChance(crime: string): number;\\n  \\n    /**\\n     * Get stats related to a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the stats of the crime.\\n     *\\n     * @param crime - Name of crime. Not case-sensitive\\n     * @returns The stats of the crime.\\n     */\\n    getCrimeStats(crime: string): CrimeStats;\\n  \\n    /**\\n     * Get a list of owned augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array containing the names (as strings) of all Augmentations you have.\\n     *\\n     * @param purchased - Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations.\\n     * @returns Array containing the names (as strings) of all Augmentations you have.\\n     */\\n    getOwnedAugmentations(purchased?: boolean): string[];\\n  \\n    /**\\n     * Get a list of augmentation available from a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array containing the names (as strings) of all Augmentations\\n     * that are available from the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Array containing the names of all Augmentations.\\n     */\\n    getAugmentationsFromFaction(faction: string): string[];\\n  \\n    /**\\n     * Get the pre-requisite of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     * If there are no prerequisites, a blank array is returned.\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     */\\n    getAugmentationPrereq(augName: string): string[];\\n  \\n    /**\\n     * Get the price and reputation of an augmentation.\\n     * @deprecated use getAugmentationPrice getAugmentationRepCost\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with two elements that gives the cost for\\n     * the specified Augmentation. The first element in the returned array is the\\n     * reputation requirement of the Augmentation, and the second element is the\\n     * money cost.\\n     *\\n     * If an invalid Augmentation name is passed in for the augName argument, this\\n     * function will return the array [-1, -1].\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with first element as a reputation requirement and second element as the money cost.\\n     */\\n    getAugmentationCost(augName: string): [number, number];\\n  \\n    /**\\n     * Get price of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Price of the augmentation.\\n     */\\n    getAugmentationPrice(augName: string): number;\\n  \\n    /**\\n     * Get reputation requirement of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Reputation requirement of the augmentation.\\n     */\\n    getAugmentationRepReq(augName: string): number;\\n  \\n    /**\\n     * Purchase an augmentation\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will try to purchase the specified Augmentation through the given Faction.\\n     *\\n     * This function will return true if the Augmentation is successfully purchased, and false otherwise.\\n     *\\n     * @param faction - Name of faction to purchase Augmentation from.\\n     * @param augmentation - Name of Augmentation to purchase.\\n     * @returns True if the Augmentation is successfully purchased, and false otherwise.\\n     */\\n    purchaseAugmentation(faction: string, augmentation: string): boolean;\\n  \\n    /**\\n     * Get the stats of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns augmentation stats.\\n     *\\n     * @param name - Name of Augmentation. CASE-SENSITIVE.\\n     * @returns Augmentation stats.\\n     */\\n    getAugmentationStats(name: string): AugmentationStats;\\n  \\n    /**\\n     * Install your purchased augmentations.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically install your Augmentations, resetting the game as usual.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    installAugmentations(cbScript?: string): void;\\n  \\n    /**\\n     * Returns an object with the Player’s stats.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @example\\n     * ```ts\\n     * res = getStats();\\n     * print('My charisma level is: ' + res.charisma);\\n     * ```\\n     * @returns Object with the Player’s stats.\\n     */\\n    getStats(): PlayerSkills;\\n  \\n    /**\\n     * Returns an object with various information about your character.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @returns Object with various information about your character.\\n     */\\n    getCharacterInformation(): CharacterInfo;\\n  \\n    /**\\n     * Hospitalize the player.\\n     * @remarks\\n     * RAM cost: 0.25 GB * 16/4/1\\n     *\\n     *\\n     * @returns The cost of the hospitalization.\\n     */\\n    hospitalize(): number;\\n  \\n    /**\\n     * Soft reset the game.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will perform a reset even if you don’t have any augmentation installed.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    softReset(cbScript: string): void;\\n  \\n    /**\\n     * Go to a location.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Move the player to a specific location.\\n     *\\n     * @param locationName - Name of the location.\\n     * @returns True if the player was moved there, false otherwise.\\n     */\\n    goToLocation(locationName: string): boolean;\\n  \\n    /**\\n     * Get the current server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Name of the current server.\\n     */\\n    getCurrentServer(): string;\\n  \\n    /**\\n     * Connect to a server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * Run the connect HOSTNAME command in the terminal. Can only connect to neighbors.\\n     *\\n     * @returns True if the connect command was successful, false otherwise.\\n     */\\n    connect(hostname: string): boolean;\\n  \\n    /**\\n     * Run the hack command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Amount of money stolen by manual hacking.\\n     */\\n    manualHack(): Promise<number>;\\n  \\n    /**\\n     * Run the backdoor command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Promise waiting for the installation to finish.\\n     */\\n    installBackdoor(): Promise<void>;\\n  \\n    /**\\n     * Check if the player is focused.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     *\\n     * @returns True if the player is focused.\\n     */\\n    isFocused(): boolean;\\n  \\n    /**\\n     * Set the players focus.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     * @returns True if the focus was changed.\\n     */\\n    setFocus(focus: boolean): boolean;\\n  }\\n  \\n  /**\\n   * Hacknet API\\n   * @remarks\\n   * Not all these functions are immediately available.\\n   * @public\\n   */\\n  export interface Hacknet {\\n    /**\\n     * Get the number of hacknet nodes you own.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the number of Hacknet Nodes you own.\\n     *\\n     * @returns number of hacknet nodes.\\n     */\\n    numNodes(): number;\\n  \\n    /**\\n     * Get the maximum number of hacknet nodes.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @returns maximum number of hacknet nodes.\\n     */\\n    maxNumNodes(): number;\\n  \\n    /**\\n     * Purchase a new hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Purchases a new Hacknet Node. Returns a number with the index of the\\n     * Hacknet Node. This index is equivalent to the number at the end of\\n     * the Hacknet Node’s name (e.g The Hacknet Node named `hacknet-node-4`\\n     * will have an index of 4).\\n     *\\n     * If the player cannot afford to purchase a new Hacknet Node then the function will return -1.\\n     *\\n     * @returns The index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\\n     */\\n    purchaseNode(): number;\\n  \\n    /**\\n     * Get the price of the next hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of purchasing a new Hacknet Node.\\n     *\\n     * @returns Cost of purchasing a new Hacknet Node.\\n     */\\n    getPurchaseNodeCost(): number;\\n  \\n    /**\\n     * Get the stats of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns an object containing a variety of stats about the specified Hacknet Node.\\n     *\\n     * Note that for Hacknet Nodes, production refers to the amount of money the node generates.\\n     * For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the\\n     * amount of hashes the node generates.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node\\n     * @returns Object containing a variety of stats about the specified Hacknet Node.\\n     */\\n    getNodeStats(index: number): NodeStats;\\n  \\n    /**\\n     * Upgrade the level of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the level of the specified Hacknet Node by n.\\n     *\\n     * Returns true if the Hacknet Node’s level is successfully upgraded by n\\n     * or if it is upgraded by some positive amount and the Node reaches its max level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s level is successfully upgraded, false otherwise.\\n     */\\n    upgradeLevel(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the RAM of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the specified Hacknet Node’s RAM n times.\\n     * Note that each upgrade doubles the Node’s RAM.\\n     * So this is equivalent to multiplying the Node’s RAM by 2 n.\\n     *\\n     * Returns true if the Hacknet Node’s RAM is successfully upgraded n times\\n     * or if it is upgraded some positive number of times and the Node reaches it max RAM.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s ram is successfully upgraded, false otherwise.\\n     */\\n    upgradeRam(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the core of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to purchase n cores for the specified Hacknet Node.\\n     *\\n     * Returns true if it successfully purchases n cores for the Hacknet Node\\n     * or if it purchases some positive amount and the Node reaches its max number of cores.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cores to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCore(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the cache of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Tries to upgrade the specified Hacknet Server’s cache n times.\\n     *\\n     * Returns true if it successfully upgrades the Server’s cache n times,\\n     * or if it purchases some positive amount and the Server reaches its max cache level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cache levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCache(index: number, n: number): boolean;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node levels.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the specified Hacknet Node by n levels.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to upgrade. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node.\\n     */\\n    getLevelUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node RAM.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the RAM of the specified Hacknet Node n times.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's ram.\\n     */\\n    getRamUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cores.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the number of cores of the specified Hacknet Node by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cores. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's number of cores.\\n     */\\n    getCoreUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cache.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the cost of upgrading the cache level of the specified Hacknet Server by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cache. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's cache.\\n     */\\n    getCacheUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Get the total number of hashes stored.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you have.\\n     *\\n     * @returns Number of hashes you have.\\n     */\\n    numHashes(): number;\\n  \\n    /**\\n     * Get the maximum number of hashes you can store.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you can store.\\n     *\\n     * @returns Number of hashes you can store.\\n     */\\n    hashCapacity(): number;\\n  \\n    /**\\n     * Get the cost of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\\n     *    hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\\n     *    ns.hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @returns Number of hashes required for the specified upgrade.\\n     */\\n    hashCost(upgName: string): number;\\n  \\n    /**\\n     * Purchase a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Spend the hashes generated by your Hacknet Servers on an upgrade.\\n     * Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\\n     *\\n     * The name of the upgrade must be an exact match.\\n     * The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`, which applies to a specific server.\\n     * In this case, the `upgTarget` argument must be the hostname of the server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * NS2:\\n     * ns.hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @param upgTarget - Object to which upgrade applies. Required for certain upgrades.\\n     * @returns True if the upgrade is successfully purchased, and false otherwise..\\n     */\\n    spendHashes(upgName: string, upgTarget?: string): boolean;\\n  \\n    /**\\n     * Get the list of hash upgrades\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the list of all available hash upgrades that can be used in the spendHashes function.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgrades = hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgrades = ns.hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @returns An array containing the available upgrades\\n     */\\n    getHashUpgrades(): string[];\\n  \\n    /**\\n     * Get the level of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Level of the upgrade.\\n     */\\n    getHashUpgradeLevel(upgName: string): number;\\n  \\n    /**\\n     * Get the multipler to study.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getStudyMult(): number;\\n  \\n    /**\\n     * Get the multipler to training.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getTrainingMult(): number;\\n  }\\n  \\n  /**\\n   * Bladeburner API\\n   * @remarks\\n   * You have to be employed in the Bladeburner division and be in BitNode-7\\n   * or have Source-File 7 in order to use this API.\\n   * @public\\n   */\\n  export interface Bladeburner {\\n    /**\\n     * List all contracts.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner contracts.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner contracts.\\n     */\\n    getContractNames(): string[];\\n  \\n    /**\\n     * List all operations.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner operations.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner operations.\\n     */\\n    getOperationNames(): string[];\\n  \\n    /**\\n     * List all black ops.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner Black Ops.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner Black Ops.\\n     */\\n    getBlackOpNames(): string[];\\n  \\n    /**\\n     * List all general actions.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner actions.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner actions.\\n     */\\n    getGeneralActionNames(): string[];\\n  \\n    /**\\n     * List all skills.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner skills.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner skills.\\n     */\\n    getSkillNames(): string[];\\n  \\n    /**\\n     * Start an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to start the specified Bladeburner action.\\n     * Returns true if the action was started successfully, and false otherwise.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match\\n     * @returns True if the action was started successfully, and false otherwise.\\n     */\\n    startAction(type: string, name: string): boolean;\\n  \\n    /**\\n     * Stop current action.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Stops the current Bladeburner action.\\n     *\\n     */\\n    stopBladeburnerAction(): void;\\n  \\n    /**\\n     * Get current action.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns an object that represents the player’s current Bladeburner action.\\n     * If the player is not performing an action, the function will return an object with the ‘type’ property set to “Idle”.\\n     *\\n     * @returns Object that represents the player’s current Bladeburner action.\\n     */\\n    getCurrentAction(): BladeburnerCurAction;\\n  \\n    /**\\n     * Get the time to complete an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of seconds it takes to complete the specified action\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of milliseconds it takes to complete the specified action.\\n     */\\n    getActionTime(type: string, name: string): number;\\n  \\n    /**\\n     * Get estimate success chance of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated success chance for the specified action.\\n     * This chance is returned as a decimal value, NOT a percentage\\n     * (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Estimated success chance for the specified action.\\n     */\\n    getActionEstimatedSuccessChance(type: string, name: string): [number, number];\\n  \\n    /**\\n     * Get the reputation gain of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the average Bladeburner reputation gain for successfully\\n     * completing the specified action.\\n     * Note that this value is an ‘average’ and the real reputation gain may vary slightly from this value.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Optional action level at which to calculate the gain\\n     * @returns Average Bladeburner reputation gain for successfully completing the specified action.\\n     */\\n    getActionRepGain(type: string, name: string, level: number): number;\\n  \\n    /**\\n     * Get action count remaining.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the remaining count of the specified action.\\n     *\\n     * Note that this is meant to be used for Contracts and Operations.\\n     * This function will return ‘Infinity’ for actions such as Training and Field Analysis.\\n     * This function will return 1 for BlackOps not yet completed regardless of wether\\n     * the player has the required rank to attempt the mission or not.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Remaining count of the specified action.\\n     */\\n    getActionCountRemaining(type: string, name: string): number;\\n  \\n    /**\\n     * Get the maximum level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the maximum level for this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Maximum level of the specified action.\\n     */\\n    getActionMaxLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get the current level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the current level of this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Current level of the specified action.\\n     */\\n    getActionCurrentLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get wether an action is set to autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action is currently set to autolevel.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns True if the action is set to autolevel, and false otherwise.\\n     */\\n    getActionAutolevel(type: string, name: string): boolean;\\n  \\n    /**\\n     * Set an action autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Enable/disable autoleveling for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param autoLevel - Whether or not to autolevel this action\\n     */\\n    setActionAutolevel(type: string, name: string, autoLevel: boolean): void;\\n  \\n    /**\\n     * Set the level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the level for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Level to set this action to.\\n     */\\n    setActionLevel(type: string, name: string, level: number): void;\\n  \\n    /**\\n     * Get player bladeburner rank.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the player’s Bladeburner Rank.\\n     *\\n     * @returns Player’s Bladeburner Rank.\\n     */\\n    getRank(): number;\\n  \\n    /**\\n     * Get black op required rank.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Returns the rank required to complete this BlackOp.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param name - Name of BlackOp. Must be an exact match.\\n     * @returns Rank required to complete this BlackOp.\\n     */\\n    getBlackOpRank(name: string): number;\\n  \\n    /**\\n     * Get bladeburner skill points.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner skill points you have.\\n     *\\n     * @returns Number of Bladeburner skill points you have.\\n     */\\n    getSkillPoints(): number;\\n  \\n    /**\\n     * Get skill level.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns your level in the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Level in the specified skill.\\n     */\\n    getSkillLevel(name: string): number;\\n  \\n    /**\\n     * Get cost to upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns the number of skill points needed to upgrade the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Number of skill points needed to upgrade the specified skill.\\n     */\\n    getSkillUpgradeCost(name: string): number;\\n  \\n    /**\\n     * Upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to upgrade the specified Bladeburner skill.\\n     *\\n     * Returns true if the skill is successfully upgraded, and false otherwise.\\n     *\\n     * @param skillName - Name of skill to be upgraded. Case-sensitive and must be an exact match\\n     * @returns true if the skill is successfully upgraded, and false otherwise.\\n     */\\n    upgradeSkill(name: string): boolean;\\n  \\n    /**\\n     * Get team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner team members you have assigned to the specified action.\\n     *\\n     * Setting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of Bladeburner team members that were assigned to the specified action.\\n     */\\n    getTeamSize(type: string, name: string): number;\\n  \\n    /**\\n     * Set team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the team size for the specified Bladeburner action.\\n     *\\n     * Returns the team size that was set, or -1 if the function failed.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param size - Number of team members to set. Will be converted using Math.round().\\n     * @returns Number of Bladeburner team members you assigned to the specified action.\\n     */\\n    setTeamSize(type: string, name: string, size: number): number;\\n  \\n    /**\\n     * Get estimated population in city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoids in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Estimated number of Synthoids in the specified city.\\n     */\\n    getCityEstimatedPopulation(name: string): number;\\n  \\n    /**\\n     * Get number of communities in a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoid communities in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Number of Synthoids communities in the specified city.\\n     */\\n    getCityCommunities(name: string): number;\\n  \\n    /**\\n     * Get chaos of a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chaos in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Chaos in the specified city.\\n     */\\n    getCityChaos(name: string): number;\\n  \\n    /**\\n     * Get current city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the city that the player is currently in (for Bladeburner).\\n     *\\n     * @returns City that the player is currently in (for Bladeburner).\\n     */\\n    getCity(): string;\\n  \\n    /**\\n     * Travel to another city in bladeburner.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to switch to the specified city (for Bladeburner only).\\n     *\\n     * Returns true if successful, and false otherwise\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns true if successful, and false otherwise\\n     */\\n    switchCity(name: string): boolean;\\n  \\n    /**\\n     * Get bladeburner stamina.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Returns an array with two elements:\\n     * * [Current stamina, Max stamina]\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * function getStaminaPercentage() {\\n     *    var res = bladeburner.getStamina();\\n     *    return res[0] / res[1];\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * function getStaminaPercentage() {\\n     *    const [current, max] = ns.bladeburner.getStamina();\\n     *    return current / max;\\n     * }\\n     * ```\\n     * @returns Array containing current stamina and max stamina.\\n     */\\n    getStamina(): [number, number];\\n  \\n    /**\\n     * Join the bladeburner faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to join the Bladeburner faction.\\n     *\\n     * Returns true if you successfully join the Bladeburner faction, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerFaction(): boolean;\\n  \\n    /**\\n     * Join the bladeburner division.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to join the Bladeburner division.\\n     *\\n     * Returns true if you successfully join the Bladeburner division, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerDivision(): boolean;\\n  \\n    /**\\n     * Get bladeburner bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Bladeburner mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 5x the normal speed.\\n     * For example, if an action takes 30 seconds to complete but you’ve accumulated over\\n     * 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\\n     *\\n     * @returns Amount of accumulated “bonus time” (milliseconds) for the Bladeburner mechanic.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Coding Contract API\\n   * @public\\n   */\\n  export interface CodingContract {\\n    /**\\n     * Attemps a coding contract.\\n     * @remarks\\n     * RAM cost: 10 GB\\n     *\\n     * Attempts to solve the Coding Contract with the provided solution.\\n     *\\n     * @param answer - Solution for the contract.\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns True if the solution was correct, false otherwise. If the returnReward option is configured, then the function will instead return a string. If the contract is successfully solved, the string will contain a description of the contract’s reward. Otherwise, it will be an empty string.\\n     */\\n    attempt(answer: string[] | number, filename: string, host?: string, opts?: CodingAttemptOptions): boolean | string;\\n  \\n    /**\\n     * Get the type of a coding contract.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns a name describing the type of problem posed by the Coding Contract.\\n     * (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Name describing the type of problem posed by the Coding Contract.\\n     */\\n    getContractType(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the description.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the full text description for the problem posed by the Coding Contract.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Contract’s text description.\\n     */\\n    getDescription(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the input data.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the data associated with the specific Coding Contract.\\n     * Note that this is not the same as the contract’s description.\\n     * This is just the data that the contract wants you to act on in order to solve\\n     *\\n     * @param filename - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns The specified contract’s data, data type depends on contract type.;\\n     */\\n    getData(filename: string, host?: string): any;\\n  \\n    /**\\n     * Get the number of attempt remaining.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the number of tries remaining on the contract before it self-destructs.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns How many attempts are remaining for the contract;\\n     */\\n    getNumTriesRemaining(filename: string, host?: string): number;\\n  }\\n  \\n  /**\\n   * Gang API\\n   * @remarks\\n   * If you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\\n   * @public\\n   */\\n  export interface Gang {\\n    /**\\n     * Create a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     *\\n     * Create a gang with the specified faction.\\n     * @returns True if the gang was created, false otherwise.\\n     */\\n    createGang(faction: string): boolean;\\n  \\n    /**\\n     * Check if you're in a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     * @returns True if you're in a gang, false otherwise.\\n     */\\n    inGang(): boolean;\\n  \\n    /**\\n     * List all gang members.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the names of all Gang members\\n     *\\n     * @returns Names of all Gang members.\\n     */\\n    getMemberNames(): string[];\\n  \\n    /**\\n     * Get information about your gang.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get general information about the gang.\\n     *\\n     * @returns Object containing general information about the gang.\\n     */\\n    getGangInformation(): GangGenInfo;\\n  \\n    /**\\n     * Get information about the other gangs.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get territory and power information about all gangs.\\n     *\\n     * @returns Object containing territory and power information about all gangs.\\n     */\\n    getOtherGangInformation(): GangOtherInfo;\\n  \\n    /**\\n     * Get information about a specific gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get stat and equipment-related information about a Gang Member\\n     *\\n     * @param name - Name of member.\\n     * @returns Object containing stat and equipment-related information about a Gang Member.\\n     */\\n    getMemberInformation(name: string): GangMemberInfo;\\n  \\n    /**\\n     * Check if you can recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns boolean indicating whether a member can currently be recruited\\n     *\\n     * @returns True if a member can currently be recruited, false otherwise.\\n     */\\n    canRecruitMember(): boolean;\\n  \\n    /**\\n     * Recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempt to recruit a new gang member.\\n     *\\n     * Possible reasons for failure:\\n     * * Cannot currently recruit a new member\\n     * * There already exists a member with the specified name\\n     *\\n     * @param name - Name of member to recruit.\\n     * @returns True if the member was successfully recruited, false otherwise.\\n     */\\n    recruitMember(name: string): boolean;\\n  \\n    /**\\n     * List member task names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all valid tasks that Gang members can be assigned to.\\n     *\\n     * @returns All valid tasks that Gang members can be assigned to.\\n     */\\n    getTaskNames(): string[];\\n  \\n    /**\\n     * Set gang member to task.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempts to assign the specified Gang Member to the specified task.\\n     * If an invalid task is specified, the Gang member will be set to idle (“Unassigned”).\\n     *\\n     * @param memberName - Name of Gang member to assign.\\n     * @param taskName - Task to assign.\\n     * @returns True if the Gang Member was successfully assigned to the task, false otherwise.\\n     */\\n    setMemberTask(memberName: string, taskName: string): boolean;\\n  \\n    /**\\n     * Get stats of a task.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\\n     *\\n     * @param name -  Name of the task.\\n     * @returns Detailed stats of a task.\\n     */\\n    getTaskStats(name: string): GangTaskStats;\\n  \\n    /**\\n     * List equipment names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all possible equipment/upgrades you can purchase for your Gang Members.\\n     * This includes Augmentations.\\n     *\\n     * @returns Names of all Equipments/Augmentations.\\n     */\\n    getEquipmentNames(): string[];\\n  \\n    /**\\n     * Get cost of equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the amount of money it takes to purchase a piece of Equipment or an Augmentation.\\n     * If an invalid Equipment/Augmentation is specified, this function will return Infinity.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Cost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\\n     */\\n    getEquipmentCost(equipName: string): number;\\n  \\n    /**\\n     * Get type of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment type.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Type of the equipment.\\n     */\\n    getEquipmentType(equipName: string): string;\\n  \\n    /**\\n     * Get stats of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment stats.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns A dictionary containing the stats of the equipment.\\n     */\\n    getEquipmentStats(equipName: string): EquipmentStats;\\n  \\n    /**\\n     * Purchase an equipment for a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempt to purchase the specified Equipment/Augmentation for the specified Gang member.\\n     *\\n     * @param memberName - Name of Gang member to purchase the equipment for.\\n     * @param equipName - Name of Equipment/Augmentation to purchase.\\n     * @returns True if the equipment was successfully purchased. False otherwise\\n     */\\n    purchaseEquipment(memberName: string, equipName: string): boolean;\\n  \\n    /**\\n     * Ascend a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Ascend the specified Gang Member.\\n     *\\n     * @param memberName - Name of member to ascend.\\n     * @returns Object with info about the ascension results. undefined if ascension did not occur.\\n     */\\n    ascendMember(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Get the result of an ascension without ascending.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the result of an ascension without ascending.\\n     *\\n     * @param memberName - Name of member.\\n     * @returns Object with info about the ascension results. undefined if ascension is impossible.\\n     */\\n    getAscensionResult(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Enable/Disable territory warfare.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Set whether or not the gang should engage in territory warfare\\n     *\\n     * @param engage - Whether or not to engage in territory warfare.\\n     */\\n    setTerritoryWarfare(engage: boolean): void;\\n  \\n    /**\\n     * Get chance to win clash with other gang.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\\n     *\\n     * @param gangName - Target gang\\n     * @returns Chance you have to win a clash with the specified gang.\\n     */\\n    getChanceToWinClash(gangName: string): number;\\n  \\n    /**\\n     * Get bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Gang mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 10x the normal speed.\\n     *\\n     * @returns Bonus time for the Gang mechanic in milliseconds.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Sleeve API\\n   * @remarks\\n   * If you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\\n   * @public\\n   */\\n  export interface Sleeve {\\n    /**\\n     * Get the number of sleeves you own.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the number of duplicate sleeves the player has.\\n     *\\n     * @returns number of duplicate sleeves the player has.\\n     */\\n    getNumSleeves(): number;\\n  \\n    /**\\n     * Get the stats of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a structure containing the stats of the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to get stats of.\\n     * @returns Object containing the stats of the sleeve.\\n     */\\n    getSleeveStats(sleeveNumber: number): SleeveSkills;\\n  \\n    /**\\n     * Get information about a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a struct containing tons of information about this sleeve\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve information.\\n     * @returns Object containing tons of information about this sleeve.\\n     */\\n    getInformation(sleeveNumber: number): SleeveInformation;\\n  \\n    /**\\n     * Get task of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the current task that the sleeve is performing. type is set to “Idle” if the sleeve isn’t doing anything.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve task from.\\n     * @returns Object containing information the current task that the sleeve is performing.\\n     */\\n    getTask(sleeveNumber: number): SleeveTask;\\n  \\n    /**\\n     * Set a sleeve to shock recovery.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start recovery.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToShockRecovery(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to synchronize.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start synchronizing.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToSynchronize(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to commit crime.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start commiting crime.\\n     * @param name - Name of the crime. Must be an exact match.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToCommitCrime(sleeveNumber: number, name: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this faction.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the faction.\\n     * @param factionName - Name of the faction to work for.\\n     * @param factionWorkType - Name of the action to perform for this faction.\\n     * @returns True if the sleeve started working on this faction, false otherwise.\\n     */\\n    setToFactionWork(sleeveNumber: number, factionName: string, factionWorkType: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a company.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this company.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the company.\\n     * @param companyName - Name of the company to work for.\\n     * @returns True if the sleeve started working on this company, false otherwise.\\n     */\\n    setToCompanyWork(sleeveNumber: number, companyName: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to take a class at a university.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start taking class.\\n     * @param university - Name of the university to attend.\\n     * @param className - Name of the class to follow.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to workout at the gym.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working out.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to workout at the gym.\\n     * @param gymName - Name of the gym.\\n     * @param stat - Name of the stat to train.\\n     * @returns True if the sleeve started working out, false otherwise.\\n     */\\n    setToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Make a sleeve travel to another city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve reached destination.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to travel.\\n     * @param cityName - Name of the destination city.\\n     * @returns True if the sleeve reached destination, false otherwise.\\n     */\\n    travel(sleeveNumber: number, cityName: string): boolean;\\n  \\n    /**\\n     * Get augmentations installed on a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentation names that this sleeve has installed.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve augmentations from.\\n     * @returns List of augmentation names that this sleeve has installed.\\n     */\\n    getSleeveAugmentations(sleeveNumber: number): string[];\\n  \\n    /**\\n     * List purchasable augs for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentations that the player can buy for this sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve purchasable augmentations from.\\n     * @returns List of augmentations that the player can buy for this sleeve.\\n     */\\n    getSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\\n  \\n    /**\\n     * Purchase an aug for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return true if the aug was purchased and installed on the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to buy an aug for.\\n     * @param augName - Name of the aug to buy. Must be an exact match.\\n     * @returns True if the aug was purchased and installed on the sleeve, false otherwise.\\n     */\\n    purchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\\n  }\\n  \\n  /**\\n   * Skills formulas\\n   * @public\\n   */\\n  interface SkillsFormulas {\\n    /**\\n     * Calculate skill level.\\n     * @param exp - experience for that skill\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated skill level.\\n     */\\n    calculateSkill(exp: number, skillMult?: number): number;\\n    /**\\n     * Calculate exp for skill level.\\n     * @param skill - target skill level\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated exp required.\\n     */\\n    calculateExp(skill: number, skillMult?: number): number;\\n  }\\n  \\n  /**\\n   * Hacking formulas\\n   * @public\\n   */\\n  interface HackingFormulas {\\n    /**\\n     * Calculate hack chance.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack chance.\\n     */\\n    hackChance(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack exp for one thread.\\n     * @remarks\\n     * Multiply by thread to get total exp\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack exp.\\n     */\\n    hackExp(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack percent for one thread.\\n     * @remarks\\n     * Multiply by thread to get total percent hacked.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack percent.\\n     */\\n    hackPercent(server: Server, player: Player): number;\\n    /**\\n     * Calculate the percent a server would grow.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param threads - Amount of thread.\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @param cores - Number of cores on the computer that will execute grow.\\n     * @returns The calculated grow percent.\\n     */\\n    growPercent(server: Server, threads: number, player: Player, cores?: number): number;\\n    /**\\n     * Calculate hack time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack time.\\n     */\\n    hackTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate grow time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated grow time.\\n     */\\n    growTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate weaken time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated weaken time.\\n     */\\n    weakenTime(server: Server, player: Player): number;\\n  }\\n  \\n  /**\\n   * Hacknet Node formulas\\n   * @public\\n   */\\n  interface HacknetNodesFormulas {\\n    /**\\n     * Calculate money gain rate.\\n     * @param level - level of the node.\\n     * @param ram - ram of the node.\\n     * @param cores - cores of the node.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated money gain rate.\\n     */\\n    moneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate the cost of a hacknet node.\\n     * @param n - number of the hacknet node\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetNodeCost(n: number, mult: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet node constants used by the game.\\n     */\\n    constants(): number;\\n  }\\n  \\n  /**\\n   * Hacknet Server formulas\\n   * @public\\n   */\\n  interface HacknetServersFormulas {\\n    /**\\n     * Calculate hash gain rate.\\n     * @param level - level of the server.\\n     * @param ramUsed - ramUsed of the server.\\n     * @param maxRam - maxRam of the server.\\n     * @param cores - cores of the server.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated hash gain rate.\\n     */\\n    hashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cache.\\n     * @param startingCache - starting cache level\\n     * @param extraCache - amount of levels of cache to purchase (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    cacheUpgradeCost(startingCache: number, extraCache?: number): number;\\n    /**\\n     * Calculate hash cost of an upgrade.\\n     * @param upgName - name of the upgrade\\n     * @param level - level of the upgrade\\n     * @returns The calculated hash cost.\\n     */\\n    hashUpgradeCost(upgName: number, level: number): number;\\n    /**\\n     * Calculate the cost of a hacknet server.\\n     * @param n - number of the hacknet server\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetServerCost(n: number, mult?: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet server constants used by the game.\\n     */\\n    constants(): any;\\n  }\\n  \\n  /**\\n   * Gang formulas\\n   * @public\\n   */\\n  interface GangFormulas {\\n    /**\\n     * Calculate the wanted penalty.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @returns The calculated wanted penalty.\\n     */\\n    wantedPenalty(gang: GangGenInfo): number;\\n    /**\\n     * Calculate respect gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Gang info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Gang info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated respect gain.\\n     */\\n    respectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate wanted gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated wanted gain.\\n     */\\n    wantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate money gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated money gain.\\n     */\\n    moneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n  \\n    /**\\n     * Calculate ascension point gain.\\n     * @param exp - Experience point before ascension.\\n     * @returns The calculated ascension point gain.\\n     */\\n    ascensionPointsGain(exp: number): number;\\n  \\n    /**\\n     * Calculate ascension mult.\\n     * @param points - Amount of ascension points.\\n     * @returns The calculated ascension mult.\\n     */\\n    ascensionMultiplier(points: number): number;\\n  }\\n  \\n  /**\\n   * Formulas API\\n   * @remarks\\n   * You need Formulas.exe on your home computer to use this API.\\n   * @public\\n   */\\n  export interface Formulas {\\n    /** Skills formulas */\\n    skills: SkillsFormulas;\\n    /** Hacking formulas */\\n    hacking: HackingFormulas;\\n    /** Hacknet Nodes formulas */\\n    hacknetNodes: HacknetNodesFormulas;\\n    /** Hacknet Servers formulas */\\n    hacknetServers: HacknetServersFormulas;\\n    /** Gang formulas */\\n    gang: GangFormulas;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface Fragment {\\n    id: number;\\n    shape: boolean[][];\\n    type: number;\\n    power: number;\\n    limit: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface ActiveFragment {\\n    id: number;\\n    avgCharge: number;\\n    numCharge: number;\\n    rotation: number;\\n    x: number;\\n    y: number;\\n  }\\n  \\n  /**\\n   * Stanek's Gift API.\\n   * @public\\n   */\\n  interface Stanek {\\n    /**\\n     * Stanek's Gift width.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The width of the gift.\\n     */\\n    width(): number;\\n    /**\\n     * Stanek's Gift height.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The height of the gift.\\n     */\\n    height(): number;\\n  \\n    /**\\n     * Charge a fragment, increasing its power.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @returns Promise that lasts until the charge action is over.\\n     */\\n    charge(rootX: number, rootY: number): Promise<void>;\\n  \\n    /**\\n     * List possible fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns List of possible fragments.\\n     */\\n    fragmentDefinitions(): Fragment[];\\n  \\n    /**\\n     * List of fragments in Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @returns List of active fragments placed on Stanek's Gift.\\n     */\\n    activeFragments(): ActiveFragment[];\\n  \\n    /**\\n     * Clear the board of all fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    clear(): void;\\n  \\n    /**\\n     * Check if fragment can be placed at specified location.\\n     * @remarks\\n     * RAM cost: cost: 0.5 GB\\n     *\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @param rotation - rotation A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - fragmentId ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    canPlace(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Place fragment on Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @param rotation - A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    place(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Get placed fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    get(rootX: number, rootY: number): ActiveFragment | undefined;\\n  \\n    /**\\n     * Remove fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 0.15 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    remove(rootX: number, rootY: number): boolean;\\n  }\\n  \\n  /**\\n   * User Interface API.\\n   * @public\\n   */\\n  interface UserInterface {\\n    /**\\n     * Get the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns An object containing the theme's colors\\n     */\\n    getTheme(): UserInterfaceTheme;\\n  \\n    /**\\n     * Sets the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     * @example\\n     * Usage example (NS2)\\n     * ```ts\\n     * const theme = ns.ui.getTheme();\\n     * theme.primary = '#ff5500';\\n     * ns.ui.setTheme(theme);\\n     * ```\\n     */\\n    setTheme(newTheme: UserInterfaceTheme): void;\\n  \\n    /**\\n     * Resets the player's theme to the default values\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    resetTheme(): void;\\n  }\\n  \\n  /**\\n   * Collection of all functions passed to scripts\\n   * @public\\n   * @remarks\\n   * <b>Basic ns1 usage example:</b>\\n   * ```ts\\n   *  // Basic ns functions can be used directly\\n   *  getHostname();\\n   *  // Some related functions are gathered within a common namespace\\n   *  stock.getPrice();\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscript1.html| ns1 in-game docs}\\n   * <hr>\\n   * <b>Basic ns2 usage example:</b>\\n   * ```ts\\n   * export async function main(ns) {\\n   *  // Basic ns functions can be accessed on the ns object\\n   *  ns.getHostname();\\n   *  // Some related functions are gathered under a sub-property of the ns object\\n   *  ns.stock.getPrice();\\n   *  // Some functions need to be await ed\\n   *  await ns.hack('n00dles');\\n   * }\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscriptjs.html| ns2 in-game docs}\\n   * <hr>\\n   */\\n  export interface NS extends Singularity {\\n    /**\\n     * Namespace for hacknet functions.\\n     * @remarks RAM cost: 4 GB\\n     */\\n    readonly hacknet: Hacknet;\\n    /**\\n     *\\n     * Namespace for bladeburner functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly bladeburner: Bladeburner;\\n    /**\\n     *\\n     * Namespace for codingcontract functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly codingcontract: CodingContract;\\n    /**\\n     *\\n     * Namespace for gang functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly gang: Gang;\\n    /**\\n     *\\n     * Namespace for sleeve functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly sleeve: Sleeve;\\n    /**\\n     *\\n     * Namespace for stock functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly stock: TIX;\\n    /**\\n     *\\n     * Namespace for formulas functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly formulas: Formulas;\\n    /**\\n     * Namespace for stanek functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly stanek: Stanek;\\n    /**\\n     * Namespace for corporation functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly corporation: Corporation;\\n  \\n    /**\\n     * Namespace for user interface functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly ui: UserInterface;\\n  \\n    /**\\n     * Arguments passed into the script.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Arguments passed into a script can be accessed using a normal\\n     * array using the [] operator (args[0], args[1], etc…).\\n     *\\n     * It is also possible to get the number of arguments that was passed into a script using: 'args.length'\\n     * WARNING: Do not try to modify the args array. This will break the game.\\n     */\\n    readonly args: (string | number | boolean)[];\\n  \\n    /**\\n     * Steal a servers money.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Function that is used to try and hack servers to steal money and gain hacking experience.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level when this function is called. In order to hack a server you must first gain root access to that server\\n     * and also have the required hacking level.\\n     *\\n     * A script can hack a server from anywhere. It does not need to be running on the same\\n     * server to hack that server. For example, you can create a script that hacks the `foodnstuff`\\n     * server and run that script on any server in the game.\\n     *\\n     * A successful `hack()` on a server will raise that server’s security level by 0.002.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var earnedMoney = hack(\\\"foodnstuff\\\");\\n     * earnedMoney = earnedMoney + hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let earnedMoney = await ns.hack(\\\"foodnstuff\\\");\\n     * earnedMoney += await ns.hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @param host - Hostname of the target server to hack.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount of money stolen if the hack is successful, and zero otherwise.\\n     */\\n    hack(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Spoof money in a servers bank account, increasing the amount available.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to increase the amount of money available on a server.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level. When `grow` completes, the money available on a target server will\\n     * be increased by a certain, fixed percentage. This percentage is determined by the\\n     * target server’s growth rate (which varies between servers) and security level. Generally,\\n     * higher-level servers have higher growth rates. The getServerGrowth() function can be used\\n     * to obtain a server’s growth rate.\\n     *\\n     * Like hack, `grow` can be called on any server, regardless of where the script is running.\\n     * The grow() command requires root access to the target server, but there is no required hacking\\n     * level to run the command. It also raises the security level of the target server by 0.004.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var availableMoney = getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\"));\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let availableMoney = ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\"));\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @param host - Hostname of the target server to grow.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The number by which the money on the server was multiplied for the growth.\\n     */\\n    grow(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Reduce a server security level.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to attack a server’s security, lowering the server’s security level.\\n     * The runtime for this command depends on your hacking level and the target server’s security\\n     * level when this function is called. This function lowers the security level of the target server by 0.05.\\n     *\\n     * Like hack and grow, `weaken` can be called on any server, regardless of\\n     * where the script is running. This command requires root access to the target server, but\\n     * there is no required hacking level to run the command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var currentSecurity = getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let currentSecurity = ns.getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @param host - Hostname of the target server to weaken.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\\n     */\\n    weaken(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Predict the effect of weaken.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security decrease that would occur if a weaken with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @param cores - Optional. The number of cores of the server that would run weaken.\\n     * @returns The security decrease.\\n     */\\n    weakenAnalyze(threads: number, cores?: number): number;\\n  \\n    /**\\n     * Predict the effect of hack.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of script threads you need when running the hack command\\n     * to steal the specified amount of money from the target server.\\n     * If hackAmount is less than zero or greater than the amount of money available on the server,\\n     * then this function returns -1.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * //For example, let’s say the foodnstuff server has $10m and you run:\\n     * hackAnalyzeThreads(\\\"foodnstuff\\\", 1e6);\\n     * //If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\\n     * ```\\n     * @param host - Hostname of the target server to analyze.\\n     * @param hackAmount - Amount of money you want to hack from the server.\\n     * @returns The number of threads needed to hack the server for hackAmount money.\\n     */\\n    hackAnalyzeThreads(host: string, hackAmount: number): number;\\n  \\n    /**\\n     * Get the part of money stolen with a single thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the part of the specified server’s money you will steal with a single thread hack.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, assume the following returns 0.01:\\n     * var hackAmount = hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, assume the following returns 0.01:\\n     * const hackAmount = ns.hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @returns The part of money you will steal from the target server with a single thread hack.\\n     */\\n    hackAnalyze(host: string): number;\\n  \\n    /**\\n     * Get the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a hack with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    hackAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Get the chance of successfully hacking a server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the chance you have of successfully hacking the specified server.\\n     *\\n     * This returned value is in decimal form, not percentage.\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns The chance you have of successfully hacking the target server.\\n     */\\n    hackAnalyzeChance(host: string): number;\\n  \\n    /**\\n     * Calculate the number of grow thread needed to grow a server by a certain multiplier.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of “growths” needed in order to increase\\n     * the amount of money available on the specified server by the specified amount.\\n     * The specified amount is multiplicative and is in decimal form, not percentage.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * var growTimes = growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * const growTimes = ns.growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @param growthAmount - Multiplicative factor by which the server is grown. Decimal form..\\n     * @returns The amount of grow calls needed to grow the specified server by the specified amount\\n     */\\n    growthAnalyze(host: string, growthAmount: number, cores?: number): number;\\n  \\n    /**\\n     * Calculate the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a grow with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    growthAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Suspends the script for n milliseconds.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   tprint(i + 1);\\n     *   sleep(5000);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   ns.tprint(i + 1);\\n     *   await ns.sleep(5000);\\n     * }\\n     * ```\\n     * @returns\\n     */\\n    sleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Suspends the script for n milliseconds. Doesn't block with concurrent calls.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @returns\\n     */\\n    asleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Prints one or move values or variables to the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    print(...args: any[]): void;\\n  \\n    /**\\n     * Prints one or more values or variables to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    tprint(...args: any[]): void;\\n  \\n    /**\\n     * Prints a raw value or a variable to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param format - format of the message\\n     * @param msg - Value to be printed.\\n     */\\n    tprintf(format: string, ...values: any[]): void;\\n  \\n    /**\\n     * Clears the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    clearLog(): void;\\n  \\n    /**\\n     * Disables logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Logging can be disabled for all functions by passing `ALL` as the argument.\\n     *\\n     * Note that this does not completely remove all logging functionality.\\n     * This only stops a function from logging when the function is successful.\\n     * If the function fails, it will still log the reason for failure.\\n     *\\n     * @param fn - Name of function for which to disable logging.\\n     */\\n    disableLog(fn: string): void;\\n  \\n    /**\\n     * Enable logging for a certain function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Re-enables logging for the given function. If `ALL` is passed into this\\n     * function as an argument, then it will revert the effects of disableLog(`ALL`).\\n     *\\n     * @param fn - Name of function for which to enable logging.\\n     */\\n    enableLog(fn: string): void;\\n  \\n    /**\\n     * Checks the status of the logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param fn - Name of function to check.\\n     * @returns Returns a boolean indicating whether or not logging is enabled for that function (or `ALL`)\\n     */\\n    isLogEnabled(fn: string): boolean;\\n  \\n    /**\\n     * Get all the logs of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns a script’s logs. The logs are returned as an array, where each line is an element in the array.\\n     * The most recently logged line is at the end of the array.\\n     * Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game’s options.\\n     * If the function is called with no arguments, it will return the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of script to get logs from.\\n     * @param host - Optional. Hostname of the server that the script is on.\\n     * @param args - Arguments to identify which scripts to get logs for.\\n     * @returns Returns an string array, where each line is an element in the array. The most recently logged line is at the end of the array.\\n     */\\n    getScriptLogs(fn?: string, host?: string, ...args: any[]): string[];\\n  \\n    /**\\n     * Open the tail window of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Opens a script’s logs. This is functionally the same as the tail Terminal command.\\n     *\\n     * If the function is called with no arguments, it will open the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * ns.tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of the script being tailed. If omitted, the current script is tailed.\\n     * @param host - Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional.\\n     * @param args - Arguments for the script being tailed.\\n     */\\n    tail(fn?: string, host?: string, ...args: any[]): void;\\n  \\n    /**\\n     * Get the list of servers connected to a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array containing the hostnames of all servers that are one\\n     * node way from the specified target server. The hostnames in the returned\\n     * array are strings.\\n     *\\n     * @param host - Optional, Hostname of the server to scan, default to current server.\\n     * @returns Returns an string of hostnames.\\n     */\\n    scan(host?: string): string[];\\n  \\n    /**\\n     * Runs NUKE.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Running NUKE.exe on a target server gives you root access which means you can executes scripts on said server. NUKE.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    nuke(host: string): void;\\n  \\n    /**\\n     * Runs BruteSSH.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    brutessh(host: string): void;\\n  \\n    /**\\n     * Runs FTPCrack.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    ftpcrack(host: string): void;\\n  \\n    /**\\n     * Runs relaySMTP.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    relaysmtp(host: string): void;\\n  \\n    /**\\n     * Runs HTTPWorm.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    httpworm(host: string): void;\\n  \\n    /**\\n     * Runs SQLInject.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the SQLInject.exe program on the target server. SQLInject.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @remarks RAM cost: 0.05 GB\\n     * @param host - Hostname of the target server.\\n     */\\n    sqlinject(host: string): void;\\n  \\n    /**\\n     * Start another script on the current server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Run a script as a separate process. This function can only be used to run scripts located on the\\n     * current server (the server running the script that calls this function). Requires a significant\\n     * amount of RAM to run this command.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * ns.run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * ns.run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * ns.run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @param script - Filename of script to run.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    run(script: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Start another script on any server.\\n     * @remarks\\n     * RAM cost: 1.3 GB\\n     *\\n     * Run a script as a separate process on a specified server. This is similar to the run function\\n     * except that it can be used to run a script on any server, instead of just the current server.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * ns.exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param host - Hostname of the `target server` on which to execute the script.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    exec(script: string, host: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Terminate current script and start another in 10s.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Terminates the current script, and then after a delay of about 10 seconds it will execute the\\n     * newly-specified script. The purpose of this function is to execute a new script without being\\n     * constrained by the RAM usage of the current one. This function can only be used to run scripts\\n     * on the local server.\\n     *\\n     * Because this function immediately terminates the script, it does not have a return value.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * ns.spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param numThreads - Number of threads to spawn new script with. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run.\\n     */\\n    spawn(script: string, numThreads?: number, ...args: string[]): void;\\n  \\n    /**\\n     * Terminate another script.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills the script on the target server specified by the script’s name and arguments.\\n     * Remember that scripts are uniquely identified by both their name and arguments.\\n     * For example, if `foo.script` is run with the argument 1, then this is not the same as\\n     * `foo.script` run with the argument 2, even though they have the same code.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * ns.kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @param script - Filename or pid of the script to kill\\n     * @param host - Hostname of the server on which to kill the script.\\n     * @param args - Arguments to identify which script to kill.\\n     * @returns True if the script is successfully killed, and false otherwise.\\n     */\\n    kill(script: number): boolean;\\n    kill(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Terminate all scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills all running scripts on the specified server. This function returns true\\n     * if any scripts were killed, and false otherwise. In other words, it will return\\n     * true if there are any scripts running on the target server.\\n     * If no host is defined, it will kill all scripts, where the script is running.\\n     *\\n     * @param host - IP or hostname of the server on which to kill all scripts.\\n     * @returns True if any scripts were killed, and false otherwise.\\n     */\\n    killall(host?: string): boolean;\\n  \\n    /**\\n     * Terminates the current script immediately.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    exit(): void;\\n  \\n    /**\\n     * Copy file between servers.\\n     * @remarks\\n     * RAM cost: 0.6 GB\\n     *\\n     * Copies a script or literature (.lit) file(s) to another server. The files argument can be either a string\\n     * specifying a single file to copy, or an array of strings specifying multiple files to copy.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * await ns.scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * await ns.scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * //ns2, copies files from home to a target server\\n     * const server = ns.args[0];\\n     * const files = [\\\"hack.js\\\",\\\"weaken.js\\\",\\\"grow.js\\\"];\\n     * await ns.scp(files, \\\"home\\\", server);\\n     * ```\\n     * @param files - Filename or an array of filenames of script/literature files to copy.\\n     * @param source - Host of the source server, which is the server from which the file will be copied. This argument is optional and if it’s omitted the source will be the current server.\\n     * @param destination - Host of the destination server, which is the server to which the file will be copied.\\n     * @returns True if the script/literature file is successfully copied over and false otherwise. If the files argument is an array then this function will return true if at least one of the files in the array is successfully copied.\\n     */\\n    scp(files: string | string[], source: string, destination: string): Promise<boolean>;\\n  \\n    /**\\n     * List files on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with the filenames of all files on the specified server\\n     * (as strings). The returned array is sorted in alphabetic order.\\n     *\\n     * @param host - Host of the target server.\\n     * @param grep - A substring to search for in the filename.\\n     * @returns Array with the filenames of all files on the specified server.\\n     */\\n    ls(host: string, grep?: string): string[];\\n  \\n    /**\\n     * List running scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with general information about all scripts running on the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * const scripts = ps(\\\"home\\\");\\n     * for (let i = 0; i < scripts.length; ++i) {\\n     *     tprint(scripts[i].filename + ' ' + scripts[i].threads);\\n     *     tprint(scripts[i].args);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ps = ns.ps(\\\"home\\\");\\n     * for (script of ps) {\\n     *     ns.tprint(`${script.filename} ${ps[i].threads}`);\\n     *     ns.tprint(script.args);\\n     * }\\n     * ```\\n     * @param host - Host address of the target server. If not specified, it will be the current server’s IP by default.\\n     * @returns Array with general information about all scripts running on the specified target server.\\n     */\\n    ps(host?: string): ProcessInfo[];\\n  \\n    /**\\n     * Check if your have root access on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns a boolean indicating whether or not the player has root access to the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * if (hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * if (ns.hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    ns.nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @param host - Host of the target server\\n     * @returns True if player has root access to the specified target server, and false otherwise.\\n     */\\n    hasRootAccess(host: string): boolean;\\n  \\n    /**\\n     * Returns a string with the hostname of the server that the script is running on.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Hostname of the server that the script is on.\\n     */\\n    getHostname(): string;\\n  \\n    /**\\n     * Returns the player’s current hacking level.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Player’s current hacking level\\n     */\\n    getHackingLevel(): number;\\n  \\n    /**\\n     * Get hacking related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacking related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHackingMultipliers();\\n     * print(mults.chance);\\n     * print(mults.growth);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {chance, growth} = ns.getHackingMultipliers();\\n     * print(chance);\\n     * print(growth);\\n     * ```\\n     * @returns Object containing the Player’s hacking related multipliers.\\n     */\\n    getHackingMultipliers(): HackingMultipliers;\\n  \\n    /**\\n     * Get hacknet related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacknet related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHacknetMultipliers();\\n     * print(mults.production);\\n     * print(mults.purchaseCost);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {production, purchaseCost} = ns.getHacknetMultipliers();\\n     * print(production);\\n     * print(purchaseCost);\\n     * ```\\n     * @returns Object containing the Player’s hacknet related multipliers.\\n     */\\n    getHacknetMultipliers(): HacknetMultipliers;\\n  \\n    /**\\n     * Returns a server object for the given server. Defaults to the running script's server if host is not specified.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * @param host - Optional. Hostname for the requested server object.\\n     * @returns The requested server object.\\n     */\\n    getServer(host?: string): Server;\\n  \\n    /**\\n     * Get money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of money available on a server.\\n     * Running this function on the home computer will return the player’s money.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * getServerMoneyAvailable(\\\"home\\\"); //Returns player's money\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * ns.getServerMoneyAvailable(\\\"home\\\"); // Returns player's money\\n     * ```\\n     * @param host - Host of target server\\n     * @returns Amount of money available on the server.\\n     */\\n    getServerMoneyAvailable(host: string): number;\\n  \\n    /**\\n     * Get maximum money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the maximum amount of money that can be available on a server.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Maximum amount of money available on the server.\\n     */\\n    getServerMaxMoney(host: string): number;\\n  \\n    /**\\n     * Get a server growth parameter.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the server’s instrinsic “growth parameter”. This growth\\n     * parameter is a number between 0 and 100 that represents how\\n     * quickly the server’s money grows. This parameter affects the\\n     * percentage by which the server’s money is increased when using the\\n     * grow function. A higher growth parameter will result in a\\n     * higher percentage increase from grow.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Parameter that affects the percentage by which the server’s money is increased when using the grow function.\\n     */\\n    getServerGrowth(host: string): number;\\n  \\n    /**\\n     * Get server security level.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the security level of the target server. A server’s security\\n     * level is denoted by a number, typically between 1 and 100\\n     * (but it can go above 100).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Security level of the target server.\\n     */\\n    getServerSecurityLevel(host: string): number;\\n  \\n    /**\\n     * Returns the minimum security level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns Minimum security level of the target server.\\n     */\\n    getServerMinSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated useless\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     * Returns the base security level of the target server. This is the security\\n     * level that the server starts out with. This is different than\\n     * getServerSecurityLevel because getServerSecurityLevel returns\\n     * the current security level of a server, which can constantly change due to\\n     * hack, grow, and weaken, calls on that server.\\n     * The base security level will stay the same until you reset by\\n     * installing an Augmentation(s).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Base security level of the target server.\\n     */\\n    getServerBaseSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated use getServerMaxRam / getServerUsedRam\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns an array with two elements that gives information about a server’s memory (RAM).\\n     * The first element in the array is the amount of RAM that the server has total (in GB).\\n     * The second element in the array is the amount of RAM that is currently being used on\\n     * the server (in GB).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var serverRam = getServerRam(\\\"helios\\\");\\n     * var totalRam = serverRam[0];\\n     * var ramUsed = serverRam[1];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const [totalRam, ramUsed] = ns.getServerRam(\\\"helios\\\");\\n     * ```\\n     * @param host - Host of target server.\\n     * @returns Array with total and used memory on the specified server.\\n     */\\n    getServerRam(host: string): [number, number];\\n  \\n    /**\\n     * Get the max RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns max ram\\n     */\\n    getServerMaxRam(host: string): number;\\n    /**\\n     * Get the used RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns used ram\\n     */\\n    getServerUsedRam(host: string): number;\\n  \\n    /**\\n     * Returns the required hacking level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The required hacking level of the target server.\\n     */\\n    getServerRequiredHackingLevel(host: string): number;\\n  \\n    /**\\n     * Returns the number of open ports required to successfully run NUKE.exe on the specified server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The number of open ports required to successfully run NUKE.exe on the specified server.\\n     */\\n    getServerNumPortsRequired(host: string): number;\\n  \\n    /**\\n     * Returns a boolean denoting whether or not the specified server exists.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns True if specified server exists, and false otherwise.\\n     */\\n    serverExists(host: string): boolean;\\n  \\n    /**\\n     * Check if a file exists.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified file exists on the target server.\\n     * The filename for scripts is case-sensitive, but for other types of files it is not.\\n     * For example, fileExists(“brutessh.exe”) will work fine, even though the actual program\\n     * is named 'BruteSSH.exe'.\\n     *\\n     * If the hostname/ip argument is omitted, then the function will search through the current\\n     * server (the server running the script that calls this function) for the file.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * // The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * ns.fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * // The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * ns.fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * @param filename - Filename of file to check.\\n     * @param host - Host of target server. This is optional. If it is not specified then the function will use the current server as the target server.\\n     * @returns True if specified file exists, and false otherwise.\\n     */\\n    fileExists(filename: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if a script is running.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified script is running on the target server.\\n     * Remember that a script is uniquely identified by both its name and its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", ns.getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @param args - Arguments to specify/identify which scripts to search for.\\n     * @returns True if specified script is running on the target server, and false otherwise.\\n     */\\n    isRunning(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Get general info about a running script.\\n     * @remarks\\n     * RAM cost: 0.3 GB\\n     *\\n     * Running with no args returns curent script.\\n     *\\n     * @returns info about a running script\\n     */\\n    getRunningScript(filename?: string | number, hostname?: string, ...args: (string | number)[]): RunningScript;\\n  \\n    /**\\n     * Get cost of purchasing a server.\\n     * @remarks\\n     * RAM cost: 0.25 GB\\n     *\\n     * Returns the cost to purchase a server with the specified amount of ram.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * for (i = 1; i <= 20; i++) {\\n     *     tprint(i + \\\" -- \\\" + getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * for (i = 1; i <= 20; i++) {\\n     *     ns.tprint(i + \\\" -- \\\" + ns.getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @param ram - Amount of RAM of a potential purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The cost to purchase a server with the specified amount of ram.\\n     */\\n    getPurchasedServerCost(ram: number): number;\\n  \\n    /**\\n     * Purchase a server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Purchased a server with the specified hostname and amount of RAM.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string\\n     * and have whitespace removed. Anything that resolves to an empty string will cause\\n     * the function to fail. If there is already a server with the specified hostname,\\n     * then the function will automatically append a number at the end of the hostname\\n     * argument value until it finds a unique hostname. For example, if the script calls\\n     * `purchaseServer(“foo”, 4)` but a server named “foo” already exists, the it will\\n     * automatically change the hostname to `foo-0`. If there is already a server with the\\n     * hostname `foo-0`, then it will change the hostname to `foo-1`, and so on.\\n     *\\n     * Note that there is a maximum limit to the amount of servers you can purchase.\\n     *\\n     * Returns the hostname of the newly purchased server as a string. If the function\\n     * fails to purchase a server, then it will return an empty string. The function will\\n     * fail if the arguments passed in are invalid, if the player does not have enough\\n     * money to purchase the specified server, or if the player has exceeded the maximum\\n     * amount of servers.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var ram = 64;\\n     * var prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ram = 64;\\n     * const prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    ns.purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @param hostname - Host of the purchased server.\\n     * @param ram - Amount of RAM of the purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The hostname of the newly purchased server.\\n     */\\n    purchaseServer(hostname: string, ram: number): string;\\n  \\n    /**\\n     * Delete a purchased server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Deletes one of your purchased servers, which is specified by its hostname.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string.\\n     * Whitespace is automatically removed from the string. This function will not delete a\\n     * server that still has scripts running on it.\\n     *\\n     * @param host - Host of the server to delete.\\n     * @returns True if successful, and false otherwise.\\n     */\\n    deleteServer(host: string): boolean;\\n  \\n    /**\\n     * Returns an array with the hostnames of all of the servers you have purchased.\\n     *\\n     * @remarks 2.25 GB\\n     * @returns Returns an array with the hostnames of all of the servers you have purchased.\\n     */\\n    getPurchasedServers(): string[];\\n  \\n    /**\\n     * Returns the maximum number of servers you can purchase.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum number of servers you can purchase.\\n     */\\n    getPurchasedServerLimit(): number;\\n  \\n    /**\\n     * Returns the maximum RAM that a purchased server can have.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum RAM that a purchased server can have.\\n     */\\n    getPurchasedServerMaxRam(): number;\\n  \\n    /**\\n     * Write data to a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function can be used to either write data to a text file (.txt).\\n     *\\n     * This function will write data to that text file. If the specified text file does not exist,\\n     * then it will be created. The third argument mode, defines how the data will be written to\\n     * the text file. If *mode is set to “w”, then the data is written in “write” mode which means\\n     * that it will overwrite all existing data on the text file. If mode is set to any other value\\n     * then the data will be written in “append” mode which means that the data will be added at the\\n     * end of the text file.\\n     *\\n     * @param handle - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @param mode - Defines the write mode. Only valid when writing to text files.\\n     */\\n    write(handle: string, data?: string[] | number | string, mode?: \\\"w\\\" | \\\"a\\\"): Promise<void>;\\n  \\n    /**\\n     * Attempt to write to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Attempts to write data to the specified Netscript Port.\\n     * If the port is full, the data will not be written.\\n     * Otherwise, the data will be written normally.\\n     *\\n     * @param port - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @returns True if the data is successfully written to the port, and false otherwise.\\n     */\\n    tryWritePort(port: number, data: string[] | number): Promise<boolean>;\\n  \\n    /**\\n     * Read content of a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to read data from a port or from a text file (.txt).\\n     *\\n     * This function will return the data in the specified text\\n     * file. If the text file does not exist, an empty string will be returned.\\n     *\\n     * @param handle - Port or text file to read from.\\n     * @returns Data in the specified text file or port.\\n     */\\n    read(handle: string): any;\\n  \\n    /**\\n     * Get a copy of the data from a port without popping it.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to peek at the data from a port. It returns the\\n     * first element in the specified port without removing that element. If\\n     * the port is empty, the string “NULL PORT DATA” will be returned.\\n     *\\n     * @param port - Port to peek. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    peek(port: number): any;\\n  \\n    /**\\n     * Clear data from a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Delete all data from that text file.\\n     *\\n     * @param handle - Text file to clear.\\n     */\\n    clear(handle: string): void;\\n  \\n    /**\\n     * Clear data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Deleta all data from the underlying queue.\\n     *\\n     * @param handle - Port to clear.\\n     */\\n    clearPort(handle: number): void;\\n  \\n    /**\\n     * Write data to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Write data to that netscript port.\\n     * @returns The data popped off the queue if it was full.\\n     */\\n    writePort(port: number, data: string | number): Promise<any>;\\n    /**\\n     * Read data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Read data from that port. A port is a serialized queue.\\n     * This function will remove the first element from that queue and return it.\\n     * If the queue is empty, then the string “NULL PORT DATA” will be returned.\\n     * @returns the data read.\\n     */\\n    readPort(port: number): any;\\n  \\n    /**\\n     * Get all data on a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Get a handle to a Netscript Port.\\n     *\\n     * WARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\\n     *\\n     * @see https://bitburner.readthedocs.io/en/latest/netscript/netscriptmisc.html#netscript-ports\\n     * @param port - Port number. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    getPortHandle(port: number): any[];\\n  \\n    /**\\n     * Delete a file.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Removes the specified file from the current server. This function works for every file\\n     * type except message (.msg) files.\\n     *\\n     * @param name - Filename of file to remove. Must include the extension.\\n     * @param host - Host Address of the server on which to delete the file. Optional. Defaults to current server.\\n     * @returns True if it successfully deletes the file, and false otherwise.\\n     */\\n    rm(name: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if any script with a filename is running.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns a boolean indicating whether any instance of the specified script is running\\n     * on the target server, regardless of its arguments.\\n     *\\n     * This is different than the isRunning function because it does not try to\\n     * identify a specific instance of a running script by its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", getHostname());\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", ns.getHostname());\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns True if the specified script is running, and false otherwise.\\n     */\\n    scriptRunning(script: string, host: string): boolean;\\n  \\n    /**\\n     * Kill all scripts with a filename.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Kills all scripts with the specified filename on the target server specified by hostname,\\n     * regardless of arguments.\\n     *\\n     * @param script - Filename of script to kill. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns true if one or more scripts were successfully killed, and false if none were.\\n     */\\n    scriptKill(script: string, host: string): boolean;\\n  \\n    /**\\n     * Returns the current script name.\\n     *\\n     * @remarks RAM cost: 0 GB\\n     * @returns Current script name.\\n     */\\n    getScriptName(): string;\\n  \\n    /**\\n     * Get the ram cost of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of RAM required to run the specified script on the target server.\\n     * Returns 0 if the script does not exist.\\n     *\\n     * @param script - Filename of script. This is case-sensitive.\\n     * @param host - Host of target server the script is located on. This is optional, If it is not specified then the function will se the current server as the target server.\\n     * @returns Amount of RAM required to run the specified script on the target server, and 0 if the script does not exist.\\n     */\\n    getScriptRam(script: string, host?: string): number;\\n  \\n    /**\\n     * Get the execution time of a hack() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *When `hack` completes an amount of money is stolen depending on the player's skills.\\n     * Returns the amount of time in milliseconds it takes to execute the hack Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the hack time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the hack Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getHackTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a grow() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the grow time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the grow Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getGrowTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a weaken() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the weaken Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the weaken time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the weaken Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getWeakenTime(host: string): number;\\n  \\n    /**\\n     * Get the income of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of income the specified script generates while online\\n     * (when the game is open, does not apply for offline income). Remember that\\n     * a script is uniquely identified by both its name and its arguments. So for\\n     * example if you ran a script with the arguments “foodnstuff” and “5” then\\n     * in order to use this function to get that script’s income you must specify\\n     * those same arguments in the same order in this function call.\\n     *\\n     * This function can also be called with no arguments.\\n     * If called with no arguments, then this function will return an array of two values.\\n     * The first value is the total income (dollar / second) of all of your active scripts\\n     * (scripts that are currently running on any server).\\n     * The second value is the total income (dollar / second) that you’ve earned from scripts\\n     * since you last installed Augmentations.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of income the specified script generates while online.\\n     */\\n    getScriptIncome(): [number, number];\\n    getScriptIncome(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Get the exp gain of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of hacking experience the specified script generates while online\\n     * (when the game is open, does not apply for offline experience gains). Remember that a\\n     * script is uniquely identified by both its name and its arguments.\\n     *\\n     * This function can also return the total experience gain rate of all of your active\\n     * scripts by running the function with no arguments.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of hacking experience the specified script generates while online.\\n     */\\n    getScriptExpGain(): number;\\n    getScriptExpGain(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Returns the amount of time in milliseconds that have passed since you last installed Augmentations.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Time in milliseconds that have passed since you last installed Augmentations.\\n     */\\n    getTimeSinceLastAug(): number;\\n  \\n    /**\\n     * Format a string.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    sprintf(format: string, ...args: string[]): string;\\n  \\n    /**\\n     * Format a string with an array of arguments.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    vsprintf(format: string, args: string[]): string;\\n  \\n    /**\\n     * Format a number\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Converts a number into a string with the specified formatter.\\n     * This uses the numeraljs library, so the formatters must be compatible with that.\\n     * This is the same function that the game itself uses to display numbers.\\n     *\\n     * see: http://numeraljs.com/\\n     * @param n - Number to format.\\n     * @param format - Formatter.\\n     * @returns Formated number.\\n     */\\n    nFormat(n: number, format: string): string;\\n  \\n    /**\\n     * Format time to readable string\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param milliseconds - Number of millisecond to format.\\n     * @param milliPrecision - Format time with subsecond precision, defaults to false.\\n     * @returns The formatted time.\\n     */\\n    tFormat(milliseconds: number, milliPrecision?: boolean): string;\\n  \\n    /**\\n     * Prompt the player with a Yes/No modal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Prompts the player with a dialog box with two options: “Yes” and “No”.\\n     * This function will return true if the player click “Yes” and false if\\n     * the player clicks “No”. The script’s execution is halted until the player\\n     * selects one of the options.\\n     *\\n     * @param txt - Text to appear in the prompt dialog box.\\n     * @returns True if the player click “Yes” and false if the player clicks “No”.\\n     */\\n    prompt(txt: string): Promise<boolean>;\\n  \\n    /**\\n     * Open up a message box.\\n     * @param msg - Message to alert.\\n     */\\n    alert(msg: any): void;\\n  \\n    /**\\n     * Queue a toast (bottom-right notification).\\n     * @param msg - Message in the toast.\\n     * @param variant - Type of toast, must be one of success, info, warning, error. Defaults to success.\\n     * @param duration - Duration of toast in ms. Can also be `null` to create a persistent toast. Defaults to 2000\\n     */\\n    toast(msg: any, variant?: string, duration?: number | null): void;\\n  \\n    /**\\n     * Download a file from the internet.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Retrieves data from a URL and downloads it to a file on the specified server.\\n     * The data can only be downloaded to a script (.script, .ns, .js) or a text file (.txt).\\n     * If the file already exists, it will be overwritten by this command.\\n     * Note that it will not be possible to download data from many websites because they\\n     * do not allow cross-origin resource sharing (CORS).\\n     *\\n     * IMPORTANT: This is an asynchronous function that returns a Promise.\\n     * The Promise’s resolved value will be a boolean indicating whether or not the data was\\n     * successfully retrieved from the URL. Because the function is async and returns a Promise,\\n     * it is recommended you use wget in NetscriptJS (Netscript 2.0).\\n     *\\n     * In NetscriptJS, you must preface any call to wget with the await keyword (like you would hack or sleep).\\n     * wget will still work in Netscript 1.0, but the functions execution will not be synchronous\\n     * (i.e. it may not execute when you expect/want it to).\\n     * Furthermore, since Promises are not supported in ES5,\\n     * you will not be able to process the returned value of wget in Netscript 1.0.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * await ns.wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @param url - URL to pull data from.\\n     * @param target - Filename to write data to. Must be script or text file.\\n     * @param host - Optional hostname/ip of server for target file.\\n     * @returns True if the data was successfully retrieved from the URL, false otherwise.\\n     */\\n    wget(url: string, target: string, host?: string): Promise<boolean>;\\n  \\n    /**\\n     * Returns the amount of Faction favor required to be able to donate to a faction.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @returns Amount of Faction favor required to be able to donate to a faction.\\n     */\\n    getFavorToDonate(): number;\\n  \\n    /**\\n     * Get the current Bitnode multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the current BitNode multipliers.\\n     * This function requires you to be in Bitnode 5 or have Source-File 5 in order to run.\\n     * The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%).\\n     * The multipliers represent the difference between the current BitNode and\\n     * the original BitNode (BitNode-1).\\n     *\\n     * For example, if the CrimeMoney multiplier has a value of 0.1, then that means\\n     * that committing crimes in the current BitNode will only give 10% of the money\\n     * you would have received in BitNode-1.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var mults = getBitNodeMultipliers();\\n     * print(mults.ServerMaxMoney);\\n     * print(mults.HackExpGain);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\\n     * print(ServerMaxMoney);\\n     * print(HackExpGain);\\n     * ```\\n     * @returns Object containing the current BitNode multipliers.\\n     */\\n    getBitNodeMultipliers(): BitNodeMultipliers;\\n  \\n    /**\\n     * Get a list of acquired Source-Files.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns an array of source files\\n     *\\n     * @returns Array containing an object with number and level of the source file.\\n     */\\n    getOwnedSourceFiles(): SourceFileLvl[];\\n  \\n    /**\\n     * Get information about the player.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Returns an object with information on the current player.\\n     *\\n     * @returns Player info\\n     */\\n    getPlayer(): Player;\\n  \\n    /**\\n     * Add callback function when the script dies\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * NS2 exclusive\\n     *\\n     * Add callback to be executed when the script dies.\\n     */\\n    atExit(f: () => void): void;\\n  \\n    /**\\n     * Parse command line flags.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Allows unix like flag parsing.\\n     * @example\\n     * ```ts\\n     * // example.script\\n     * var data = flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     * ]);\\n     * tprint(data);\\n     *\\n     * // example.ns\\n     * export async function main(ns) {\\n     *   const data = ns.flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     *   ]);\\n     *   ns.tprint(data);\\n     * }\\n     *\\n     * // [home ~/]> run example.script\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false}\\n     * // [home ~/]> run example.script --delay 3000\\n     * // {\\\"_\\\":[],\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi\\n     * // {\\\"_\\\":[],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\",\\\"exclude\\\":[\\\"a\\\",\\\"b\\\"]}\\n     * // [home ~/]> run example.script --help\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":true}\\n     * ```\\n     */\\n    flags(schema: [string, string | number | boolean | string[]][]): any;\\n  }\\n  \\n  /**\\n   * Corporation Office API\\n   * @remarks\\n   * Requires the Office API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface OfficeAPI {\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - name of the employee\\n     * @param job - Name of the job.\\n     * @returns A promise that is fulfilled when the assignment is complete.\\n     */\\n    assignJob(divisionName: string, cityName: string, employeeName: string, job: string): Promise<void>;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns The newly hired employee, if any\\n     */\\n    hireEmployee(divisionName: string, cityName: string): Employee | undefined;\\n    /**\\n     * Upgrade office size.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param size - Amount of positions to open\\n     */\\n    upgradeOfficeSize(divisionName: string, cityName: string, size: number): void;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param costPerEmployee - Amount to spend per employee.\\n     * @returns Amount of happiness increased.\\n     */\\n    throwParty(divisionName: string, cityName: string, costPerEmployee: number): Promise<number>;\\n    /**\\n     * Buy coffee for your employees\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns A promise that is fulfilled when the coffee is served.\\n     */\\n    buyCoffee(divisionName: string, cityName: string): Promise<void>;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     */\\n    hireAdVert(divisionName: string): void;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     * @param researchName - Name of the research\\n     */\\n    research(divisionName: string, researchName: string): void;\\n    /**\\n     * Get data about an office\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns Office data\\n     */\\n    getOffice(divisionName: string, cityName: string): Office;\\n    /**\\n     * Get data about an employee\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - Name of the employee\\n     * @returns Employee data\\n     */\\n    getEmployee(divisionName: string, cityName: string, employeeName: string): Employee;\\n  }\\n  \\n  /**\\n   * Corporation Warehouse API\\n   * @remarks\\n   * Requires the Warehouse API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface WarehouseAPI {\\n    /**\\n     * Set material sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     */\\n    sellMaterial(divisionName: string, cityName: string, materialName: string, amt: string, price: string): void;\\n    /**\\n     * Set product sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     * @param all - Sell in all city\\n     */\\n    sellProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      amt: string,\\n      price: string,\\n      all: boolean,\\n    ): void;\\n    /**\\n     * Discontinue a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     */\\n    discontinueProduct(divisionName: string, productName: string): void;\\n    /**\\n     * Set smart supply\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param enabled - smart supply enabled\\n     */\\n    setSmartSupply(divisionName: string, cityName: string, enabled: boolean): void;\\n    /**\\n     * Set material buy data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to buy\\n     */\\n    buyMaterial(divisionName: string, cityName: string, materialName: string, amt: number): void;\\n    /**\\n     * Get warehouse data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns warehouse data\\n     */\\n    getWarehouse(divisionName: string, cityName: string): Warehouse;\\n    /**\\n     * Get product data\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @returns product data\\n     */\\n    getProduct(divisionName: string, productName: string): Product;\\n    /**\\n     * Get material data\\n     * @param divisionName - Name of the division\\n     * @param materialName - Name of the material\\n     * @returns material data\\n     */\\n    getMaterial(divisionName: string, cityName: string, materialName: string): Material;\\n    /**\\n     * Set market TA 1 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA1(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA2(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 1 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set material export data\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    exportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Cancel material export\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    cancelExportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Purchase warehouse for a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    purchaseWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Upgrade warehouse\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    upgradeWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Create a new product\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param designInvest - Amount to invest for the design of the product.\\n     * @param marketingInvest - Amount to invest for the marketing of the product.\\n     */\\n    makeProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      designInvest: number,\\n      marketingInvest: number,\\n    ): void;\\n  }\\n  \\n  /**\\n   * Corporation API\\n   * @public\\n   */\\n  export interface Corporation extends WarehouseAPI, OfficeAPI {\\n    /**\\n     * Get corporation data\\n     * @returns Corporation data\\n     */\\n    getCorporation(): CorporationInfo;\\n    /**\\n     * Get division data\\n     * @param divisionName - Name of the division\\n     * @returns Division data\\n     */\\n    getDivision(divisionName: string): Division;\\n    /**\\n     * Expand to a new industry\\n     * @param industryType - Name of the industry\\n     * @param divisionName - Name of the division\\n     */\\n    expandIndustry(industryType: string, divisionName: string): void;\\n    /**\\n     * Expand to a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    expandCity(divisionName: string, cityName: string): void;\\n    /**\\n     * Unlock an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    unlockUpgrade(upgradeName: string): void;\\n    /**\\n     * Level an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    levelUpgrade(upgradeName: string): void;\\n    /**\\n     * Issue dividends\\n     * @param percent - Percent of profit to issue as dividends.\\n     */\\n    issueDividends(percent: number): void;\\n  }\\n  \\n  /**\\n   * General info about a corporation\\n   * @public\\n   */\\n  interface CorporationInfo {\\n    /** Name of the corporation */\\n    name: string;\\n    /** Funds available */\\n    funds: number;\\n    /** Revenue per second this cycle */\\n    revenue: number;\\n    /** Expenses per second this cycle */\\n    expenses: number;\\n    /** Indicating if the company is public */\\n    public: boolean;\\n    /** Total number of shares issues by this corporation */\\n    totalShares: number;\\n    /** Amount of share owned */\\n    numShares: number;\\n    /** Cooldown until shares can be sold again */\\n    shareSaleCooldown: number;\\n    /** Amount of shares issued */\\n    issuedShares: number;\\n    /** Price of the shares */\\n    sharePrice: number;\\n    /** State of the corporation. Possible states are START, PURCHASE, PRODUCTION, SALE, EXPORT. */\\n    state: string;\\n  }\\n  \\n  /**\\n   * Employee in an office\\n   * @public\\n   */\\n  interface Employee {\\n    /** Name of the employee */\\n    name: string;\\n    /** Morale */\\n    mor: number;\\n    /** Happiness */\\n    hap: number;\\n    /** Energy */\\n    ene: number;\\n    int: number;\\n    cha: number;\\n    exp: number;\\n    cre: number;\\n    eff: number;\\n    /** Salary */\\n    sal: number;\\n    /** City */\\n    loc: string;\\n    /** Current job */\\n    pos: string;\\n  }\\n  \\n  /**\\n   * Product in a warehouse\\n   * @public\\n   */\\n  interface Product {\\n    /** Name of the product */\\n    name: string;\\n    /** Demand for the product */\\n    dmd: number;\\n    /** Competition for the product */\\n    cmp: number;\\n    /** Production cost */\\n    pCost: number;\\n    /** Sell cost, can be \\\"MP+5\\\" */\\n    sCost: string | number;\\n  }\\n  \\n  /**\\n   * Material in a warehouse\\n   * @public\\n   */\\n  interface Material {\\n    /** Name of the material */\\n    name: string;\\n    /** Amount of material  */\\n    qty: number;\\n    /** Quality of the material */\\n    qlt: number;\\n  }\\n  \\n  /**\\n   * Warehouse for a division in a city\\n   * @public\\n   */\\n  interface Warehouse {\\n    /** Amount of size upgrade bought */\\n    level: number;\\n    /** City in which the warehouse is located */\\n    loc: string;\\n    /** Total space in the warehouse */\\n    size: number;\\n    /** Used space in the warehouse */\\n    sizeUsed: number;\\n  }\\n  \\n  /**\\n   * Office for a division in a city.\\n   * @public\\n   */\\n  interface Office {\\n    /** City of the office */\\n    loc: string;\\n    /** Maximum number of employee */\\n    size: number;\\n    /** Minimum amount of energy of the employees */\\n    minEne: number;\\n    /** Maximum amount of energy of the employees */\\n    maxEne: number;\\n    /** Minimum happiness of the employees */\\n    minHap: number;\\n    /** Maximum happiness of the employees */\\n    maxHap: number;\\n    /** Maximum morale of the employees */\\n    maxMor: number;\\n    /** Name of all the employees */\\n    employees: string[];\\n    /** Positions of the employees */\\n    employeeProd: EmployeeJobs;\\n  }\\n  \\n  /**\\n   * Object representing the number of employee in each job.\\n   * @public\\n   */\\n  interface EmployeeJobs {\\n    Operations: number;\\n    Engineer: number;\\n    Business: number;\\n    Management: number;\\n    \\\"Research & Development\\\": number;\\n    Training: number;\\n    Unassigned: number;\\n  }\\n  \\n  /**\\n   * Corporation division\\n   * @public\\n   */\\n  interface Division {\\n    /** Name of the division */\\n    name: string;\\n    /** Type of division, like Aggriculture */\\n    type: string;\\n    /** Awareness of the division */\\n    awareness: number;\\n    /** Popularity of the division */\\n    popularity: number;\\n    /** Production multiplier */\\n    prodMult: number;\\n    /** Amount of research in that division */\\n    research: number;\\n    /** Revenue last cycle */\\n    lastCycleRevenue: number;\\n    /** Expenses last cycle */\\n    lastCycleExpenses: number;\\n    /** Revenue this cycle */\\n    thisCycleRevenue: number;\\n    /** Expenses this cycle */\\n    thisCycleExpenses: number;\\n    /** All research bought */\\n    upgrades: number[];\\n    /** Cities in which this division has expanded */\\n    cities: string[];\\n  }\\n  \\n  /**\\n   * Interface Theme\\n   * @internal\\n   */\\n  interface UserInterfaceTheme {\\n    [key: string]: string | undefined;\\n    primarylight: string;\\n    primary: string;\\n    primarydark: string;\\n    successlight: string;\\n    success: string;\\n    successdark: string;\\n    errorlight: string;\\n    error: string;\\n    errordark: string;\\n    secondarylight: string;\\n    secondary: string;\\n    secondarydark: string;\\n    warninglight: string;\\n    warning: string;\\n    warningdark: string;\\n    infolight: string;\\n    info: string;\\n    infodark: string;\\n    welllight: string;\\n    well: string;\\n    white: string;\\n    black: string;\\n    hp: string;\\n    money: string;\\n    hack: string;\\n    combat: string;\\n    cha: string;\\n    int: string;\\n    rep: string;\\n    disabled: string;\\n    backgroundprimary: string;\\n    backgroundsecondary: string;\\n    button: string;\\n  }\",\"filename\":\"/types/NetscriptDefinitions.d.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":433,\"_hash\":\"4b76b2f549749e8bb971f716b234063dc0844d2789841eee83b1b326816e1c03\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** This is just an arbitrary identifier to signal that this script has finished redeployment */\\r\\nexport const DeployKey = \\\"6uTdsrmCVG8^Bee*^UB46myYQya&4Qc#\\\";\\r\\n/** There is no way to get how this script is called, therefore it's hardcoded here */\\r\\nexport const ScriptName = \\\"init.js\\\";\\r\\nexport const DeploymenScriptFolder = \\\"/deployment/\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const SelfUpdateFile = \\\"self-update.js\\\";\\r\\nexport const RedeployFile = \\\"redeploy.js\\\";\\r\\nexport const SelfUpdateLocation = `${DeploymenScriptFolder}${SelfUpdateFile}`;\\r\\nexport const RedeployLocation = `${DeploymenScriptFolder}${RedeployFile}`;\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.ps().filter(x => x.filename !== ns.getScriptName()).forEach(x => ns.kill(x.pid));\\r\\n    const pid = ns.exec(SelfUpdateLocation, HomeHost, 1, ...ns.args);\\r\\n    if (pid === 0) {\\r\\n        ns.tprint(`## FAILED to spawn self-updater, start manually with: run ${SelfUpdateLocation} -t 1`);\\r\\n        return;\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`## Spawned self updater, PID: [${pid}]`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsZ0dBQWdHO0FBQ2hHLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxrQ0FBa0MsQ0FBQTtBQUUzRCxzRkFBc0Y7QUFDdEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUM7QUFDcEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLHFCQUFxQixHQUFHLGNBQWMsRUFBRSxDQUFBO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcscUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7QUFFekU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25GLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxJQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsTUFBTSxDQUFDLDZEQUE2RCxrQkFBa0IsT0FBTyxDQUFDLENBQUM7UUFDbEcsT0FBTztLQUNWO1NBQU07UUFDSCxFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZEO0FBRUwsQ0FBQyJ9\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"server\":\"home\",\"moduleSequenceNumber\":434,\"_hash\":\"4088c86950e33baa5248ef455a82a522914000a008905faefe69972bb3deec44\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n * @typedef {import('./types/NetscriptDefinitions').Player} Player\\n */\\n\\nimport { numAvailableExploits } from './exploits.js';\\nimport { formatMoney } from './formatting.js';\\n\\n/**\\n * @class\\n * @constructor\\n * @public\\n */\\nexport class Zombie {\\n\\t/**\\n\\t * @param {Server} server\\n\\t * @param {NS} ns\\n\\t * @param {string} parentHostname\\n\\t * @param {number} depth\\n\\t */\\n\\tconstructor(server, ns, parentHostname = undefined, depth = 0) {\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.hostname = server.hostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.growth = Math.min(server.serverGrowth, 100);\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.memory = server.maxRam;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.level = server.requiredHackingSkill;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.ports = server.numOpenPortsRequired;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxMoney = server.moneyMax;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.security = server.minDifficulty;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.money = formatMoney(this.maxMoney);\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.faction = server.organizationName;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.parent = parentHostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.depth = depth;\\n\\t\\t/**\\n\\t\\t * @type {boolean}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.setup = false;\\n\\t\\tthis.updateStats(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Updates cached computed statistics with latest live information\\n\\t * @param {NS} ns\\n\\t */\\n\\tupdateStats(ns) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tthis.server = ns.getServer(this.hostname);\\n\\t\\tthis.hackEffect = calculateMaxMoneyHacked(this.server, player);\\n\\t\\tthis.effect = (this.hackEffect * 100).toFixed(2);\\n\\t\\t\\n\\n\\t\\t/**\\n\\t\\t * maximum number of threads that should be used to target this server for naive loops\\n\\t\\t * @property\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxTargetingThreads = (this.hackThreads * 25); // maximum number of threads that can target the server for naive hack loops\\n\\t\\tthis.hackChance = calculateMaxHackingChance(this.server, player);\\n\\t\\tthis.chance = (this.hackChance * 100).toFixed(0);\\n\\t\\tthis.usedMemory = this.server.ramUsed;\\n\\t\\tthis.availableMemory = this.memory - this.usedMemory;\\n\\t\\tthis.root = this.server.hasAdminRights;\\n\\t\\tthis.contracts = ns.ls(this.hostname, \\\".cct\\\").length;\\n\\t\\tthis.weakenTime = calculateMinWeakenTime(this.server, player);\\n\\t\\tthis.availableMoney = this.server.moneyAvailable;\\n\\t\\tthis.weak = this.weakenTime.toFixed(0);\\n\\t\\tthis.currentSecurity = this.server.hackDifficulty;\\n\\t\\tthis.shouldCrack = this.root ? \\\"done\\\" : (this.level <= ns.getHackingLevel() && this.ports <= numAvailableExploits(ns)) ? \\\"true\\\" : \\\"false\\\";\\n\\t\\tthis.backdoor = this.server.backdoorInstalled;\\n\\t\\tthis.xps = (calculateXp(this.server, player) / this.weakenTime).toFixed(2);\\n\\t\\treturn this;\\n\\t}\\n\\n\\tget hackThreads() {\\n\\t\\tlet threads = Math.max(Math.floor(35.82 / (this.hackEffect * 100)), 1); // 35.82% per hack will give 30% final funds after 4 hacks\\n\\t\\treturn threads === Number.POSITIVE_INFINITY ? 0 : threads;\\n\\t}\\n\\n\\t/**\\n\\t * (maxMoney ^ 1.25) * hackChance * hackEffect * (growth ^ 1.1)\\n\\t */\\n\\tget currentRating() {\\n\\t\\treturn this.root ? (Math.pow(this.maxMoney, 1.25) * this.hackEffect * Math.pow(Math.min(this.growth, 100), 1.1) / this.weakenTime) / 1e3 : 0;\\n\\t}\\n\\n\\tget rating() {\\n\\t\\treturn formatMoney(this.currentRating / 1e3);\\n\\t}\\n\\n\\tget shouldGrow() {\\n\\t\\treturn this.availableMoney < this.maxMoney;\\n\\t}\\n\\n\\tget maxRunningThreads() {\\n\\t\\tlet maxThreads = Math.floor(this.memory / 1.75);\\n\\t\\treturn this.hostname === \\\"home\\\" ? Math.floor(maxThreads * .8) : maxThreads;\\n\\t}\\n\\n\\tisAtMinSecurity() {\\n\\t\\treturn this.currentSecurity === this.security;\\n\\t}\\n\\n\\tisAtMaxMoney() {\\n\\t\\treturn this.maxMoney === this.availableMoney;\\n\\t}\\n\\n\\t/**\\n\\t * @param {string} scriptName\\n\\t */\\n\\tisScriptRunning(ns, scriptName) {\\n\\t\\treturn ns.scriptRunning(scriptName, this.hostname);\\n\\t}\\n\\n\\t/**\\n\\t * @param {Zombie} target\\n\\t * @param {string} scriptName\\n\\t */\\n\\tgetRunningScriptLogs(ns, target, scriptName) {\\n\\t\\tlet script = ns.getRunningScript(scriptName, this.hostname, target.hostname);\\n\\t\\treturn script ? script.logs : [];\\n\\t}\\n\\n\\t/**\\n\\t * @param {string[]} files \\n\\t */\\n\\tasync uploadFiles(ns, files) {\\n\\t\\tawait ns.scp(files, this.hostname);\\n\\t}\\n\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateXp(server, player) {\\n\\tif (server.baseDifficulty == null) {\\n\\t\\tserver.baseDifficulty = server.hackDifficulty;\\n\\t}\\n\\treturn 3 + (server.baseDifficulty * player.hacking_exp_mult * .03);\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateMinWeakenTime(server, player) {\\n\\tconst difficultyMult = server.requiredHackingSkill * server.minDifficulty;\\n\\n\\tconst baseSkill = 50;\\n\\tlet skillFactor = 2.5 * difficultyMult + 500;\\n\\n\\tskillFactor /= player.hacking + baseSkill;\\n\\n\\tconst weakenTimeMultiplier = 20;\\n\\treturn (weakenTimeMultiplier * skillFactor) /\\n\\t\\t(player.hacking_speed_mult * calculateIntelligenceBonus(player.intelligence, 1));\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxHackingChance(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = 1.75 * player.hacking;\\n\\tconst skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n\\tconst chance = skillChance * difficultyMult * player.hacking_chance_mult * calculateIntelligenceBonus(player.intelligence, 1);\\n\\treturn Math.min(Math.max(chance, 0), 1);\\n}\\n\\nfunction calculateIntelligenceBonus(intelligence, weight = 1) {\\n\\treturn 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxMoneyHacked(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n\\tconst percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / 240;\\n\\treturn Math.min(Math.max(percentMoneyHacked, 0), 1);\\n}\\n\\n/**\\n * Compares two Zombie objects\\n * @param {Zombie} a\\n * @param {Zombie} b\\n * @param {string} field\\n */\\nexport function compareZombie(a, b, field, asc = false) {\\n\\t// Swap order if we're sorting in ascending order\\n\\tif (asc) {\\n\\t\\t[a, b] = [b, a];\\n\\t}\\n\\t// for formatted fields, use the base field to sort off\\n\\tswitch (field) {\\n\\t\\tcase \\\"rating\\\":\\n\\t\\t\\tfield = \\\"currentRating\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"effect\\\":\\n\\t\\t\\tfield = \\\"hackEffect\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"weak\\\":\\n\\t\\t\\tfield = \\\"weakenTime\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"chance\\\":\\n\\t\\t\\tfield = \\\"hackChance\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"threads\\\":\\n\\t\\t\\tfield = \\\"maxTargetingThreads\\\";\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t}\\n\\tswitch (field) {\\n\\t\\tcase \\\"hostname\\\":\\n\\t\\tcase \\\"parent\\\":\\n\\t\\tcase \\\"faction\\\":\\n\\t\\tcase \\\"canRoot\\\":\\n\\t\\t\\treturn a.hostname.localeCompare(b.hostname);\\n\\t\\tcase \\\"nuke\\\":\\n\\t\\tcase \\\"root\\\":\\n\\t\\t\\treturn a[field] === b[field] ? 0 : a[field] ? -1 : 1;\\n\\t\\tdefault:\\n\\t\\t\\treturn b[field] - a[field];\\n\\t}\\n}\",\"filename\":\"zombie.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":435,\"_hash\":\"56b5e25fefd4c7a9f25717206f44cd440e9a26305e996893c0193707d039a840\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nimport { exploits, isExploitAvailable, runExploit } from './exploits.js';\\n\\n/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\n/**\\n * Performs a search from \\\"home\\\" server walking the tree up to the given depth, or all servers\\n * if no depth is given\\n * @param {{ns: NS, \\n * depth: number, \\n * type: string, \\n * host: string\\n * }} options\\n * @return {{depth: number, server: Server, parent: string}[]} list of all servers up to the given depth\\n */\\nexport function findServers(options) {\\n\\n\\tlet q = [ { server: options.ns.getServer(\\\"home\\\"), depth: 0 }];\\n\\tlet found = [];\\n\\twhile(q.length > 0) {\\n\\t\\tconst nextItem = q.shift();\\n\\t\\tif (nextItem.depth >= options.depth && options.depth > 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet children = getNonParentNeighbors(options.ns, nextItem.parent, nextItem.server.hostname, nextItem.depth + 1);\\n\\t\\tfor (const child of children) {\\n\\t\\t\\tif (found.indexOf(child.server.hostname) === -1) {\\n\\t\\t\\t\\tif (options.type === \\\"bfs\\\") {\\n\\t\\t\\t\\t\\tq.push(child);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tq.unshift(child);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfound.push(child);\\n\\t\\t\\t\\t// If we've specified to find a specific server exit when we've found it \\n\\t\\t\\t\\tif (options.host === child.server.hostname) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn found;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent The parent node\\n * @param {string} server The server to scan\\n * @param {number} depth How deep in the tree the server is\\n * @return {{depth: number, server: Server, parent: string}[]} - Array of all non-parent neighbor nodes\\n */\\n function getNonParentNeighbors(ns, parent, server, depth) {\\n\\treturn ns.scan(server)\\n\\t\\t.filter(child => child !== parent)\\n\\t\\t.map(child => {return { server: ns.getServer(child), parent: server, depth: depth}});\\n}\\n\\n/**\\n * Note: requires access to Singularity (Source File 4 - level 1)\\n * @param {string} server \\n */\\nexport async function installBackdoor(ns, server) {\\n\\tlet files = ns.getOwnedSourceFiles().filter(file => file.n === 4);\\n\\tif (!files || files[0].lvl < 1) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\t// if the server can't be rooted don't do anything\\n\\tif (!server.root) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\tlet chain = getConnectionChain(server);\\n\\t// If a connection can't be established don't try anything\\n\\tif (!chain) return false;\\n\\n\\tfor (hostname of chain) {\\n\\t\\tif (!ns.connect(hostname)) {\\n\\t\\t\\treturn Promise.resolve(false);\\n\\t\\t}\\n\\t}\\n\\tawait ns.installBackdoor();\\n\\tns.connect(\\\"home\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server \\n * @return {string[]} array of server hostnames\\n */\\nexport function getConnectionChain(ns, server) {\\n\\tlet allServers = {};\\n\\tfindServers({ns: ns, depth: -1, host: server, type: \\\"dfs\\\"})\\n\\t\\t.forEach(obj => allServers[obj.server.hostname] = obj);\\n\\t\\n\\t// ns.tprintf(\\\"%j\\\", allServers);\\n\\t// .reduce((obj, cur) => Object.defineProperty(obj, cur.server.hostname, { value: cur, writeable: true, enumerable: true } ), {});\\n\\n\\t// if the key doesn't exist the hostname isn't valid so we can't walk the connection chain backwards\\n\\tif (!allServers[server]) return;\\n\\n\\tlet chain = [ allServers[server] ];\\n\\tlet found = false;\\n\\twhile (!found) {\\n\\t\\tconst next = allServers[chain[0].parent];\\n\\t\\tif (typeof(next) === 'undefined') {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (next.parent === \\\"home\\\") {\\n\\t\\t\\tfound = true;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tchain.unshift(next);\\n\\t}\\n\\treturn found ? chain.map(current => current.server.hostname) : [];\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":72.8,\"server\":\"home\",\"moduleSequenceNumber\":436,\"_hash\":\"06434bec7cd74e0b30f8bdbb7d2c2d6d24e0996f0e903bb75d6eccd2f0edba7b\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {number} money Amount to format\\n * @return {string} formatted amount\\n */\\n export function formatMoney(money, digits = true) {\\n\\tconst signs = [\\n\\t\\t{ val: 1, sign: \\\"\\\", digs: 0 },\\n\\t\\t{ val: 1e3, sign: \\\"K\\\", digs: 1 },\\n\\t\\t{ val: 1e6, sign: \\\"M\\\", digs: 1 },\\n\\t\\t{ val: 1e9, sign: \\\"B\\\", digs: 1 },\\n\\t\\t{ val: 1e12, sign: \\\"T\\\", digs: 1 },\\n\\t\\t{ val: 1e15, sign: \\\"Q\\\", digs: 1 }\\n\\t]\\n\\tfor (const sign of signs.reverse()) {\\n\\t\\tif(money >= sign.val) {\\n\\t\\t\\treturn (money / sign.val).toFixed(sign.digs) + sign.sign;\\n\\t\\t}\\n\\t}\\n\\treturn money === 0 ? money.toFixed(0) : money.toFixed(2);\\n}\",\"filename\":\"formatting.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":437,\"_hash\":\"ea932da14af34add7de199a3633a53c1e0e0f8371e0e43014ad4268af571bc59\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { Logger } from './log.js';\\nimport { findServers } from './util.js';\\nimport { compareZombie, Zombie } from './zombie.js';\\n\\nlet _serverLogger;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t_serverLogger = new Logger(ns, false);\\n\\tlet HEADER_LENGTHS = {\\n\\t\\thostname: 18, depth: 3, contracts: 2, level: 4, shouldCrack: 5, root: 5, backdoor: 5, ports: 2, \\n\\t\\tmoney: 7, growth: 3, effect: 5, weak: 5, chance: 4, rating: 6, xps: 5, security: 4, parent: 18, faction: 0, maxTargetingThreads: 5\\n\\t};\\n\\n\\tlet SERVER_HEADER = {\\n\\t\\thostname: \\\"Server Name\\\", depth: \\\"Dep\\\", contracts: \\\"Cx\\\", level: \\\"LvL\\\", shouldCrack: \\\"Nuke\\\", root: \\\"Root\\\", backdoor: \\\"Back\\\", ports: \\\"P\\\", weak: \\\"Weak\\\",\\n\\t\\tmoney: \\\"Money\\\", growth: \\\"Gro\\\", effect: \\\"Eff\\\", chance: \\\"Chnc\\\", rating: \\\"Rate\\\", xps: \\\"XPS\\\", security: \\\"Sec\\\", parent: \\\"Parent\\\", faction: \\\"Faction\\\", maxTargetingThreads: \\\"Thrd\\\"\\n\\t};\\n\\n\\tlet [depth, sort] = ns.args;\\n\\tif (!depth || isNaN(depth)) {\\n\\t\\tdepth = -1;\\n\\t}\\n\\tif (!sort) {\\n\\t\\tsort = \\\"rating\\\";\\n\\t}\\n\\tlet asc = false;\\n\\tif (sort.endsWith(\\\"-\\\")) {\\n\\t\\tasc = true;\\n\\t\\tsort = sort.substring(0, sort.indexOf(\\\"-\\\"));\\n\\t}\\n\\n\\t_serverLogger.info(\\\"Starting scan with depth %i\\\", depth);\\n\\n\\tSERVER_HEADER[sort] = (asc ? \\\"-\\\" : \\\"+\\\") + SERVER_HEADER[sort] + (asc ? \\\"-\\\" : \\\"+\\\");\\n\\tHEADER_LENGTHS[sort] += 2;\\n\\tconst INFO_FORMAT = \\\"%(hostname)-\\\" + HEADER_LENGTHS.hostname \\n\\t+ \\\"s | %(depth)\\\" + HEADER_LENGTHS.depth\\n\\t+ \\\"s | %(contracts)\\\" + HEADER_LENGTHS.contracts \\n\\t+ \\\"s | %(level)\\\" + HEADER_LENGTHS.level \\n\\t+ \\\"s | %(shouldCrack)\\\" + HEADER_LENGTHS.shouldCrack\\n\\t+ \\\"s | %(root)\\\" + HEADER_LENGTHS.root\\n\\t+ \\\"s | %(backdoor)\\\" + HEADER_LENGTHS.backdoor\\n\\t+ \\\"s | %(ports)\\\" + HEADER_LENGTHS.ports\\n\\t+ \\\"s | %(money)\\\" + HEADER_LENGTHS.money\\n\\t+ \\\"s | %(growth)\\\" + HEADER_LENGTHS.growth\\n\\t+ \\\"s | %(effect)\\\" + HEADER_LENGTHS.effect\\n\\t+ \\\"s | %(maxTargetingThreads)\\\" + HEADER_LENGTHS.maxTargetingThreads\\n\\t+ \\\"s | %(weak)\\\" + HEADER_LENGTHS.weak\\n\\t+ \\\"s | %(chance)\\\" + HEADER_LENGTHS.chance\\n\\t+ \\\"s | %(rating)\\\" + HEADER_LENGTHS.rating\\n\\t+ \\\"s | %(xps)\\\" + HEADER_LENGTHS.xps\\n\\t+ \\\"s | %(security)\\\" + HEADER_LENGTHS.security\\n\\t+ \\\"s | %(parent)\\\" + HEADER_LENGTHS.parent\\n\\t+ \\\"s\\\" // | %(faction)s\\\";\\n\\n\\tconst servers = findServers({ns: ns, depth: depth, type: \\\"bfs\\\"})\\n\\t\\t.filter(current => !current.server.hostname.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(current => new Zombie(current.server, ns, current.parent, current.depth))\\n\\t\\t.sort((a, b) => compareZombie(a, b, sort, asc));\\n\\t_serverLogger.success(\\\"Found %i Servers: \\\", servers.length);\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\n\\n\\tfor (const zombie of servers) {\\n\\t\\tawait downloadTextFiles(ns, zombie.hostname)\\n\\t\\t\\t.then(() => _serverLogger.info(INFO_FORMAT, zombie));\\n\\t}\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\t\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n */\\nexport async function downloadTextFiles(ns, server) {\\n\\tconst files = ns.ls(server)\\n\\t\\t.filter(fileName => !fileName.endsWith(\\\".js\\\") && fileName !== \\\"A-Green-Tomorrow.lit\\\" && !ns.fileExists(fileName, \\\"home\\\"))\\n\\t\\t.filter(fileName => fileName.endsWith(\\\".txt\\\") || fileName.endsWith(\\\".lit\\\"));\\n\\tif (files.length == 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\t_serverLogger.warn(\\\"Found files to download: \\\" + files);\\n\\tawait ns.scp(files, server, \\\"home\\\");\\n}\",\"filename\":\"serverinfo.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"formatting.js\",\"url\":\"blob:file:///a32e1ee9-4c98-4e6e-981a-7eafb5ed1a9a\",\"moduleSequenceNumber\":437},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///070317cf-1013-4ceb-838a-652b99a6114b\",\"moduleSequenceNumber\":440},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///24fac72f-eccf-446c-991a-2ae09c84e72e\",\"moduleSequenceNumber\":435},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///818456f4-af7c-4446-a5ef-c9074ffa3110\",\"moduleSequenceNumber\":440},{\"filename\":\"util.js\",\"url\":\"blob:file:///8ba17a4a-716d-4780-be95-07997261a587\",\"moduleSequenceNumber\":436},{\"filename\":\"log.js\",\"url\":\"blob:file:///b985dc95-cc54-492f-a35a-ddcb44ae4151\",\"moduleSequenceNumber\":427},{\"filename\":\"serverinfo.js\",\"url\":\"blob:file:///7267e00a-031e-463c-8a64-ace72a0340be\",\"moduleSequenceNumber\":1855}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":1855,\"_hash\":\"e6c1e7d79eac25f4a8a2841ede30e7cec0af69fe775f914c5365e8c5addcfd02\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n/**\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"augmentinfo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":439,\"_hash\":\"37bc85d3d380af949270c66774c3ac05871b964a503bde7bd341b7bc7621aa3c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nexport const exploits = [\\\"brutessh.exe\\\", \\\"ftpcrack.exe\\\", \\\"relaysmtp.exe\\\", \\\"httpworm.exe\\\", \\\"sqlinject.exe\\\"];\\n\\n/**\\n * Counts the number of exploits that are currently unlocked\\n * @param {NS} ns \\n */\\nexport function numAvailableExploits(ns) {\\n    let total = 0;\\n    for (const exploit of exploits) {\\n        if (isExploitAvailable(ns, exploit)) {\\n            total++;\\n        }\\n    }\\n\\treturn total;\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploit \\n * @returns \\n */\\n export function isExploitAvailable(ns, exploit) {\\n\\treturn ns.fileExists(exploit);\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploitName\\n * @param {string} hostname\\n */\\nexport function runExploit(ns, exploitName, hostname) {\\n    switch(exploitName.toLocaleLowerCase()) {\\n        case \\\"ftpcrack\\\":\\n            return ns.ftpcrack(hostname);\\n        case \\\"relaysmtp\\\": \\n            return ns.relaysmtp(hostname);\\n        case \\\"httpworm\\\":\\n            return ns.httpworm(hostname);\\n        case \\\"sqlinject\\\":\\n            return ns.sqlinject(hostname);\\n        case \\\"brutessh\\\":\\n            return ns.brutessh(hostname);\\n        default:\\n\\n    }\\n}\",\"filename\":\"exploits.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.95,\"server\":\"home\",\"moduleSequenceNumber\":440,\"_hash\":\"0de65fbf6ee34ce155221e4b6778ef0c38fafb121b10557d115188c3a40ad3a7\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [threads] = ns.args;\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tns.exec(\\\"weaken.js\\\", threads, target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tns.exec(\\\"grow.js\\\", threads, target);\\n\\t\\t} else {\\n\\t\\t\\tns.exec(\\\"hack.js\\\", threads, target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-harakiri.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.1,\"server\":\"home\",\"moduleSequenceNumber\":441,\"_hash\":\"45231ae9c32afc4913e36049a208ae60f0e90391fce4e6935b0e2d932bbabd68\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n import * as log from \\\"./log.js\\\";\\n\\n/** \\t\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\t// initialize our logging system\\n\\tlog.initialize(ns);\\n    ns.disableLog(\\\"sleep\\\");\\n\\n\\t// run the main script\\n\\twhile(true) {\\n        let script = ns.getRunningScript(\\\"control.js\\\");\\n        if (!script) {\\n            log.warn(\\\"Restarting control.js\\\");\\n            ns.run(\\\"control.js\\\");\\n        } else {\\n            ns.print(\\\"control.js still running\\\");\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///cbdf7469-bc7c-42a6-96c8-90cbd0e2382e\"},{\"filename\":\"watcher.js\",\"url\":\"blob:file:///29301dcb-0c8e-4961-9b80-2b15ddb1e36e\"}],\"dependents\":[],\"ramUsage\":2.9,\"server\":\"home\",\"moduleSequenceNumber\":442,\"_hash\":\"6e0513b3d6caeaf16dfe91b8efb5e837b729ba36148d833a1fb008a83df5fe94\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers } from \\\"infodump.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = findServers(ns, -1).filter(server => shouldStartHack(server, ns));\\n\\n\\twhile (servers.length > 0) {\\n\\t\\tawait startHack(ns, servers.shift());\\n\\t}\\n}\\n\\n/**\\n * @param {string} server\\n * @param {NS} ns\\n * @return if this server should be exploited\\n */\\nfunction shouldStartHack(server, ns) {\\n\\treturn ns.hasRootAccess(server);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n * @returns pid\\n **/\\nasync function startHack(ns, server) {\\n\\tawait ns.scp(\\\"simple-hack.js\\\", server);\\n\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(server)) / 2.2);\\n\\tif (numThreads <= 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\tns.tprint(server + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(server);\\n\\tns.exec('simple-hack.js', server, numThreads);\\n\\treturn Promise.resolve();\\n}\",\"filename\":\"/old/start-hacks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":0,\"server\":\"home\",\"moduleSequenceNumber\":443,\"_hash\":\"d77c59122aeb0c9fb4084b9ba23d66ed241a542bd3bf5c061481854ba010b645\"}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"max-hardware\\\";\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 200_000_000;\\n\\twhile (true) {\\n\\t\\t// Ratios: 7 weaken, 36 hack, 57 grow\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\t// reduces security by threads * 0.05\\n\\t\\t\\t// takes 60 seconds to run\\n\\t\\t\\t// .000_83/sec\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\t// Raises security by threads * .004\\n\\t\\t\\t// takes 45 seconds to run\\n\\t\\t\\t// .000_088/sec (19 grows per 2 weaken)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\t// raises security by threads * .002\\n\\t\\t\\t// takes 15 seconds to run\\n\\t\\t\\t// .000_13/sec (12 hacks per 2 weaken)\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/simple-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":444,\"_hash\":\"6b0a2d084cf161df1c49615cbb2e11586591e7f7a3a43ae87b000d842359b45a\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.print(\\\"No target host given\\\");\\n\\t\\texit;\\n\\t}\\n\\tconst target = ns.args[0];\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst minMoney = ns.getServerMaxMoney(target) * .75;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":445,\"_hash\":\"09f67151de054766890602ddad2ca7124dc66bd2f49d4c525454f2764c58bc32\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.tprintf(\\\"ERROR| %s\\\", \\\"Missing arguments, check for runHost\\\");\\n\\t\\texit;\\n\\t}\\n\\tlet eTarget = ns.args[0];\\n\\tawait ns.scp(\\\"simple-hack.js\\\", eTarget);\\n\\t// const memNeeded = Math.max(ns.getScriptRam(\\\"weaken.js\\\"), ns.getScriptRam(\\\"hack.js\\\"), ns.getScriptRam(\\\"grow.js\\\"));\\n\\t// const controlMem = ns.getScriptRam(\\\"hack-harakiri.js\\\");\\n\\t// const minMemNeeded = controlMem + memNeeded;\\n\\t// if (ns.getServerMaxRam(eTarget) < minMemNeeded) {\\n\\t// \\tns.tprint(\\\"Server does not have enough memory to run hack control locally\\\");\\n\\t// \\texit;\\n\\t// }\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(eTarget)) / 2.2);\\n\\tns.tprint(eTarget + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(eTarget);\\n\\tns.exec('simple-hack.js', eTarget, numThreads);\\n}\",\"filename\":\"/old/remote-exec.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.05,\"server\":\"home\",\"moduleSequenceNumber\":446,\"_hash\":\"7d4f447ed51a5dd10455e91ae653c6a090fad6e8c962a989feb3af473697478c\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers, getRootForServer } from \\\"../util.js\\\";\\nimport * as log from \\\"../log\\\";\\nimport { Zombie } from \\\"../zombie\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlog.initialize(ns);\\n\\tlet servers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\t// TODO: connect to each server in the tree and backdoor it\\n\\t// servers.filter(server => ns.hasRootAccess(server))\\n\\t// \\t.forEach(server => checkBackDoor(server, ns));\\n\\tlet exploitable = servers.filter(server => server.shouldCrack === \\\"true\\\");\\n\\n\\tlog.info(\\\"Found exploitable servers: %j\\\", exploitable.map(zombie => zombie.hostname));\\n\\tif (ns.args[0] === \\\"-d\\\") {\\n\\t\\texploitable.forEach(server => getRootForServer(server));\\n\\t} else {\\n\\t\\tlog.warn(\\\"To spread to new servers run with -d options.\\\");\\n\\t}\\n}\",\"filename\":\"/old/spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":447,\"_hash\":\"a42ea0dd68be3b73ffc5d89d8e04cb14c2e442a8f81e24465404fcc50f138009\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"hacknodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":448,\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { formatMoney } from './formatting';\\nimport { Logger } from './log';\\n/** \\n * Main script for handling upgrades.\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\tconst log = new Logger(ns, false);\\n\\t// initialize our logging system\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getPurchasedServers\\\");\\n\\tns.disableLog(\\\"getPurchasedServerCost\\\");\\n\\n\\t// TODO: adjust\\n\\tconst maxPurchasedServers = 8;\\n\\tconst wantedRam = 8192;\\n\\tconst cost = ns.getPurchasedServerCost(wantedRam);\\n\\t// run the main script\\n\\t\\tns.tprint(\\\"Cost: \\\" + formatMoney(cost));\\n\\t\\tlet nextServerNum = ns.getPurchasedServers().length;\\n\\t\\twhile(nextServerNum < maxPurchasedServers && cost < ns.getPlayer().money) {\\n\\t\\t\\tif (ns.purchaseServer(\\\"zombie-\\\" + nextServerNum, wantedRam)) {\\n\\t\\t\\t\\tns.print(\\\"Purchased new server: zombie-\\\" + nextServerNum + \\\" | \\\" + wantedRam);\\n\\t\\t\\t\\tlog.success(\\\"Purchased new server: zombie-%(num)s - %(ram)sG\\\", { num: nextServerNum, ram: wantedRam});\\n\\t\\t\\t\\tnextServerNum++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if we fail to buy a server break out.\\n\\t\\t\\t\\tns.print(\\\"Failed to purchase the server, something went wrong.\\\");\\n\\t\\t\\t\\tlog.error(\\\"Failed to purchase a server, something went wrong: %(money)s / %(price)\\\", { money: ns.getPlayer().money, price: cost })\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// TODO: find best way to analyze and purchase hacknet nodes.\\n\\t\\t\\n\\t\\t//TODO: make this purchase TOR + programs (requires Source file 4)?\\n\\n\\t\\t// await ns.sleep(30000);\\n\\t\\n}\",\"filename\":\"upgrades.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///c2f59c74-4973-45eb-b92e-432f6c200d96\",\"moduleSequenceNumber\":293099},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///0683200a-4f22-46d5-a51f-49d900eaad16\",\"moduleSequenceNumber\":293109},{\"filename\":\"upgrades.js\",\"url\":\"blob:file:///5f7e7e50-eaaa-470e-ab81-c1d0b664ec28\",\"moduleSequenceNumber\":323427}],\"dependents\":[],\"ramUsage\":6.85,\"server\":\"home\",\"moduleSequenceNumber\":449,\"_hash\":\"d549d7a94d67a7109676aa8518d0e1ec548122d1fb49010377bdf9e2d8b432f5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { findServers, getRootForServer } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport * as logger from \\\"./log.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\t// initialize our logging system\\n\\tlogger.initialize(ns);\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n * @param {Zombie[]} servers\\n * @param {Zombie} target\\n * @param {boolean} setup\\n */\\nasync function control(ns) {\\n\\tconst home = new Zombie(ns.getServer(\\\"home\\\"), ns);\\n\\tlet servers = await findNewServers(ns);\\n\\tlet runners = servers.filter(zombie => zombie.memory > 0);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const zombie of runners) {\\n\\t\\tif (zombie.hostname !== \\\"home\\\") {\\n\\t\\t\\tdestroy(zombie);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\tlet maxThreads = countTotalAvailableThreads(runners);\\n\\tlet targets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\tlogger.info(\\\"%(stage)s | Starting up against %(target)s using %(threads)d total threads.\\\", \\n\\t\\t{ stage: targets[0].setup ? \\\"SETUP\\\" : \\\"HACK\\\", target: targets[0].zombie.hostname, threads: maxThreads });\\n\\twhile (true) {\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tif (target.setup && target.zombie.isAtMinSecurity() && target.zombie.isAtMaxMoney()) {\\n\\t\\t\\t\\tlogger.success(\\\"Finished hack setup: %s\\\", targets[0].zombie.hostname);\\n\\t\\t\\t\\tns.print(\\\"Finished hack setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// TODO: adjust ratio reselection to allow for more than 2 servers.\\n\\t\\tif (targets.length === 1 && !targets[0].setup && targets[0].zombie.availableMoney < targets[0].zombie.maxMoney * .20) {\\n\\t\\t\\ttargets[0].setup = true;\\n\\t\\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t// if (servers[1] && targets[0].threadRatio > .5) {\\n\\t\\t\\t// \\ttargets[0].threadRatio -= .1;\\n\\t\\t\\t// \\ttargets[0].threads = maxThreads * targets[0].threadRatio;\\n\\t\\t\\t// \\tif (!targets[1]) {\\n\\t\\t\\t// \\t\\ttargets[1] = { zombie: servers[1], setup: true, threadRatio: 0 };\\n\\t\\t\\t// \\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup, and adding new target: \\\" + targets[1].zombie.hostname);\\n\\t\\t\\t// \\t}\\n\\t\\t\\t// \\ttargets[1].threadRatio += .1;\\n\\t\\t\\t// \\ttargets[1].threads = maxThreads - targets[0].threads;\\n\\t\\t\\t// \\tns.print(\\\"Updated hack ratio: \\\" + targets[0].threadRatio + \\\"|\\\" + targets[1].threadRatio);\\n\\t\\t\\t// }\\n\\t\\t}\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\thome.updateStats();\\n\\t\\t\\tcounter = 0;\\n\\t\\t\\tservers = await findNewServers(ns);\\n\\t\\t\\trunners = servers.filter(zombie => zombie.memory > 0);\\n\\t\\t\\tif (runners.length === 0 || !targets[0].zombie) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\n\\t\\t\\trunners.push(home);\\n\\t\\t\\tmaxThreads = countTotalAvailableThreads(runners);\\n\\t\\t\\tlet usedThreads = 0;\\n\\t\\t\\t// TODO: this might be buggy? needs testing\\n\\t\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\tif (servers[index].hostname !== target.zombie.hostname) {\\n\\t\\t\\t\\t\\tif (index === 0) {\\n\\t\\t\\t\\t\\t\\t// if main target resets, just start from scratch\\n\\t\\t\\t\\t\\t\\ttargets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting main target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting main hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ttarget.zombie = servers[index];\\n\\t\\t\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting secondary target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting secondary hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// adjust thread usage based on new maximum threadcount\\n\\t\\t\\t\\tif (usedThreads === 0) {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads * target.threadRatio;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads - usedThreads;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t\\n\\t\\tawait doHacks(runners, targets);\\n\\t\\t\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {Zombie[]} servers \\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n */\\nasync function doHacks(servers, targets) {\\n\\t// TODO: script counts don't seem to be tracked property and arren't being updated on the objects properly.\\n\\t// TODO: this seems to be a result of how bitBurner caches objects/classes as Zombie objects seem to not be getting updated properly with\\n\\t// new data in some circumstances, Updating the zombie.class also doesn't cause a refresh properly.\\n\\tlet [growRunners, hackRunners, weakenRunners] = getRunningScriptCounts(servers, targets);\\n\\tfor (const [index, target] of targets.entries()) {\\n\\t\\tconst growRate = target.setup ? target.zombie.shouldGrow ? .9 : 0 : .84;\\n\\t\\tconst hackRate = target.setup ? 0 : .04;\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((target.threads * growRate) - growRunners[index]), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.floor((target.threads * hackRate) - hackRunners[index]), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(target.threads - target.wantedGrowThreads - target.wantedHackThreads - weakenRunners[index] - hackRunners[index] - growRunners[index], 0);\\n\\t\\tlogger.debug(\\\"Start: %j\\\", {threads: [target.wantedGrowThreads, target.wantedHackThreads, target.wantedWeakenThreads], running: [growRunners, hackRunners, weakenRunners]});\\n\\t}\\n\\n\\t// ns.print(\\\"Running | Grow: \\\" + runningGrow + \\\" | Hack: \\\" + runningHack + \\\" | Weaken: \\\" + runningWeaken);\\n\\t\\n\\tfor (const zombie of servers) {\\n\\t\\tlet availableRunners = zombie.maxHackThreads - zombie.growRunners - zombie.hackRunners - zombie.weakenRunners;\\n\\t\\tif (availableRunners <= 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\tconst weakenScript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\t// logger.info(\\\"Script: %j\\\", weakenScript);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tzombie.ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"weaken.js\\\", zombie.hostname, toWeaken, target.zombie.hostname);\\n\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tzombie.ns.print(\\\"Failed to startup weaken on: \\\" + zombie.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ zombie.weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\tlet serverData = zombie.ns.getServer(zombie.hostname);\\n\\t\\t\\t\\t\\tlogger.warn(\\\"%j\\\", { weakRunners: zombie.weakenRunners,\\n\\t\\t\\t\\t\\t\\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t\\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t\\thostname: zombie.hostname, server: zombie.server, updated: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"weaken.js\\\")[0] + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tlogger.debug(\\\"Calcs: new Grow: %s\\\", toGrow);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"grow.js\\\", zombie.hostname, toGrow, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"grow.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.zombie.maxMoney));\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tawait zombie.ns.sleep(100)\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"hack.js\\\", zombie.hostname, toHack, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"hack.js\\\")[0] + \\\" <- Money \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// logger.info(\\\"End:   %j\\\", {threads: [wantedGrowThreads, wantedHackThreads, wantedWeakenThreads]});\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\n\\tfor (const zombie of allServers) {\\n\\t\\tif (zombie.shouldCrack === \\\"true\\\") {\\n\\t\\t\\tgetRootForServer(zombie);\\n\\t\\t}\\n\\t\\tawait zombie.uploadFiles([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\tzombie.updateStats();\\n\\t}\\n\\tlet rooted = allServers.filter(zombie => zombie.root).sort((a, b) => b.currentRating - a.currentRating);\\n\\treturn Promise.resolve(rooted);\\n}\\n\\n/**\\n * @param {Zombie} server\\n */\\n function destroy(server) {\\n\\treturn server.ns.killall(server.hostname);\\n}\\n\\n/**\\n * @param {Zombie[]} servers\\n */\\nfunction countTotalAvailableThreads(servers) {\\n\\treturn servers\\n\\t\\t.map(zombie => zombie.maxHackThreads)\\n\\t\\t.reduce((total, num) => total + num);\\n}\\n\\n\\n/**\\n * @param {Zombie[]} servers\\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n * @return {number[][]} runningGrow, runningHack, runningWeaken\\n */\\nfunction getRunningScriptCounts(servers, targets) {\\n\\n\\tlet counts = [[], [], []];\\n\\tfor (let target of targets) {\\n\\t\\ttarget.zombie.updateStats();\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t\\tcounts[0].push(0);\\n\\t\\tcounts[1].push(0);\\n\\t\\tcounts[2].push(0);\\n\\t}\\n\\tfor (let zombie of servers) {\\n\\t\\tzombie.updateStats();\\n\\t\\tzombie.growRunners = 0;\\n\\t\\tzombie.hackRunners = 0;\\n\\t\\tzombie.weakenRunners = 0;\\n\\t\\t\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\tlet script = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\t\\t\\t\\tcounts[0][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\t\\t\\t\\tcounts[1][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t\\tcounts[2][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn counts;\\n}\",\"filename\":\"/old/oldcontrol.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":8.35,\"server\":\"home\",\"moduleSequenceNumber\":450,\"_hash\":\"760e99d456cf8c1f59b08d03ff87b804652819e54c062390e75db947d043d35f\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\nimport { getConnectionChain } from './util';\\nimport { Logger } from './log';\\n\\n/**\\n * @param {NS} ns \\n * @param {string} hostname \\n */\\n export async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const file = ns.getOwnedSourceFiles()\\n        .find(file => file.n === 4);\\n    if (!file || file.lvl < 1) {\\n        log.error(\\\"Need access to Source File 4 before using this.\\\");\\n        ns.exit();\\n    }\\n    \\n    let [hostname] = ns.args;\\n    if (!hostname) {\\n        log.error(\\\"hostname must be defined\\\");\\n        ns.exit();\\n    }\\n    const connectChain = getConnectionChain(ns, hostname);\\n    if (!connectChain || connectChain.length === 0) {\\n        log.error(\\\"%s not found, unable to connect\\\", hostname);\\n        ns.exit();\\n    }\\n    for (const connector of connectChain) {\\n        if (!ns.connect(connector)) {\\n            ns.connect(\\\"home\\\");\\n            log.error(\\\"Failed to connect to %s during connection chaining\\\", connector);\\n            ns.exit();\\n        }\\n    }\\n}\",\"filename\":\"ssh.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///c7dfeffd-5c8a-4836-b3e1-1c876ecd348e\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///b3bfdb65-8f35-4c68-999e-fcbfdbf9efa8\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///9bf8bf6b-bb18-40ef-bfb0-ef0b4731fc75\"},{\"filename\":\"ssh.js\",\"url\":\"blob:file:///eefefc1b-ea49-4628-8c52-780d16bc9853\"}],\"dependents\":[],\"ramUsage\":40.8,\"server\":\"home\",\"moduleSequenceNumber\":451,\"_hash\":\"913fd5fef0433d3e5113fd986bbad741779c55984001fc6790bcc7fe841c9b72\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":452,\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n*/\\n\\nimport { Logger } from \\\"./log.js\\\";\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from \\\"./zombie.js\\\";\\n \\n /**  \\t\\n  * This is for testing copied formulas and making sure statistics line up properly, requires Formulas.exe \\n  * once \\n  * @param {NS} ns\\n  **/\\nexport async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const header = \\\" %(sec)s | %(exp)s \\\";\\n    log.info(\\\"ExpGained = 3 + (security * 4.53 * .3)\\\");\\n    \\n    log.info(\\\"\\\");\\n    let servers = findServers({ns: ns, depth: 5})\\n        .map(server => new Zombie(server.server, ns, server.depth));\\n    const format = \\\"%(hostname)15s | %(maxUsefulThreads)3s | %(hackThreads)3s | %(effect)5s | %(hackCalcEffect)5s | %(diff)4s | %(xp)6s | %(myxp)6s | %(xps)6s | %(security)3s | %(currentSecurity)4s | %(level)4s \\\";\\n    log.info(format, { hostname: \\\"Name\\\", maxUsefulThreads: \\\"Use\\\", hackThreads: \\\"Thr\\\", effect: \\\"Eff\\\", hackCalcEffect: \\\"CHack\\\", weakenTime: \\\"Weak\\\", diff: \\\"Diff\\\", xp: \\\"XP\\\", myxp: \\\"MyXP\\\", \\n        xps: \\\"XPPS\\\", security: \\\"Sec\\\", currentSecurity: \\\"CSec\\\",  level: \\\"Lvl\\\"})\\n    for (const server of servers) {\\n        // server.actualWeaken = ns.formulas.hacking.weakenTime(server.server, ns.getPlayer());\\n        server.xp = ns.formulas.hacking.hackExp(server.server, ns.getPlayer()).toFixed(2);\\n        server.myxp = (3 + (server.server.baseDifficulty * ns.getPlayer().hacking_exp_mult *  .3)).toFixed(2);\\n        server.diff = server.server.baseDifficulty;\\n        server.maxUsefulThreads = Math.floor( 41 / (ns.formulas.hacking.hackPercent(server.server, ns.getPlayer()) * 100));\\n        server.hackCalcEffect = (100 * ns.formulas.hacking.hackPercent(server.server, ns.getPlayer())).toFixed(2);\\n        log.info(format, server);\\n    }\\n\\n    \\n    // let test = document.getElementById(\\\"clickable\\\");\\n    // test.style = \\\"display: block; visibility: visible; transform: translate(-10px, -10px);\\\";\\n    // test.id = \\\"unclickable\\\";\\n}\",\"filename\":\"rates.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///4d90d78e-036a-4607-9c36-c574f4a3754e\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///aaebad0d-c565-44f5-ae8e-c07f925bfab9\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///6e27e5f5-fe7d-49c1-9db0-898d0f106cb3\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///a9e25ca6-af2b-43aa-9e67-db3e7f0274ff\"},{\"filename\":\"rates.js\",\"url\":\"blob:file:///5798d9bd-67b8-4292-acec-7ff6cc5f614f\"}],\"dependents\":[],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":453,\"_hash\":\"78c2da00aaebe409c35a9228adce1784ccb45dd17dc54d07b2cba9d154682986\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * WARNING THIS FILE HAS SPOILERS FOR HOW TO SOLVE CONTRACTS\\n * IF YOU WANT TO SOLVE THESE YOURSELF CLOSE THIS NOW!\\n */\\n\\n/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\nimport { findServers } from './util';\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    while (true) {\\n        let contracts = findServers({ns: ns, depth: -1})\\n            .filter(server => hasContracts(ns, server.server))\\n            .flatMap(server => getContracts(ns, server.server));\\n\\n        for (const contract of contracts) {\\n            switch (contract.type) {\\n                case \\\"Array Jumping Game\\\":\\n                    contract.solution = jump(contract.data);\\n                    break;\\n                case \\\"Total Ways to Sum\\\":\\n                    contract.solution = partition(contract.data);\\n                    break;\\n                case \\\"Unique Paths in a Grid I\\\":\\n                case \\\"Unique Paths in a Grid II\\\":\\n                    contract.solution = uniquePaths(contract.data);\\n                    break;\\n                case \\\"Spiralize Matrix\\\":\\n                    contract.solution = spiralFlatten(contract.data);\\n                    break;\\n                case \\\"Find Largest Prime Factor\\\":\\n                    contract.solution = findLargestPrimeFactor(contract.data);\\n                    break;\\n                case \\\"Subarray with Maximum Sum\\\":\\n                    contract.solution = findMaxSubArraySum(contract.data);\\n                    break\\n                case \\\"Merge Overlapping Intervals\\\":\\n                    contract.solution = reduceIntervals(contract.data);\\n                    break;\\n                case \\\"Minimum Path Sum in a Triangle\\\":\\n                    contract.solution = minimumSumTriangle(contract.data);\\n                    break;\\n                case \\\"Generate IP Addresses\\\":\\n                    contract.solution = findValidIps(contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader I\\\":\\n                    contract.solution = stockSolver(1, contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader II\\\":\\n                    contract.solution = stockSolver(Math.floor(contract.data.length / 2), contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader III\\\":\\n                    contract.solution = stockSolver(2, contract.data);\\n                    break;\\n                case \\\"Algorithmic Stock Trader IV\\\":\\n                    contract.solution = stockSolver(contract.data[0], contract.data[1]);\\n                    break;\\n                case \\\"Sanitize Parentheses in Expression\\\":\\n                    contract.solution = sanitizeParentheses(contract.data);\\n                    break;\\n                case \\\"Find All Valid Math Expressions\\\":\\n                    contract.solution = findValidMathExpressions(contract.data[0], contract.data[1]);\\n                    break;\\n                default:\\n            }\\n            if (typeof(contract.solution) !== 'undefined') {\\n                contract.result = ns.codingcontract.attempt(contract.solution, contract.filename, contract.hostname, { returnReward: true});\\n                ns.print(\\\"Solved \\\" + contract.filename + \\\"  Result: \\\" + contract.result);\\n            }\\n            else {\\n                ns.print(\\\"No solution available for contract: \\\" + contract.type + \\\" | \\\" + contract.hostname + \\\"/\\\" + contract.filename);\\n            }\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction hasContracts(ns, server) {\\n    // ns.tprintf(\\\"%j\\\", server);\\n    return ns.ls(server.hostname, \\\".cct\\\").length > 0;\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {Server} server \\n */\\nfunction getContracts(ns, server) {\\n    return ns.ls(server.hostname, \\\".cct\\\")\\n        .map(filename => { \\n            return {\\n                hostname: server.hostname,\\n                filename: filename,\\n                type: ns.codingcontract.getContractType(filename, server.hostname),\\n                data: ns.codingcontract.getData(filename, server.hostname),\\n                desc: ns.codingcontract.getDescription(filename, server.hostname)\\n            };\\n    });\\n}\\n\\nfunction stockSolver(txns, prices) {\\n    let len = prices.length\\n    if (len < 2) {\\n        return 0\\n    }\\n    if (txns > len / 2) {\\n        var res = 0\\n        for (var i = 1; i < len; ++i) {\\n            res += Math.max(prices[i] - prices[i - 1], 0)\\n        }\\n        return res\\n    }\\n    var hold = []\\n    var rele = []\\n    hold.length = txns + 1\\n    rele.length = txns + 1\\n    for (var i = 0; i <= txns; ++i) {\\n        hold[i] = Number.MIN_SAFE_INTEGER\\n        rele[i] = 0\\n    }\\n    var cur\\n    for (var i = 0; i < len; ++i) {\\n        cur = prices[i]\\n        for (var j = txns; j > 0; --j) {\\n            rele[j] = Math.max(rele[j], hold[j] + cur)\\n            hold[j] = Math.max(hold[j], rele[j - 1] - cur)\\n        }\\n    }\\n    return rele[txns]\\n}\\n\\n/**\\n * Given a list of intervals. merges all overlapping intervals and return the merged list.\\n * @param {number[][]} intervals \\n */\\nfunction reduceIntervals(intervals) {\\n    let final = [];\\n    let sorted = intervals.sort((a, b) => a[0] - b[0]);\\n    // push the first item to the top of the stack\\n    final.unshift(sorted.shift());\\n    while (sorted.length > 0) {\\n        let int = sorted.shift();\\n\\n        // If the current interval starts within the top of the stack, try to merge\\n        if (int[0] >= final[0][0] && int[0] <= final[0][1]) {\\n            // merge\\n            if (int[1] > final[0][1]) {\\n                final[0][1] = int[1];\\n            }\\n            // if it's not greater than the current then this interval is already contained.\\n        } else {\\n            // otherwise push this to the stack\\n            final.unshift(int);\\n        }\\n    }\\n    return final.reverse();\\n}\\n\\n/**\\n * Finds a contiguous subarray with maximum sum of elements and returns the sum.\\n * @param {number[]} nums \\n */\\nfunction findMaxSubArraySum(nums) {\\n    let end = 0;\\n    let currMax = nums[0];\\n    let max = nums[0];\\n    // iterate over all elements to find the maximum value to stop at\\n    for (let i = 1; i < nums.length; ++i) {\\n        // if the current element is greater than all previous elements combined then just start here.\\n        currMax = Math.max(nums[i], nums[i] + currMax);\\n        if (currMax > max) {\\n            max = currMax;\\n            end = i;\\n        }\\n    }\\n    let start = end;\\n    // walk back from the end index to fix the start\\n    while (start >= 0) {\\n        max -= nums[start];\\n        if (max == 0) {\\n            break;\\n        }\\n        start--;\\n    }\\n    return nums.slice(start, end + 1).reduce((tot, num) => tot + num, 0);\\n}\\n\\n/**\\n * Finds the largest prime factor of the given number\\n * @param {number} num \\n * @returns \\n */\\nfunction findLargestPrimeFactor(num) {\\n    let maxPrime = -1;\\n    // remove all factors of 2\\n    while(num % 2 === 0) {\\n        num /= 2;\\n        maxPrime = 2;\\n    }\\n    // factorize for all odd numbers\\n    for (let i = 3; i <= Math.sqrt(num); i += 2) {\\n        while (num % i === 0) {\\n            maxPrime = i;\\n            num /= i;\\n        }\\n    }\\n    return num > 2 ? num : maxPrime;\\n}\\n\\n/**\\n * Flattens a 2d array by evaluating the entries in 'spiral' order\\n * @param {NS} ns \\n * @param {number[][]} grid \\n */\\nexport function spiralFlatten(grid) {\\n    let answer = [];\\n\\n    let dir = \\\"right\\\";\\n    let totalElements = grid[0].length * grid.length;\\n    while (answer.length < totalElements) {\\n        switch (dir) {\\n            case \\\"left\\\":\\n                const last = grid.length - 1;\\n                while (grid[last].length > 0) {\\n                    answer.push(grid[last].pop());\\n                }\\n                grid.pop();\\n                break;\\n            case \\\"up\\\":\\n                for (let i = grid.length - 1; i >= 0; i--) {\\n                    answer.push(grid[i].shift());\\n                }\\n                break;\\n            case \\\"down\\\":\\n                for (let i = 0; i < grid.length; i++) {\\n                    answer.push(grid[i].pop());\\n                }\\n                break;\\n            case \\\"right\\\":\\n            default:\\n                while (grid[0].length > 0) {\\n                    answer.push(grid[0].shift());\\n                }\\n                grid.shift();\\n        }\\n\\n        switch (dir) {\\n            case \\\"down\\\":\\n                dir = \\\"left\\\";\\n                break;\\n            case \\\"left\\\":\\n                dir = \\\"up\\\";\\n                break;\\n            case \\\"up\\\":\\n                dir = \\\"right\\\";\\n                break;\\n            case \\\"right\\\":      \\n            default:\\n                dir = \\\"down\\\";\\n                break;\\n        }\\n    }\\n    return answer;\\n}\\n\\n/**\\n * Counts the number of ways to partition the given number by whole integers\\n * @param {NS} ns \\n * @param {number} num \\n */\\nexport function partition(num) {\\n    let ways = [1];\\n    for (let i = 1; i <= num; i++) {\\n        ways.push(0);\\n    }\\n\\n    for (let i = 1; i < num; i++) {\\n        for (let j = i; j <= num ; j++) {\\n            ways[j] += ways[j - i];\\n        }\\n    }\\n    return ways[num];\\n}\\n\\n/**\\n * Finds the minimum sum to traverse to a bottom element by walking the tree from bottom to top\\n * \\n * @param {number[][]} triangle - 2d array of numbers in 'triangle' form ex: [[1], [2,3], [4,5,6], [7,8,9,0]]\\n */\\nexport function minimumSumTriangle(triangle) {\\n    let cache = [];\\n    let h = triangle.length - 1;\\n    // cache the bottom row\\n    for (let i = 0; i < triangle[h].length; i++) {\\n        cache.push(triangle[h][i]);\\n    }\\n    // loop over each row starting from the 2nd from the bottom one\\n    for (let i = h - 1; i >= 0; i--) {\\n        // for each number in this row\\n        for (let j = 0; j < triangle[i].length; j++) {\\n            // update the cache at j to be the current value in the tree plus the minimum of the neighbor cache values\\n            cache[j] = triangle[i][j] + Math.min(cache[j], cache[j + 1]);\\n        }\\n    }\\n    return cache[0];\\n}\\n\\n/**\\n * Finds the number of unique paths of an unobstructed grid of the given size, or given an obstructed grid.\\n * @param {number[]|number[][]} data\\n * @param {NS} ns\\n */\\nexport function uniquePaths(data, ns) {\\n    let grid = [];\\n    if (data.length == 2 && typeof(data[0]) === 'number') {\\n        // if this is a 1d array then the inputs are the size of an unobstructed grid\\n        grid = generateEmptyGrid(data[0], data[1]);\\n    } else {\\n        grid = data;\\n    }\\n\\n    return uniquePathsFromGrid(grid);\\n}\\n\\nfunction generateEmptyGrid(sizeX, sizeY) {\\n    let grid = [];\\n    for (let i = 0; i < sizeY; i ++) {\\n        grid.push([]);\\n        for (let j = 0; j < sizeX; ++j) {\\n            grid[i].push(0);\\n        } \\n    }\\n    return grid;\\n}\\n\\n/**\\n * Accepts a grid initialized with 0s and 1s. a '1' in a cell denotes an obstacle\\n * @param {number[]} grid \\n */\\nfunction uniquePathsFromGrid(grid) {\\n    for (let i = 0; i < grid.length; i++) {\\n        for (let j = 0; j < grid[0].length; j++) {\\n            // if there's an obstacle in this cell mark it as non-traversible\\n            if (grid[i][j] === 1) {\\n                grid[i][j] = 0;\\n                continue;\\n            }\\n            // for the first cell default to 1 \\n            if (j === 0 && i === 0) {\\n                grid[i][j] = 1;\\n            }\\n            // for all other edge cells default to previous edge cell value\\n            else if (j === 0) {\\n                grid[i][j] = grid[i - 1][j];\\n            } else if (i === 0) {\\n                grid[i][j] = grid[i][j - 1];\\n            } \\n            // for all other cells add neighbor cell values\\n            else {    \\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1];\\n            }\\n        }\\n    }\\n    return grid[grid.length -1][grid[0].length - 1];\\n}\\n\\n/**\\n * \\n * @param {string} str \\n * @returns \\n */\\nexport function sanitizeParentheses(str) {\\n    let left = 0;\\n    let right = 0;\\n    let answer = [];\\n    for (let i = 0; i < str.length; ++i) {\\n        if (str[i] === '(') {\\n            ++left;\\n        } else if (str[i] === ')') {\\n            left > 0 ? --left : ++right;\\n        }\\n    }\\n    dfs(0, 0, left, right, str, '', answer);\\n\\n    return answer;\\n}\\n\\n/**\\n * \\n * @param {number} pair \\n * @param {number} index \\n * @param {number} left \\n * @param {number} right \\n * @param {string} s \\n * @param {string} solution \\n * @param {string[]} answers \\n */\\nfunction dfs(pair, index, left, right, s, solution, answers) {\\n    if (s.length === index) {\\n        if (left === 0 && right === 0 && pair === 0) {\\n            for (let i = 0; i < answers.length; i++) {\\n                if (answers[i] === solution) {\\n                    return;\\n                }\\n            }\\n            answers.push(solution);\\n        }\\n        return;\\n    }\\n    if (s[index] === '(') {\\n        if (left > 0) {\\n            dfs(pair, index + 1, left - 1, right, s, solution, answers);\\n        }\\n        dfs(pair + 1, index + 1, left, right, s, solution + s[index], answers);\\n    } else if (s[index] === ')') {\\n        if (right > 0) dfs(pair, index + 1, left, right - 1, s, solution, answers);\\n        if (pair > 0) dfs(pair - 1, index + 1, left, right, s, solution + s[index], answers);\\n    } else {\\n        dfs(pair, index + 1, left, right, s, solution + s[index], answers);\\n    }\\n}\\n\\nexport function findValidIps(str) {\\n    let answer = [];\\n    for (let a = 1; a <= 3; ++a) {\\n        for (let b = 1; b <= 3; ++b) {\\n            for (let c = 1; c <= 3; ++c) {\\n                for (let d = 1; d <= 3; ++d) {\\n                    if (a + b + c + d === str.length) {\\n                        const A = parseInt(str.substring(0, a), 10);\\n                        const B = parseInt(str.substring(a, a + b), 10);\\n                        const C = parseInt(str.substring(a + b, a + b + c), 10);\\n                        const D = parseInt(str.substring(a + b + c, a + b + c + d), 10);\\n                        if (A < 256 && B < 256 && C < 256 && D < 256) {\\n                            const ip = A.toString() + \\\".\\\" + B.toString() + \\\".\\\" + C.toString() + \\\".\\\" + D.toString();\\n                            if (ip.length !== str.length + 3) continue;\\n                            answer.push(ip);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return answer;\\n}\\n\\n/**\\n * For a given list of numbers attempts to permutate the list using +, - and * operations for each number\\n * to get to the target value. Once all operation chains are found, returns the list.\\n * @param {number[]} nums - the array of numbers to perform calculations with\\n * @param {number} target - the result we are attempting to get\\n * @returns \\n */\\nexport function findValidMathExpressions(nums, target) {\\n    if (nums == null || nums.length === 0) {\\n        return [];\\n    }\\n    let answer = [];\\n    mathHelper(answer, '', nums, target, 0, 0, 0);\\n    return answer;\\n}\\n\\nfunction mathHelper(answer, path, num, target, pos, evaluated, multed) {\\n    if (pos === num.length) {\\n        if (target === evaluated) {\\n            answer.push(path);\\n        }\\n        return;\\n    }\\n    for (let i = pos; i < num.length; ++i) {\\n        if (i != pos && num[pos] == '0') {\\n            break;\\n        }\\n        let cur = parseInt(num.substring(pos, i + 1));\\n        if (pos === 0) {\\n            mathHelper(answer, path + cur, num, target, i + 1, cur, cur);\\n        } else {\\n            mathHelper(answer, path + '+' + cur, num, target, i + 1, evaluated + cur, cur);\\n            mathHelper(answer, path + '-' + cur, num, target, i + 1, evaluated - cur, -cur);\\n            mathHelper(answer, path + '*' + cur, num, target, i + 1, evaluated - multed + multed * cur, multed * cur);\\n        }\\n    }\\n}\\n\\n/**\\n * Finds if you can jump to the end of the array where each value in the array represents the MAXIMUM distance you can jump in the array\\n * @param {number[]} nums \\n */\\nfunction jump(nums) {\\n    let nextMax = 0;\\n    for (let i = 0; i < nums.length && i <= nextMax; i++) {\\n        nextMax = Math.max(nextMax, i + nums[i]);\\n    }\\n    return (nextMax >= (nums.length - 1)) ? 1 : 0;\\n}\",\"filename\":\"contracts.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a8ba3487-b960-45c2-9fde-8ab3537f3853\",\"moduleSequenceNumber\":440},{\"filename\":\"util.js\",\"url\":\"blob:file:///39dafa93-2888-4f36-9dcb-5be1f399578a\",\"moduleSequenceNumber\":436},{\"filename\":\"contracts.js\",\"url\":\"blob:file:///d3b32d9c-3df0-44e9-b0df-92e2573c0234\",\"moduleSequenceNumber\":853}],\"dependents\":[],\"ramUsage\":29,\"server\":\"home\",\"moduleSequenceNumber\":853,\"_hash\":\"51e83fc0ccfe3c61f86adcac66e0286bb73cd99159703ec214417766e0fdfe0e\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"codingcontract.attempt\",\"cost\":10},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"codingcontract.getContractType\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getData\",\"cost\":5},{\"type\":\"fn\",\"name\":\"codingcontract.getDescription\",\"cost\":5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n**/\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    while(true) {\\n\\t    await ns.share();\\n    }\\n}\",\"filename\":\"share.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"share.js\",\"url\":\"blob:file:///ce6902e1-9630-4bd6-b05b-d0fe57e6969d\",\"moduleSequenceNumber\":169461}],\"dependents\":[],\"ramUsage\":4,\"server\":\"home\",\"moduleSequenceNumber\":455,\"_hash\":\"ad80d026a3a1178e5b82e766cf1564c7d0387c209b7eda13ba695bf2a9bedf10\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"share\",\"cost\":2.4}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.print(\\\"No target host given\\\");\\n\\t\\texit;\\n\\t}\\n\\tconst target = ns.args[0];\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst minMoney = ns.getServerMaxMoney(target) * .75;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":456,\"_hash\":\"09f67151de054766890602ddad2ca7124dc66bd2f49d4c525454f2764c58bc32\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":457,\"_hash\":\"c6e2a542ea913efd4e8de3a4cdc001f5b6a2a63a00d61d9adabc31906637d5e5\",\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tconst standardGlobals = new Set([\\\"window\\\", \\\"self\\\", \\\"document\\\", \\\"name\\\", \\\"location\\\", \\\"customElements\\\", \\\"history\\\", \\\"locationbar\\\", \\\"menubar\\\", \\\"personalbar\\\", \\\"scrollbars\\\", \\\"statusbar\\\", \\\"toolbar\\\", \\\"status\\\", \\\"closed\\\", \\\"frames\\\", \\\"length\\\", \\\"top\\\", \\\"opener\\\", \\\"parent\\\", \\\"frameElement\\\", \\\"navigator\\\", \\\"origin\\\", \\\"external\\\", \\\"screen\\\", \\\"innerWidth\\\", \\\"innerHeight\\\", \\\"scrollX\\\", \\\"pageXOffset\\\", \\\"scrollY\\\", \\\"pageYOffset\\\", \\\"visualViewport\\\", \\\"screenX\\\", \\\"screenY\\\", \\\"outerWidth\\\", \\\"outerHeight\\\", \\\"devicePixelRatio\\\", \\\"clientInformation\\\", \\\"screenLeft\\\", \\\"screenTop\\\", \\\"defaultStatus\\\", \\\"defaultstatus\\\", \\\"styleMedia\\\", \\\"onsearch\\\", \\\"isSecureContext\\\", \\\"performance\\\", \\\"onappinstalled\\\", \\\"onbeforeinstallprompt\\\", \\\"crypto\\\", \\\"indexedDB\\\", \\\"webkitStorageInfo\\\", \\\"sessionStorage\\\", \\\"localStorage\\\", \\\"onabort\\\", \\\"onblur\\\", \\\"oncancel\\\", \\\"oncanplay\\\", \\\"oncanplaythrough\\\", \\\"onchange\\\", \\\"onclick\\\", \\\"onclose\\\", \\\"oncontextmenu\\\", \\\"oncuechange\\\", \\\"ondblclick\\\", \\\"ondrag\\\", \\\"ondragend\\\", \\\"ondragenter\\\", \\\"ondragleave\\\", \\\"ondragover\\\", \\\"ondragstart\\\", \\\"ondrop\\\", \\\"ondurationchange\\\", \\\"onemptied\\\", \\\"onended\\\", \\\"onerror\\\", \\\"onfocus\\\", \\\"onformdata\\\", \\\"oninput\\\", \\\"oninvalid\\\", \\\"onkeydown\\\", \\\"onkeypress\\\", \\\"onkeyup\\\", \\\"onload\\\", \\\"onloadeddata\\\", \\\"onloadedmetadata\\\", \\\"onloadstart\\\", \\\"onmousedown\\\", \\\"onmouseenter\\\", \\\"onmouseleave\\\", \\\"onmousemove\\\", \\\"onmouseout\\\", \\\"onmouseover\\\", \\\"onmouseup\\\", \\\"onmousewheel\\\", \\\"onpause\\\", \\\"onplay\\\", \\\"onplaying\\\", \\\"onprogress\\\", \\\"onratechange\\\", \\\"onreset\\\", \\\"onresize\\\", \\\"onscroll\\\", \\\"onseeked\\\", \\\"onseeking\\\", \\\"onselect\\\", \\\"onstalled\\\", \\\"onsubmit\\\", \\\"onsuspend\\\", \\\"ontimeupdate\\\", \\\"ontoggle\\\", \\\"onvolumechange\\\", \\\"onwaiting\\\", \\\"onwebkitanimationend\\\", \\\"onwebkitanimationiteration\\\", \\\"onwebkitanimationstart\\\", \\\"onwebkittransitionend\\\", \\\"onwheel\\\", \\\"onauxclick\\\", \\\"ongotpointercapture\\\", \\\"onlostpointercapture\\\", \\\"onpointerdown\\\", \\\"onpointermove\\\", \\\"onpointerup\\\", \\\"onpointercancel\\\", \\\"onpointerover\\\", \\\"onpointerout\\\", \\\"onpointerenter\\\", \\\"onpointerleave\\\", \\\"onselectstart\\\", \\\"onselectionchange\\\", \\\"onanimationend\\\", \\\"onanimationiteration\\\", \\\"onanimationstart\\\", \\\"ontransitionrun\\\", \\\"ontransitionstart\\\", \\\"ontransitionend\\\", \\\"ontransitioncancel\\\", \\\"onafterprint\\\", \\\"onbeforeprint\\\", \\\"onbeforeunload\\\", \\\"onhashchange\\\", \\\"onlanguagechange\\\", \\\"onmessage\\\", \\\"onmessageerror\\\", \\\"onoffline\\\", \\\"ononline\\\", \\\"onpagehide\\\", \\\"onpageshow\\\", \\\"onpopstate\\\", \\\"onrejectionhandled\\\", \\\"onstorage\\\", \\\"onunhandledrejection\\\", \\\"onunload\\\", \\\"alert\\\", \\\"atob\\\", \\\"blur\\\", \\\"btoa\\\", \\\"cancelAnimationFrame\\\", \\\"cancelIdleCallback\\\", \\\"captureEvents\\\", \\\"clearInterval\\\", \\\"clearTimeout\\\", \\\"close\\\", \\\"confirm\\\", \\\"createImageBitmap\\\", \\\"fetch\\\", \\\"find\\\", \\\"focus\\\", \\\"getComputedStyle\\\", \\\"getSelection\\\", \\\"matchMedia\\\", \\\"moveBy\\\", \\\"moveTo\\\", \\\"open\\\", \\\"postMessage\\\", \\\"print\\\", \\\"prompt\\\", \\\"queueMicrotask\\\", \\\"releaseEvents\\\", \\\"requestAnimationFrame\\\", \\\"requestIdleCallback\\\", \\\"resizeBy\\\", \\\"resizeTo\\\", \\\"scroll\\\", \\\"scrollBy\\\", \\\"scrollTo\\\", \\\"setInterval\\\", \\\"setTimeout\\\", \\\"stop\\\", \\\"webkitCancelAnimationFrame\\\", \\\"webkitRequestAnimationFrame\\\", \\\"chrome\\\", \\\"caches\\\", \\\"ondevicemotion\\\", \\\"ondeviceorientation\\\", \\\"ondeviceorientationabsolute\\\", \\\"originAgentCluster\\\", \\\"cookieStore\\\", \\\"showDirectoryPicker\\\", \\\"showOpenFilePicker\\\", \\\"showSaveFilePicker\\\", \\\"speechSynthesis\\\", \\\"onpointerrawupdate\\\", \\\"trustedTypes\\\", \\\"crossOriginIsolated\\\", \\\"openDatabase\\\", \\\"webkitRequestFileSystem\\\", \\\"webkitResolveLocalFileSystemURL\\\"]);\\n\\t// for (const key of Object.keys(window)) {\\n\\t// \\tif (!standardGlobals.has(key)) {\\n\\t// \\t\\tns.tprint(key);\\n\\t// \\t}\\n\\t// }\\n\\tfor (const key of Object.keys(window[\\\"_\\\"])) {\\n\\t\\tns.tprint(key);\\n\\t}\\n\\t// let element = document.getElementById(\\\"unclickable\\\");\\n\\t// let clickEvent = new MouseEvent(\\\"click\\\", {\\n\\t// \\tview: window,\\n\\t// \\tbubbles: true,\\n\\t// \\tcancelable: false\\n\\t// })\\n\\t// element.dispatchEvent(clickEvent);\\n\\t// element.click();\\n}\",\"filename\":\"test.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"test.js\",\"url\":\"blob:file:///0667c972-5ed8-47e5-a2d3-4e96e0198af6\",\"moduleSequenceNumber\":250646}],\"dependents\":[],\"ramUsage\":26.6,\"server\":\"home\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"dom\",\"name\":\"window\",\"cost\":25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').TIX} TIX\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\n// Built upon u/pwillia7 's stock script.\\n// u/ferrus_aub stock script using simple portfolio algorithm.\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    const maxSharePer = 1.00\\n    const stockBuyPer = 0.60\\n    const stockVolPer = 0.05\\n    const moneyKeep = 1_000_000_000\\n    const minSharePer = 5\\n\\n    while (true) {\\n        ns.disableLog('disableLog');\\n        ns.disableLog('sleep');\\n        ns.disableLog('getServerMoneyAvailable');\\n        let stocks = ns.stock.getSymbols();\\n        for (const stock of stocks) {\\n            let position = ns.stock.getPosition(stock);\\n            if (position[0]) {\\n                //ns.print('Position: ' + stock + ', ')\\n                sellPositions(stock, position);\\n            }\\n            buyPositions(stock, position);\\n        }\\n        // ns.print('Cycle Complete');\\n        await ns.sleep(6000);\\n    }\\n\\n    /**\\n     * @param {string} stock \\n     * @param {number} position\\n     */\\n    function buyPositions(stock, position) {\\n        const maxShares = (ns.stock.getMaxShares(stock) * maxSharePer) - position;\\n        const askPrice = ns.stock.getAskPrice(stock);\\n        const forecast = ns.stock.getForecast(stock);\\n        const volPer = ns.stock.getVolatility(stock);\\n        const playerMoney = ns.getServerMoneyAvailable('home');\\n\\n        if (forecast >= stockBuyPer && volPer <= stockVolPer) {\\n            if (playerMoney - moneyKeep > ns.stock.getPurchaseCost(stock, minSharePer, \\\"Long\\\")) {\\n                let shares = Math.min((playerMoney - moneyKeep - 100000) / askPrice, maxShares);\\n                ns.stock.buy(stock, shares);\\n                //ns.print('Bought: '+ stock + '')\\n            }\\n        }      \\n    }\\n\\n        /**\\n     * @param {string} stock \\n     * @param {number} position\\n     */\\n    function sellPositions(stock) {\\n        let forecast = ns.stock.getForecast(stock);\\n        if (forecast < 0.5) {\\n            ns.stock.sell(stock, position);\\n            //ns.print('Sold: '+ stock + '')\\n        }\\n    }\\n}\",\"filename\":\"stocktrader.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"stocktrader.js\",\"url\":\"blob:file:///d0ea516f-e8c7-4c22-92ef-e4e0733301c6\",\"moduleSequenceNumber\":6474}],\"dependents\":[],\"ramUsage\":21.7,\"server\":\"home\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stock.getSymbols\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getPosition\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getMaxShares\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getAskPrice\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.getForecast\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.getVolatility\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"stock.getPurchaseCost\",\"cost\":2},{\"type\":\"fn\",\"name\":\"stock.buy\",\"cost\":2.5},{\"type\":\"fn\",\"name\":\"stock.sell\",\"cost\":2.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    await CheckUpdate(ns, options);\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/bp.js\",\"url\":\"blob:file:///018b4463-d158-461c-9df7-5b873c26c46c\",\"moduleSequenceNumber\":32054}],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var useDev = false;\\nvar baseDevURL = 'http://localhost:5001/bit-packer/us-central1';\\nvar baseLiveURL = 'https://us-central1-bit-packer.cloudfunctions.net';\\nvar UploadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/UploadPackage`;\\nvar CreatePackageURL = `${useDev ? baseDevURL : baseLiveURL}/CreatePackage`;\\nvar DownloadPackageURL = `${useDev ? baseDevURL : baseLiveURL}/DownloadPackage`;\\nvar BitpackerURL = `https://raw.githubusercontent.com/davidsiems/bitpacker/live/command/dist/bp.js?${Date.now()}`;\\nvar Commands = {\\n    browse: {\\n        command: browse,\\n        help: `    bp browse                                // Lists available packages and their details`,\\n        validate: (args) => true\\n    },\\n    add: {\\n        command: add,\\n        help: `    bp add package-name                      // Installs latest version of the package 'package-name'\\n    bp add package-name version              // Installs the specified version of 'package-name'\\n    bp add package-name --no-alias           // Disables alias installation for this package`,\\n        validate: (args) => {\\n            if (args.length === 0 || args.length > 2)\\n                return false;\\n            return true;\\n        }\\n    },\\n    remove: {\\n        command: remove,\\n        help: `    bp remove package-name                   // Removes the specified package`,\\n        validate: (args) => {\\n            if (args.length == 0 || args.length > 1)\\n                return false;\\n            return true;\\n        }\\n    },\\n    man: {\\n        command: man,\\n        help: `    bp man package-name                      // Prints out manual.txt for the specified package (if it exists)`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    install: {\\n        command: install,\\n        help: `    bp install                               // Installs versions specified in packages.txt\\n    bp install latest                        // Updates packages to latest versions`,\\n        validate: (args) => {\\n            return args.length === 0 || (args.length === 1 && args[0] === 'latest');\\n        }\\n    },\\n    cleanslate: {\\n        command: cleanslate,\\n        help: `    bp cleanslate                            // Removes all installed packages and clears packages.txt`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    list: {\\n        command: list,\\n        help: `    bp list                                  // Lists installed packages and their versions`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    create: {\\n        command: create,\\n        help: `    bp create /path/to/package package-name  // Creates and registers a new package`,\\n        validate: (args) => {\\n            return args.length === 2;\\n        }\\n    },\\n    publish: {\\n        command: publish,\\n        help: `    bp publish /path/to/package              // Publishes a package to the registry`,\\n        validate: (args) => {\\n            return args.length === 1;\\n        }\\n    },\\n    'update-bp': {\\n        command: update_bp,\\n        help: `    bp update-bp                             // Updates bitpacker to latest`,\\n        validate: (args) => {\\n            return args.length === 0;\\n        }\\n    },\\n    help: {\\n        command: help,\\n        help: `    bp help                                  // Displays this help text`,\\n        validate: (args) => true\\n    }\\n};\\nexport async function main(ns) {\\n    var flags = ns.flags([\\n        ['quiet', false],\\n        ['q', false],\\n        ['verbose', false],\\n        ['no-alias', false]\\n    ]);\\n    var options = {\\n        quiet: flags.quiet || flags.q,\\n        verbose: flags.verbose,\\n        noAlias: flags['no-alias']\\n    };\\n    await CheckUpdate(ns, options);\\n    var [commandKey, ...args] = flags._;\\n    var command = Commands[commandKey];\\n    if (!command)\\n        command = Commands.help;\\n    if (!command.validate(args))\\n        command = Commands.help;\\n    await command.command(ns, options, args);\\n}\\nasync function update_bp(ns, options, args) {\\n    await ns.wget(BitpackerURL, '/bitpacks/bp.js');\\n    Print(ns, options, 'Updated Bitpacker to latest');\\n}\\nasync function install(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var latest = args[0] === 'latest';\\n    await BitpackInstall(ns, options, latest);\\n}\\nasync function cleanslate(ns, options, args) {\\n    CheckRunning(ns, options);\\n    await BitpackCleanslate(ns, options);\\n}\\nasync function add(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    var version = args[1];\\n    await BitpackAdd(ns, options, bitpack, version);\\n}\\nasync function remove(ns, options, args) {\\n    CheckRunning(ns, options);\\n    var bitpack = args[0];\\n    await BitpackRemove(ns, options, bitpack);\\n}\\nasync function list(ns, options, args) {\\n    await List(ns, options);\\n}\\nasync function create(ns, options, args) {\\n    var packagePath = args[0];\\n    var bitpackName = args[1];\\n    await Create(ns, options, packagePath, bitpackName);\\n}\\nasync function publish(ns, options, args) {\\n    var packagePath = args[0];\\n    await Publish(ns, options, packagePath);\\n}\\nasync function man(ns, options, args) {\\n    var bitpack = args[0];\\n    Manual(ns, options, bitpack);\\n}\\nasync function browse(ns, options, args) {\\n    await ListBitpacks(ns, options);\\n}\\nasync function help(ns, options, args) {\\n    var output = '\\\\nBitpacker - a simple package manager for Bitburner\\\\n';\\n    output += '    flags:\\\\n        -q --quiet, Run with reduced output\\\\n\\\\n';\\n    for (var commandName in Commands) {\\n        output += `${Commands[commandName].help}\\\\n`;\\n    }\\n    Print(ns, options, output);\\n}\\nexport async function BitpackInstall(ns, options, latest) {\\n    DeleteAllBitpacks(ns, options);\\n    var failures = 0;\\n    var packages = 0;\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    for (var bitpack in manifest.bitpacks) {\\n        var targetVersion = latest ? 'latest' : manifest.bitpacks[bitpack];\\n        var metadata = await DownloadBitpack(ns, options, bitpack, targetVersion);\\n        if (!metadata) {\\n            ++failures;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n        }\\n        ++packages;\\n    }\\n    await SaveManifest(ns, manifest);\\n    if (failures > 0)\\n        Print(ns, options, `Bitpack Failed to install ${failures} package${failures === 1 ? 's' : ''}`);\\n    else\\n        Print(ns, options, `Bitpack installed ${packages} package${packages === 1 ? 's' : ''}`);\\n    return failures === 0;\\n}\\nexport function BitpackIsInstalled(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (manifest) {\\n        var version = manifest.bitpacks[bitpack];\\n        return !!version;\\n    }\\n    return false;\\n}\\nexport async function BitpackCleanslate(ns, options) {\\n    DeleteAllBitpacks(ns, options);\\n    await CreateManifest(ns);\\n}\\nasync function BitpackAdd(ns, options, bitpack, version) {\\n    if (!version)\\n        version = 'latest';\\n    var manifest = LoadManifest(ns);\\n    if (manifest === null)\\n        return false;\\n    if (manifest === undefined)\\n        manifest = await CreateManifest(ns);\\n    var existing = manifest.bitpacks[bitpack];\\n    if ((existing && existing !== version) || !existing) {\\n        var metadata = await DownloadBitpack(ns, options, bitpack, version);\\n        if (!metadata) {\\n            return false;\\n        }\\n        else {\\n            manifest.bitpacks[bitpack] = `${metadata.version}`;\\n            if (options.noAlias) {\\n                if (!manifest.options)\\n                    manifest.options = {};\\n                if (!manifest.options[bitpack])\\n                    manifest.options[bitpack] = {};\\n                manifest.options[bitpack].noAlias = true;\\n            }\\n            await SaveManifest(ns, manifest);\\n        }\\n    }\\n    return true;\\n}\\nasync function BitpackRemove(ns, options, bitpack) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    await DeleteBitpack(ns, options, bitpack);\\n    var version = manifest.bitpacks[bitpack];\\n    if (version) {\\n        delete manifest.bitpacks[bitpack];\\n        if (manifest.options && manifest.options[bitpack])\\n            delete manifest.options[bitpack];\\n        await SaveManifest(ns, manifest);\\n    }\\n    Print(ns, options, `Bitpack removed ${bitpack}:${version ? version : ''}`);\\n}\\nasync function List(ns, options) {\\n    var manifest = await RequireManifest(ns);\\n    if (!manifest)\\n        return;\\n    var output = ``;\\n    for (var bitpack in manifest.bitpacks)\\n        output += `\\\\n  ${bitpack}:${manifest.bitpacks[bitpack]}`;\\n    if (output !== '')\\n        Print(ns, options, output);\\n}\\nasync function Create(ns, options, packagePath, bitpackName) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    var filesInPath = ns.ls(ns.getHostname(), packagePath);\\n    for (var file of filesInPath) {\\n        if (!file.startsWith(packagePath))\\n            continue;\\n        if (file.endsWith('package.txt')) {\\n            PrintError(ns, `package.txt already exists. Aborting package creation.`);\\n            return false;\\n        }\\n    }\\n    var createRequest = {\\n        bitpack: bitpackName\\n    };\\n    var createRequestPayload = JSON.stringify(createRequest);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', CreatePackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(createRequestPayload);\\n    var key = '';\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        key = response.key;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (!result) {\\n        PrintError(ns, error);\\n        return false;\\n    }\\n    var bitpack = {\\n        uniqueName: bitpackName,\\n        author: '',\\n        descriptiveName: '',\\n        shortDescription: '',\\n        longDescription: '',\\n        tags: [],\\n        aliases: {}\\n    };\\n    await ns.write(`${packagePath}package.txt`, JSON.stringify(bitpack, undefined, 4));\\n    var bitpackKey = {\\n        publishKey: key\\n    };\\n    await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(bitpackKey, undefined, 4));\\n    Print(ns, options, `Successfully created ${bitpackName}.\\n\\nYour publishing key is ${key} and has been saved into your local publishing-key.txt file.\\nConsider backing it up elsewhere and don't share it with anyone you don't want to be able to publish your package.\\nMake sure to add publishing-key.txt to files like a .gitignore file if you're publicly publishing your package source.\\nDevelop your package and then publish using the 'bp publish' command.\\n`);\\n    return true;\\n}\\nasync function Publish(ns, options, packagePath) {\\n    if (!packagePath.startsWith('/'))\\n        packagePath = `/${packagePath}`;\\n    if (!packagePath.endsWith('/'))\\n        packagePath = `${packagePath}/`;\\n    if (packagePath.startsWith('/bitpacks') || packagePath.startsWith('bitpacks')) {\\n        PrintError(ns, `Publish aborted. Can't publish from the /bitpacks directory.`);\\n        return false;\\n    }\\n    var packMetadata = LoadMetadata(ns, `${packagePath}package.txt`);\\n    if (packMetadata === null) {\\n        PrintError(ns, `Publish aborted. Invalid package.txt`);\\n        return false;\\n    }\\n    var publishKey = packMetadata.publishKey;\\n    if (publishKey) {\\n        var keyFile = {\\n            publishKey: publishKey\\n        };\\n        await ns.write(`${packagePath}publishing-key.txt`, JSON.stringify(keyFile, undefined, 4), 'w');\\n        delete packMetadata.publishKey;\\n        await ns.write(`${packagePath}package.txt`, JSON.stringify(packMetadata, undefined, 4), 'w');\\n    }\\n    var publishKeyFile = LoadKeyFile(ns, `${packagePath}publishing-key.txt`);\\n    if (!publishKeyFile || !publishKeyFile.publishKey) {\\n        PrintError(ns, `Publish aborted. Missing publishing-key.txt`);\\n        return false;\\n    }\\n    var packFilenames = ns.ls(ns.getHostname(), packagePath);\\n    var packFiles = {};\\n    for (var filename of packFilenames) {\\n        if (!filename.startsWith(packagePath))\\n            continue;\\n        var fileData = ns.read(filename);\\n        if (filename === `${packagePath}package.txt`) {\\n            var metadata = JSON.parse(fileData);\\n            delete metadata.publishKey;\\n            fileData = JSON.stringify(metadata, undefined, 4);\\n        }\\n        if (filename === `${packagePath}publishing-key.txt`)\\n            continue;\\n        var packagePathNoLeadingSlash = packagePath.startsWith('/') ? packagePath.slice(1) : packagePath;\\n        var regexString = `import([^'\\\"]+)(?=\\\\\\\\s*from)\\\\\\\\s*from\\\\\\\\s*(['\\\"])\\\\/*${packagePathNoLeadingSlash}(.*)(['\\\"])`;\\n        var regex = RegExp(regexString, 'gm');\\n        if (filename.endsWith('.js') || filename.endsWith('.ns') || filename.endsWith('.script')) {\\n            fileData = fileData.replaceAll(regex, `import$1from $2/bitpacks/${packMetadata.uniqueName}/$3$4;`);\\n        }\\n        packFiles[filename.replace(packagePath, '')] = fileData;\\n    }\\n    var pack = {\\n        metadata: packMetadata,\\n        files: packFiles,\\n        key: publishKeyFile.publishKey\\n    };\\n    var packPayload = JSON.stringify(pack);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', UploadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(packPayload);\\n    var version = -1;\\n    var error = '';\\n    var uploadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = () => {\\n            if (xhr.readyState === XMLHttpRequest.DONE) {\\n                if (xhr.responseText === '' || !xhr.responseText) {\\n                    error = 'Service unreachable.';\\n                    resolve(false);\\n                    return;\\n                }\\n                var response;\\n                try {\\n                    response = JSON.parse(xhr.responseText);\\n                    if (response.error) {\\n                        error = response.error;\\n                        resolve(false);\\n                    }\\n                    else {\\n                        version = response.version;\\n                        resolve(true);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(false);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(false);\\n        };\\n    });\\n    var result = await uploadResultOp;\\n    if (result)\\n        Print(ns, options, `${packMetadata.uniqueName}:${version} published`);\\n    else\\n        PrintError(ns, error);\\n    return result;\\n}\\nfunction Manual(ns, options, bitpack) {\\n    if (!BitpackIsInstalled(ns, options, bitpack)) {\\n        Print(ns, options, `${bitpack} is not installed`);\\n        return;\\n    }\\n    var manual = ns.read(`/bitpacks/${bitpack}/manual.txt`);\\n    if (manual === '')\\n        Print(ns, options, `No manual found for ${bitpack}`);\\n    Print(ns, options, `\\\\n${manual}`);\\n}\\nasync function DownloadBitpack(ns, options, bitpack, version) {\\n    var request = {\\n        bitpack: bitpack,\\n        version: version\\n    };\\n    var requestPayload = JSON.stringify(request);\\n    var xhr = new XMLHttpRequest();\\n    xhr.open('POST', DownloadPackageURL, true);\\n    xhr.setRequestHeader('Content-Type', 'application/json');\\n    xhr.send(requestPayload);\\n    var error = '';\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                try {\\n                    var responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        error = responseJson.error;\\n                        resolve(null);\\n                    }\\n                    else {\\n                        resolve(responseJson.bitpack);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            error = `Service unreachable.`;\\n            resolve(null);\\n        };\\n    });\\n    var payload = await downloadResultOp;\\n    if (!payload) {\\n        PrintError(ns, `Failed to download ${bitpack}:${version}\\\\n    ${error}`);\\n        return null;\\n    }\\n    await DeleteBitpack(ns, options, bitpack);\\n    for (var filename in payload.files) {\\n        await ns.write(`/bitpacks/${bitpack}/${filename}`, payload.files[filename], 'w');\\n    }\\n    Print(ns, options, `Bitpack installed ${bitpack}:${payload.metadata.version}`);\\n    if (payload.metadata.welcome)\\n        Print(ns, options, payload.metadata.welcome);\\n    if (payload.metadata.aliases) {\\n        var manifest = LoadManifest(ns);\\n        var alias = !(manifest?.options && manifest.options[bitpack] && manifest.options[bitpack].noAlias);\\n        if (alias) {\\n            for (var aliasName in payload.metadata.aliases) {\\n                var aliasPath = `/bitpacks/${bitpack}/${payload.metadata.aliases[aliasName]}`;\\n                InstallAlias(aliasName, aliasPath);\\n            }\\n        }\\n    }\\n    return payload.metadata;\\n}\\nfunction InstallAlias(aliasName, aliasPath) {\\n    RunTerminalCommand(`alias ${aliasName}=\\\"run ${aliasPath}\\\"`);\\n}\\nfunction UninstallAlias(aliasName) {\\n    RunTerminalCommand(`unalias ${aliasName}`);\\n}\\nfunction RunTerminalCommand(command) {\\n    const doc = eval('document');\\n    const terminalInput = doc.getElementById('terminal-input');\\n    terminalInput.value = command;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({ target: terminalInput });\\n    terminalInput[handler].onKeyDown({ keyCode: 13, preventDefault: () => null });\\n}\\nasync function ListBitpacks(ns, options) {\\n    var downloadResultOp = new Promise((resolve, reject) => {\\n        var xhr = new XMLHttpRequest();\\n        var apiKey = 'AIzaSyAdqErjegWi8CFRMfrCFNn6Wf9GmR1kBl0';\\n        var url = `https://firestore.googleapis.com/v1/projects/bit-packer/databases/(default)/documents/bitpack-registry?key=${apiKey}`;\\n        xhr.onreadystatechange = function () {\\n            if (xhr.readyState == XMLHttpRequest.DONE) {\\n                var responseJson = null;\\n                try {\\n                    responseJson = JSON.parse(xhr.responseText);\\n                    if (responseJson.error) {\\n                        ns.tprint(responseJson.error);\\n                        resolve(null);\\n                    }\\n                    else {\\n                        var docs = [];\\n                        for (var docIndex in responseJson.documents) {\\n                            var doc = responseJson.documents[docIndex];\\n                            docs.push(ConvertFirestoreObject(doc.fields));\\n                        }\\n                        resolve(docs);\\n                    }\\n                }\\n                catch (syntaxError) {\\n                    ns.tprint(`${syntaxError}`);\\n                    resolve(null);\\n                }\\n            }\\n        };\\n        xhr.onerror = () => {\\n            resolve(null);\\n        };\\n        xhr.open('GET', url, true);\\n        xhr.send(null);\\n    });\\n    var result = await downloadResultOp;\\n    if (result) {\\n        result.sort((a, b) => {\\n            if (a.uniqueName < b.uniqueName) {\\n                return -1;\\n            }\\n            if (a.uniqueName > b.uniqueName) {\\n                return 1;\\n            }\\n            return 0;\\n        });\\n        var output = 'Packages in the bitpack registry:\\\\n';\\n        for (var entry of result) {\\n            output += `    ${entry.uniqueName}: ${entry.shortDescription}\\\\n`;\\n        }\\n        Print(ns, options, output);\\n    }\\n    else\\n        PrintError(ns, `Failed to fetch registry`);\\n}\\nasync function DeleteBitpack(ns, options, bitpack) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest || !manifest.options || !manifest.options[bitpack] || !manifest.options[bitpack].noAlias) {\\n        var metadata = LoadMetadata(ns, `/bitpacks/${bitpack}/package.txt`);\\n        if (metadata && metadata.aliases) {\\n            for (var aliasName in metadata.aliases) {\\n                UninstallAlias(aliasName);\\n            }\\n        }\\n    }\\n    var files = ns.ls(ns.getHostname(), `/bitpacks/${bitpack}`);\\n    for (var file of files) {\\n        if (!file.startsWith(`/bitpacks/${bitpack}`))\\n            continue;\\n        if (options.verbose)\\n            Print(ns, options, `Deleting ${file}`);\\n        ns.rm(file);\\n    }\\n}\\nfunction DeleteAllBitpacks(ns, options) {\\n    var files = ns.ls(ns.getHostname(), '/bitpacks/');\\n    var installedBitpacks = {};\\n    for (var file of files) {\\n        if (!file.startsWith('/bitpacks/'))\\n            continue;\\n        if (file.startsWith(`/bitpacks/bp.js`))\\n            continue;\\n        installedBitpacks[file.split('/')[2]] = true;\\n    }\\n    for (var bitpack in installedBitpacks)\\n        DeleteBitpack(ns, options, bitpack);\\n}\\nfunction LoadManifest(ns) {\\n    var manifestJSON = ns.read('packages.txt');\\n    if (manifestJSON === '')\\n        return undefined;\\n    var manifest = null;\\n    try {\\n        manifest = JSON.parse(manifestJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse packages.txt\\\\n\\\\n${syntaxError}`);\\n    }\\n    return manifest;\\n}\\nasync function CreateManifest(ns) {\\n    var manifest = {\\n        bitpacks: {},\\n        options: {}\\n    };\\n    await SaveManifest(ns, manifest);\\n    return manifest;\\n}\\nasync function SaveManifest(ns, manifest) {\\n    var manifestJSON = JSON.stringify(manifest, undefined, 4);\\n    await ns.write('packages.txt', manifestJSON, 'w');\\n}\\nasync function RequireManifest(ns) {\\n    var manifest = LoadManifest(ns);\\n    if (!manifest)\\n        PrintError(ns, `package.txt not found`);\\n    return manifest;\\n}\\nfunction LoadMetadata(ns, path) {\\n    var metadataJSON = ns.read(path);\\n    if (metadataJSON === '')\\n        return null;\\n    var metadata = null;\\n    try {\\n        metadata = JSON.parse(metadataJSON);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse package.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return metadata;\\n}\\nfunction LoadKeyFile(ns, path) {\\n    var keyFileJson = ns.read(path);\\n    if (keyFileJson === '')\\n        return null;\\n    var keyFile = null;\\n    try {\\n        keyFile = JSON.parse(keyFileJson);\\n    }\\n    catch (syntaxError) {\\n        PrintError(ns, `Couldn't parse publishing-key.txt:\\\\n\\\\n${syntaxError}`);\\n        return null;\\n    }\\n    return keyFile;\\n}\\nfunction CheckRunning(ns, options) {\\n    var running = ns.ps();\\n    if (running.length > 1)\\n        Print(ns, options, `Detected running scripts. It's recommended to kill all scripts before running bitpack.`);\\n}\\nasync function CheckUpdate(ns, options) {\\n    if (await ns.wget(BitpackerURL, '/bitpacks/bp_check.js')) {\\n        var newData = ns.read('/bitpacks/bp_check.js');\\n        var oldData = ns.read('/bitpacks/bp.js');\\n        ns.rm('/bitpacks/bp_check.js', ns.getHostname());\\n        if (newData !== oldData)\\n            Print(ns, options, `A new version of bitpacker is available. Run 'bp update-bp' to upgrade.`);\\n    }\\n}\\nfunction Print(ns, options, value) {\\n    if (options.quiet)\\n        return;\\n    ns.tprint(value);\\n}\\nfunction PrintError(ns, value) {\\n    ns.tprint(`BITPACK ERROR: ${value}`);\\n}\\nfunction GetFirestoreProperty(value) {\\n    const props = {\\n        arrayValue: true,\\n        bytesValue: true,\\n        booleanValue: true,\\n        doubleValue: true,\\n        geoPointValue: true,\\n        integerValue: true,\\n        mapValue: true,\\n        nullValue: true,\\n        referenceValue: true,\\n        stringValue: true,\\n        timestampValue: true\\n    };\\n    return Object.keys(value).find((k) => props[k]);\\n}\\nfunction ConvertFirestoreObject(json) {\\n    const prop = GetFirestoreProperty(json);\\n    if (prop === 'doubleValue' || prop === 'integerValue') {\\n        json = Number(json[prop]);\\n    }\\n    else if (prop === 'arrayValue') {\\n        json = ((json[prop] && json[prop].values) || []).map((v) => ConvertFirestoreObject(v));\\n    }\\n    else if (prop === 'mapValue') {\\n        json = ConvertFirestoreObject((json[prop] && json[prop].fields) || {});\\n    }\\n    else if (prop === 'geoPointValue') {\\n        json = { latitude: 0, longitude: 0, ...json[prop] };\\n    }\\n    else if (prop) {\\n        json = json[prop];\\n    }\\n    else if (typeof json === 'object') {\\n        Object.keys(json).forEach((k) => (json[k] = ConvertFirestoreObject(json[k])));\\n    }\\n    return json;\\n}\\n\",\"filename\":\"/bitpacks/bp_check.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.2,\"server\":\"home\",\"moduleSequenceNumber\":461,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n\\n\\t// Immediate app-specific code\\n\\tconst previewTheme = ({ detail }) => {\\n\\t\\ttry {\\n\\t\\t\\tns.ui.setTheme(JSON.parse(detail))\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\t}\\n\\n\\tconst { apply: themeToApply, 'apply-id': themeIdToApply } = ns.flags([['apply', \\\"\\\"], ['apply-id', \\\"\\\"]])\\n\\tif (themeToApply) {\\n\\t\\treturn previewTheme({ detail: themeToApply })\\n\\t}\\n\\n\\n\\t// Boilerplate\\n\\tconst doc = globalThis['document']\\n\\tconst id = 'theme-browser-app'\\n\\tglobalThis[`${id}-version`] = '0.0.55'\\n\\n\\tlet vueLoaded\\n\\tconst vueLoad = new Promise((resolve) => (vueLoaded = resolve))\\n\\n\\tif (!doc.getElementById('vue-js-lib')) {\\n\\t\\tconst script = doc.createElement('script')\\n\\t\\tscript.id = 'vue-js-lib'\\n\\t\\tscript.src = 'https://cdn.jsdelivr.net/npm/vue@3.2.26/dist/vue.runtime.global.prod.js'\\n\\t\\tscript.onload = vueLoaded\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', script)\\n\\t} else {\\n\\t\\tvueLoaded()\\n\\t}\\n\\n\\n\\t// Extract current theme as CSS varibles for apps\\n\\tlet stylesheet = doc.getElementById('theme-variables')\\n\\tif (!stylesheet) {\\n\\t\\tstylesheet = doc.createElement('style')\\n\\t\\tstylesheet.id = 'theme-variables'\\n\\t\\tdoc.head.insertAdjacentElement('beforeend', stylesheet)\\n\\t}\\n\\n\\tstylesheet.innerHTML = `:root {\\n\\t\\t--font-family: ${getComputedStyle(doc.querySelector('p'))['font-family']};\\n${Object.entries(ns.ui.getTheme()).map(([key, value]) => `--${key}: ${value};`).join('\\\\n')}\\n\\t}`\\n\\n\\n\\t// Add app's CSS and mount point\\n\\tdoc.getElementById(id)?.remove()\\n\\tdoc.body.insertAdjacentHTML('beforeend', `<section id=\\\"${id}\\\"></section>`)\\n\\n\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\tdoc.head.insertAdjacentHTML('beforeend', `<style id=\\\"${id}-css\\\">${bundledCss}</style>`)\\n\\n\\tconst updateApp = async ({ detail: { element, path }}) => {\\n\\t\\tawait ns.wget(path, ns.getScriptName())\\n\\t\\telement.dispatchEvent(new CustomEvent('app:updated'))\\n\\t}\\n\\n\\tdoc.body.addEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\t// Unset some stuff on app death\\n\\tns.atExit(() => {\\n\\t\\tdoc.getElementById(id)?.remove()\\n\\t\\tdoc.getElementById(`${id}-css`)?.remove()\\n\\t\\tdoc.body.removeEventListener('app:update:theme-browser-app', updateApp)\\n\\n\\n\\t\\ttry {\\n\\t\\t\\tdoc.body.removeEventListener('theme:preview', previewTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:cancel-preview', resetTheme)\\n\\t\\t\\tdoc.body.removeEventListener('theme:submit', submitTheme)\\n\\n\\t\\t} catch (e) {\\n\\t\\t\\tconsole.log(e)\\n\\t\\t}\\n\\n\\t})\\n\\n\\tawait vueLoad\\n\\n\\n\\t// App-specific setup\\n\\tconst currentTheme = ns.ui.getTheme()\\n\\tconst resetTheme = () => ns.ui.setTheme(currentTheme)\\n\\tconst submitTheme = ({ detail }) => {\\n\\t\\tdetail.callback(ns.ui.getTheme())\\n\\t}\\n\\n\\tglobalThis[`${id}-theme-id`] = themeIdToApply\\n\\n\\tdoc.body.addEventListener('theme:preview', previewTheme)\\n\\tdoc.body.addEventListener('theme:cancel-preview', resetTheme)\\n\\tdoc.body.addEventListener('theme:submit', submitTheme)\\n\\n\\n\\t// Let's go\\n\\tmount()\\n\\n\\n\\twhile (doc.getElementById(id)) {\\n\\t\\tawait ns.asleep(2000)\\n\\t}\\n\\n} \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n// App CSS\\nconst bundledCss = \\\".app-container[data-v-9289dcfa]{bottom:0;left:0;pointer-events:none;position:fixed;top:0;width:100%;z-index:1510}.app-container.app--can-resize .app[data-v-9289dcfa]{resize:both}.app-container.app--is-minimised .app[data-v-9289dcfa]{height:auto!important;min-height:0;min-width:0;resize:none}.app-container.app--is-minimised .app .app__content[data-v-9289dcfa]{display:none}.app-container *[data-v-9289dcfa]{box-sizing:border-box}.app-container .app[data-v-9289dcfa]{align-items:flex-start;border:1px solid #4E4E4E6B;display:inline-flex;flex-direction:column;left:0;height:500px;overflow:hidden;pointer-events:auto;position:absolute;resize:none;top:0;transform:translate(-50%,-52%);width:300px}.app-container .app__toolbar[data-v-9289dcfa]{background:#111;color:#fff;display:flex;padding:4px 3px 4px 8px;user-select:none;width:100%}.app-container .app__title[data-v-9289dcfa]{align-self:center;flex:0 1 100%;font-family:var(--font-family, monospace);font-size:13px;font-weight:700;line-height:1;margin:0 20px 0 0;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.app-container .app__cta-group[data-v-9289dcfa]{align-items:center;display:flex;flex:0 1 100%;justify-content:flex-end;margin-left:auto}.app-container .app__cta-group>*[data-v-9289dcfa]{background-position:50% 50%;background-size:14px auto;flex:0 1 auto}.app-container .app__cta-group .icon[data-v-9289dcfa]{width:16px}.app-container .app__cta-group .icon--restore[data-v-9289dcfa]{color:#d6cec8}.app-container .app__cta-group .icon--update[data-v-9289dcfa]{color:#6bd700}.app-container .app__cta-group .btn[data-v-9289dcfa]{background:none;border:none;color:#a9a9a9;cursor:pointer;display:flex}.app-container .app__icon[data-v-9289dcfa]{align-self:center;max-height:16px;margin-right:6px;object-fit:contain;width:16px}.app-container .app__menu[data-v-9289dcfa]{width:100%;background:#d4d0c8;color:#333;padding-left:5px;padding-bottom:2px}.app-container .app__menu span[data-v-9289dcfa]{border:1px inset transparent;cursor:pointer;font-size:15px;margin-right:12px;padding:0 1px}.app-container .app__menu span[data-v-9289dcfa]:hover{border:1px inset #BDBDBD}.app-container .app__content[data-v-9289dcfa]{flex:0 1 100%;overflow:auto;scrollbar-color:var(--primary, #272727) var(--primarydark, #B7B7B7);scrollbar-width:thin;width:100%}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar{display:block;width:10px}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-track{background-color:var(--primarydark, #B7B7B7)}.app-container .app__content[data-v-9289dcfa]::-webkit-scrollbar-thumb{background-color:var(--primary, #272727)}.app-container .app .btn[data-v-9289dcfa]{background:none;box-shadow:none}.modal[data-v-01a1e9db]{background:#FFF;border:1px solid #0003;border-radius:6px;display:flex;flex-wrap:wrap;left:50%;padding:24px;position:absolute;top:50%;transform:translate(-50%,-50%);width:40vw}.modal__title[data-v-01a1e9db]{color:#212529;font-size:20px;font-weight:500;line-height:1.5;margin:0}.modal__message[data-v-01a1e9db]{line-height:1.4}.modal__ctas[data-v-01a1e9db],.modal__message[data-v-01a1e9db]{flex:1 0 100%;margin:16px 0 0}.modal__ctas[data-v-01a1e9db]{display:flex;justify-content:flex-end}.modal .cta[data-v-01a1e9db]{border:1px solid transparent;border-radius:4px;cursor:pointer;display:inline-block;font-weight:400;font-size:16px;line-height:1.5;margin-left:12px;padding:6px 12px;text-align:center;transition:.15s ease-in-out;transition-property:color,background-color,border-color,box-shadow;vertical-align:middle}.modal .cta[data-v-01a1e9db]:hover{text-decoration:none}.modal .cta--cancel[data-v-01a1e9db]{background-color:#6c757d;border-color:#6c757d;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:hover{background-color:#5a6268;border-color:#545b62;color:#fff}.modal .cta--cancel[data-v-01a1e9db]:active{background-color:#545b62;border-color:#4e555b;color:#fff}.modal .cta--confirm[data-v-01a1e9db]{background-color:#28a745;border-color:#28a745;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:hover{background-color:#218838;border-color:#1e7e34;color:#fff}.modal .cta--confirm[data-v-01a1e9db]:active{background-color:#1e7e34;border-color:#1c7430;color:#fff}.app-wrapper[data-v-4cc735b8],.update-modal[data-v-4cc735b8],button[data-v-4cc735b8]{font-family:Fira Sans,Trebuchet MS,Ubuntu,Helvetica,Arial,sans-serif}.update-modal[data-v-4cc735b8]{background:rgba(51,51,51,.7);height:100%;left:0;position:fixed;top:0;width:100%;z-index:1512}.theme-list[data-v-0c54f5f6]{display:flex;flex-wrap:wrap;list-style:none;margin:0;padding:0}.theme-list .theme[data-v-0c54f5f6]{box-sizing:border-box;display:flex;flex:0 0 33%;flex-direction:column;margin:0;padding:16px}.theme-list .theme__name[data-v-0c54f5f6],.theme-list .theme__author[data-v-0c54f5f6]{text-align:center}.theme-list .theme__name[data-v-0c54f5f6]{color:#80f20d;font-size:18px;font-weight:500;margin:14px 0 auto}.theme-list .theme__author[data-v-0c54f5f6]{color:#ccced0;font-size:14px;margin:14px 0 0}.theme-list .theme__preview[data-v-0c54f5f6]{aspect-ratio:1.5;cursor:pointer;display:block;height:auto;pointer-events:auto;transition:transform .2s cubic-bezier(.4,0,.2,1);width:100%}.theme-list .theme__preview[data-v-0c54f5f6]:hover{transform:scale(1.1)}.theme-list .theme .voting[data-v-0c54f5f6]{display:flex;flex-direction:row;align-items:center;margin:14px 0 0}.theme-list .theme .voting.hasActive button[data-v-0c54f5f6]{opacity:.2}.theme-list .theme .voting button[data-v-0c54f5f6]{background:none;padding:5px;border:none;appearance:none;text-align:center;width:42px;font-size:1.5rem;flex:0 0 auto;cursor:pointer;transition:opacity .2s ease-in-out}.theme-list .theme .voting button.active[data-v-0c54f5f6],.theme-list .theme .voting button[data-v-0c54f5f6]:hover,.theme-list .theme .voting button[data-v-0c54f5f6]:active{opacity:1}.theme-list .theme .voting span[data-v-0c54f5f6]{text-align:center;flex:1 1 auto}.theme-browser__header[data-v-18a02012]{display:flex;align-items:center;justify-content:space-between;flex-basis:100%;margin-bottom:20px}.theme-browser__header h1[data-v-18a02012],.theme-browser__header button[data-v-18a02012],.theme-browser__header span[data-v-18a02012]{flex:0 0 auto}.theme-browser__header button[data-v-18a02012]{background:transparent;color:#fff;appearance:none;border:none}.theme-browser__header button span[data-v-18a02012]{display:inline-block;padding-bottom:3px;border-bottom:1px white dotted}[data-v-9f4bd1a0] .app-container .app{left:50%;height:90vh;max-width:1166px;top:50%;transform:translate(-50%,-52%);width:90vw}.theme-browser[data-v-9f4bd1a0]{align-content:flex-start;align-items:baseline;background:#171A22;box-sizing:border-box;color:#fff;display:flex;flex-wrap:wrap;height:inherit;justify-content:space-between;min-height:100%;padding:24px 32px}.theme-browser input[data-v-9f4bd1a0],.theme-browser button[data-v-9f4bd1a0]{box-sizing:border-box;background:rgba(255,255,255,.3);color:#fff;appearance:none;border:0;padding:6px 12px;line-height:1.4em;margin:0 0 1em;width:100%;max-width:100%;border-radius:4px}.theme-browser input[data-v-9f4bd1a0]:focus,.theme-browser input[data-v-9f4bd1a0]:hover,.theme-browser input[data-v-9f4bd1a0]:active,.theme-browser button[data-v-9f4bd1a0]:focus,.theme-browser button[data-v-9f4bd1a0]:hover,.theme-browser button[data-v-9f4bd1a0]:active{background:rgba(255,255,255,.6)}.theme-browser input[data-v-9f4bd1a0]{display:block;width:100%}.theme-browser button[data-v-9f4bd1a0]{cursor:pointer;flex-basis:50%;display:inline-block;width:auto;padding:8px 12px;border-radius:0}.theme-browser button[data-v-9f4bd1a0]:first-child{border-top-left-radius:4px;border-bottom-left-radius:4px}.theme-browser button[data-v-9f4bd1a0]:last-child{border-top-right-radius:4px;border-bottom-right-radius:4px}.title[data-v-9f4bd1a0],.pagination-details[data-v-9f4bd1a0]{flex:0 1 auto;margin:0}.title[data-v-9f4bd1a0]{margin-right:20px}.pagination-wrapper[data-v-9f4bd1a0]{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.pagination-wrapper button[data-v-9f4bd1a0]{flex:0 0 auto}.pagination-wrapper .pagination-details[data-v-9f4bd1a0]{color:#cecece;margin-left:auto}.themes[data-v-9f4bd1a0]{flex:1 0 100%;margin-top:16px}.loader[data-v-9f4bd1a0]{align-self:center;background:no-repeat 55% 50%/100px auto url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMDAgMTAwJz4KCTxnIGZpbGw9JyM5MDAnPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC42N3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuNjdzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPSctMC4zM3MnCgkJCS8+CgkJCTxhbmltYXRlCgkJCQlhdHRyaWJ1dGVOYW1lPSdmaWxsLW9wYWNpdHknCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzA7MTsxJwoJCQkJa2V5VGltZXM9JzA7MC4yOzEnCgkJCQliZWdpbj0nLTAuMzNzJwoJCQkvPgoJCTwvY2lyY2xlPgoJCTxjaXJjbGUgY3g9JzYwJyBjeT0nNTAnIHI9JzQnPgoJCQk8YW5pbWF0ZQoJCQkJYXR0cmlidXRlTmFtZT0nY3gnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9Jzk1OzM1JwoJCQkJa2V5VGltZXM9JzA7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQkJPGFuaW1hdGUKCQkJCWF0dHJpYnV0ZU5hbWU9J2ZpbGwtb3BhY2l0eScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMDsxOzEnCgkJCQlrZXlUaW1lcz0nMDswLjI7MScKCQkJCWJlZ2luPScwcycKCQkJLz4KCQk8L2NpcmNsZT4KCTwvZz4KCTxnIGZpbGw9JyM4MGYyMGQnIHRyYW5zZm9ybT0ndHJhbnNsYXRlKC0xNSAwKSc+CgkJPHBhdGggZD0nTTUwIDUwTDIwIDUwQTMwIDMwIDAgMCAwIDgwIDUwWic+CgkJCTxhbmltYXRlVHJhbnNmb3JtCgkJCQlhdHRyaWJ1dGVOYW1lPSd0cmFuc2Zvcm0nCgkJCQl0eXBlPSdyb3RhdGUnCgkJCQlyZXBlYXRDb3VudD0naW5kZWZpbml0ZScKCQkJCWR1cj0nMXMnCgkJCQl2YWx1ZXM9JzAgNTAgNTA7NDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCQk8cGF0aCBkPSdNNTAgNTBMMjAgNTBBMzAgMzAgMCAwIDEgODAgNTBaJz4KCQkJPGFuaW1hdGVUcmFuc2Zvcm0KCQkJCWF0dHJpYnV0ZU5hbWU9J3RyYW5zZm9ybScKCQkJCXR5cGU9J3JvdGF0ZScKCQkJCXJlcGVhdENvdW50PSdpbmRlZmluaXRlJwoJCQkJZHVyPScxcycKCQkJCXZhbHVlcz0nMCA1MCA1MDstNDUgNTAgNTA7MCA1MCA1MCcKCQkJCWtleVRpbWVzPScwOzAuNTsxJwoJCQkvPgoJCTwvcGF0aD4KCTwvZz4KPC9zdmc+Cg==);flex:1 0 100%;height:200px;margin:auto 0 40%;width:200px}form[data-v-9f4bd1a0]{display:flex;flex-direction:column;width:60%;margin:0 auto}form div[data-v-9f4bd1a0]{width:100%;display:flex;flex-direction:column}form div.buttons[data-v-9f4bd1a0]{flex-direction:row}form div label[data-v-9f4bd1a0]{margin-bottom:.4em}.app__content[data-v-9f4bd1a0]{overflow-y:scroll}.preview__ctas[data-v-9f4bd1a0]{bottom:0;display:flex;height:150px;justify-content:space-between;position:fixed;right:30px;width:150px}.preview__ctas:not(.preview__ctas--visible) .preview__cta[data-v-9f4bd1a0]{pointer-events:none}.preview__ctas:not(.preview__ctas--visible) .preview__cta--cancel[data-v-9f4bd1a0]{transform:translate(190px,160px)}.preview__ctas:not(.preview__ctas--visible) .preview__cta--confirm[data-v-9f4bd1a0]{transform:translate(110px,160px)}.preview__ctas .preview__cta[data-v-9f4bd1a0]{align-items:center;background:no-repeat 50% 50%/30px auto;border:none;border-radius:50%;cursor:pointer;display:flex;flex:0 1 44%;height:66px;justify-content:center;padding:0;position:relative;transition:transform .25s cubic-bezier(.4,0,.2,1)}.preview__ctas .preview__cta--cancel[data-v-9f4bd1a0]{background-color:#e33030d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCA0Ny4wOTUgNDcuMDk1Jz4KCTxwYXRoCgkJZmlsbD0nI0ZGRicKCQlkPSdtNDUuMzYzIDM2LjIzNC0xMy4xNTgtMTMuMTYgMTIuMjEtMTIuMjFhNS45MDYgNS45MDYgMCAwIDAgMC04LjM1OCA1LjkwOCA1LjkwOCAwIDAgMC04LjM1NiAwbC0xMi4yMTIgMTIuMjEtMTIuODA5LTEyLjgxYTUuOTEgNS45MSAwIDEgMC04LjM1OCA4LjM1OGwxMi44MSAxMi44MUwxLjczMiAzNi44MzFhNS45MSA1LjkxIDAgMSAwIDguMzU2IDguMzU5bDEzLjc1OS0xMy43NTggMTMuMTYgMTMuMTZhNS45MDggNS45MDggMCAwIDAgOC4zNTYgMCA1LjkwNyA1LjkwNyAwIDAgMCAwLTguMzU4eicKCS8+Cjwvc3ZnPgo=);transform:translateY(40px)}.preview__ctas .preview__cta--confirm[data-v-9f4bd1a0]{background-color:#72d000d4;background-image:url(data:image/svg+xml;base64,PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAxMjIuODc3IDEwMS4wNTInPgoJPHBhdGgKCQlmaWxsPSd3aGl0ZScKCQlkPSdNNC40MyA2My42M0ExNC4zODMgMTQuMzgzIDAgMCAxIC4wMDMgNTMuNTJhMTQuMzkzIDE0LjM5MyAwIDAgMSA0LjAxNS0xMC4yODEgMTQuMzcyIDE0LjM3MiAwIDAgMSAxMC4xMDYtNC40MjUgMTQuMzczIDE0LjM3MyAwIDAgMSAxMC4yODMgNC4wMTJsMjQuNzg3IDIzLjg1MUw5OC41NDMgMy45ODlsMS43NjggMS4zNDktMS43Ny0xLjM1NWEyLjI3IDIuMjcgMCAwIDEgLjQ3OS0uNDY2QTE0LjM4MyAxNC4zODMgMCAwIDEgMTA5LjI0My4wMjJWLjAxOGwuMTc2LjAxNmMzLjYyMy4yNCA3LjE2MiAxLjg1IDkuNzc1IDQuNzY2YTE0LjM4MyAxNC4zODMgMCAwIDEgMy42NjIgMTAuNDEyaC4wMDRsLS4wMTYuMTc2YTE0LjM2MiAxNC4zNjIgMCAwIDEtNC42MDkgOS42MzJMNTkuMDExIDk3LjExbC4wMDQuMDA0YTIuMTU3IDIuMTU3IDAgMCAxLS4zNzIuMzY4IDE0LjM5MiAxNC4zOTIgMCAwIDEtOS43NTcgMy41NjkgMTQuMzgxIDE0LjM4MSAwIDAgMS05Ljc0MS00LjAxNkw0LjQzIDYzLjYzeicKCS8+Cjwvc3ZnPgo=)}.sr-only[data-v-9f4bd1a0]{clip:rect(1px,1px,1px,1px);clip-path:inset(50%);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@keyframes slide-up-left-9f4bd1a0{0%{transform:translate(150px,150px)}to{transform:translate(0)}}\\\\n\\\"\\n\\n// Don't worry about it.\\nfunction mount() {\\n\\tconst winnerdow = globalThis\\n\\tconst rockument = globalThis['document'];\\n\\tvar xt=Object.defineProperty,It=Object.defineProperties;var Lt=Object.getOwnPropertyDescriptors;var K=Object.getOwnPropertySymbols;var jt=Object.prototype.hasOwnProperty,Pt=Object.prototype.propertyIsEnumerable;var J=(e,_,f)=>_ in e?xt(e,_,{enumerable:!0,configurable:!0,writable:!0,value:f}):e[_]=f,A=(e,_)=>{for(var f in _||(_={}))jt.call(_,f)&&J(e,f,_[f]);if(K)for(var f of K(_))Pt.call(_,f)&&J(e,f,_[f]);return e},q=(e,_)=>It(e,Lt(_));(function(e){\\\"use strict\\\";function _(n){rockument.querySelector(`#${n} .app-container`).dispatchEvent(new CustomEvent(\\\"app:close\\\"))}function f(n,t){rockument.body.dispatchEvent(new CustomEvent(n,{detail:t}))}const G=async(n,t)=>{const a=await fetch(t).then(o=>o.text());return Q(a,n)?a:null},Q=(n,t)=>{const a=n.split(\\\".\\\").map(Number),o=t.split(\\\".\\\").map(Number);for(let i=0;i<a.length;++i){if(a[i]>o[i])return!0;if(o[i]>a[i])return!1}return!1},X={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},Y=[e.createElementVNode(\\\"g\\\",{stroke:\\\"currentColor\\\",\\\"stroke-width\\\":\\\"1.5\\\"},[e.createElementVNode(\\\"path\\\",{d:\\\"m3 3 12 12M15 3 3 15\\\"})],-1)];function Z(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",X,Y)}var ee={render:Z};const te={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},oe=[e.createElementVNode(\\\"path\\\",{d:\\\"M3 13h12v2H3z\\\",fill:\\\"currentColor\\\"},null,-1)];function ne(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",te,oe)}var ae={render:ne};const se={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 18 18\\\"},le=[e.createStaticVNode('<path d=\\\"M5 1.5h11v3H5z\\\"></path><g fill=\\\"currentColor\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.6\\\"><path d=\\\"M5.8 4.3h9.4v6.5H5.8z\\\"></path><path d=\\\"M1.8 9h9.4v6.5H1.8z\\\"></path></g><path d=\\\"M1 6.2h11v3H1z\\\"></path>',3)];function ie(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",se,le)}var re={render:ie};const ce={xmlns:\\\"http://www.w3.org/2000/svg\\\",viewBox:\\\"0 0 417 417\\\"},de=[e.createElementVNode(\\\"path\\\",{fill:\\\"#FFF\\\",d:\\\"M120 90h180v235H120z\\\"},null,-1),e.createElementVNode(\\\"path\\\",{fill:\\\"currentColor\\\",d:\\\"M208.5 417a208.5 208.5 0 1 0 0-417 208.5 208.5 0 0 0 0 417zm-81.3-197.5 68.3-118.3a15 15 0 0 1 26 0l68.2 118.3a15 15 0 0 1-13 22.5h-33.2v66.2a15 15 0 0 1-15 15h-40a15 15 0 0 1-15-15V242h-33.3a15 15 0 0 1-13-22.5z\\\"},null,-1)];function pe(n,t){return e.openBlock(),e.createElementBlock(\\\"svg\\\",ce,de)}var me={render:pe},Ot=\\\"\\\",M=(n,t)=>{const a=n.__vccOpts||n;for(const[o,i]of t)a[o]=i;return a};const he={name:\\\"AppContainer\\\",components:{IconClose:ee,IconMinimise:ae,IconRestore:re,IconUpdate:me},props:{title:{type:String,required:!0},availableUpdate:{type:[String,Promise],default:null},versionFilePath:{type:String,default:null},id:{type:String,default:null},options:{type:Object,default:()=>({})}},setup({options:n}){const t=e.ref(null),a=e.ref(!1),o=e.ref(),i=e.ref(),h=e.ref(),s=e.ref(),d=e.ref(),p=e.ref(),c=e.ref();let u={},B={};const S=e.ref(!1),v=Object.assign({canDrag:!0,canMinimise:!0,canResize:!0},n),$=()=>{const g=t.value.offsetWidth,N=t.value.offsetHeight;s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,p.value=s.value/2-g/2,c.value=d.value/2-N/2};e.onMounted(()=>{v.canResize?new ResizeObserver(([{borderBoxSize:[{inlineSize:g,blockSize:N}]}])=>{a.value&&!S.value&&(o.value=g,i.value=N),a.value=!0}).observe(t.value):a.value=!0,v.canDrag&&$()});const I=({x:g,y:N,button:b})=>{if(!v.canDrag)return;const w=rockument.body;b||(u={x:g,y:N},o.value=t.value.offsetWidth,i.value=t.value.offsetHeight,B={x:p.value,y:c.value},s.value=winnerdow.innerWidth,d.value=winnerdow.innerHeight,w.addEventListener(\\\"mousemove\\\",T),w.addEventListener(\\\"mouseup\\\",C),w.addEventListener(\\\"mouseleave\\\",C))},C=()=>{const g=rockument.body;g.removeEventListener(\\\"mousemove\\\",T),g.removeEventListener(\\\"mouseup\\\",C),g.removeEventListener(\\\"mouseleave\\\",C)};e.onUnmounted(C);const T=({x:g,y:N})=>{let b=B.x+(g-u.x),w=B.y+(N-u.y);const L=b<0,H=b+o.value>s.value;(L||H)&&(L?b=0:b=s.value-o.value,B.x=b,u.x=Math.max(Math.min(g,s.value-5),5));const j=w<0,W=w+i.value>d.value;(j||W)&&(j?w=0:w=d.value-i.value,B.y=w,u.y=Math.max(Math.min(N,d.value),5)),p.value=b,c.value=w};return{isMinimised:S,left:p,process:t,processHeight:i,processWidth:o,top:c,windowOptions:v,beginGrabbing:I,setPosition:$,toggleMinimise:()=>{S.value||(h.value=i.value),S.value=!S.value,S.value||(i.value=h.value)}}}},_e={class:\\\"app__title\\\"},fe={class:\\\"app__cta-group\\\"},ge=[\\\"title\\\"],we={class:\\\"app__content\\\"};function ye(n,t,a,o,i,h){const s=e.resolveComponent(\\\"icon-update\\\"),d=e.resolveComponent(\\\"icon-minimise\\\"),p=e.resolveComponent(\\\"icon-restore\\\"),c=e.resolveComponent(\\\"icon-close\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",{class:e.normalizeClass([\\\"app-container\\\",{\\\"app--is-minimised\\\":o.isMinimised,\\\"app--can-resize\\\":o.windowOptions.canResize}])},[e.createElementVNode(\\\"div\\\",{ref:\\\"process\\\",class:\\\"app\\\",style:e.normalizeStyle({transform:`translate(${o.left}px, ${o.top}px)`,width:`${o.processWidth}px`,height:`${o.processHeight}px`})},[e.createElementVNode(\\\"div\\\",{class:\\\"app__toolbar\\\",onMousedown:t[6]||(t[6]=(...u)=>o.beginGrabbing&&o.beginGrabbing(...u))},[e.createElementVNode(\\\"h1\\\",_e,e.toDisplayString(a.title),1),e.createElementVNode(\\\"div\\\",fe,[a.availableUpdate?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,class:\\\"btn btn--small app__cta-update-available\\\",title:`Version ${a.availableUpdate} is available`,onClick:t[0]||(t[0]=u=>n.$emit(\\\"app:click:update\\\")),onMousedown:t[1]||(t[1]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(s,{class:\\\"icon icon--update\\\"})],40,ge)):e.createCommentVNode(\\\"\\\",!0),o.windowOptions.canMinimise?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:1,class:\\\"btn btn--small app__cta-minimise\\\",onClick:t[2]||(t[2]=(...u)=>o.toggleMinimise&&o.toggleMinimise(...u)),onMousedown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.withDirectives(e.createVNode(d,{class:\\\"icon icon--minimise\\\"},null,512),[[e.vShow,!o.isMinimised]]),e.withDirectives(e.createVNode(p,{class:\\\"icon icon--restore\\\"},null,512),[[e.vShow,o.isMinimised]])],32)):e.createCommentVNode(\\\"\\\",!0),e.createElementVNode(\\\"button\\\",{class:\\\"btn btn--small app__cta-close\\\",title:\\\"Close\\\",onClick:t[4]||(t[4]=u=>n.$emit(\\\"app:close\\\")),onMousedown:t[5]||(t[5]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[e.createVNode(c,{class:\\\"icon icon--close\\\"})],32)])],32),e.createElementVNode(\\\"div\\\",we,[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)])],4)],2)}var ue=M(he,[[\\\"render\\\",ye],[\\\"__scopeId\\\",\\\"data-v-9289dcfa\\\"]]),Ht=\\\"\\\";const be={name:\\\"UpdateModal\\\",props:{appFilePath:{type:String,default:null},id:{type:String,default:null},version:{type:String,default:null}},setup({appFilePath:n,id:t}){const a=e.ref(null),o=e.ref(!1);return{element:a,hasUpdated:o,doUpdate:()=>f(`app:update:${t}`,{element:a.value,path:n}),updateComplete:()=>o.value=!0}}},P=n=>(e.pushScopeId(\\\"data-v-01a1e9db\\\"),n=n(),e.popScopeId(),n),ke={class:\\\"modal__title\\\"},Ee={class:\\\"modal__ctas\\\"},Ne=P(()=>e.createElementVNode(\\\"h1\\\",{class:\\\"modal__title\\\"},\\\" App successfully updated \\\",-1)),Ve=P(()=>e.createElementVNode(\\\"p\\\",{class:\\\"modal__message\\\"},\\\" Restart the app in your own time to get the latest version. \\\",-1)),Se={class:\\\"modal__ctas\\\"};function Ce(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"div\\\",{ref:\\\"element\\\",onClick:t[4]||(t[4]=e.withModifiers(s=>n.$emit(\\\"modal:close\\\"),[\\\"stop\\\"])),\\\"onApp:updated\\\":t[5]||(t[5]=(...s)=>o.updateComplete&&o.updateComplete(...s))},[e.createElementVNode(\\\"div\\\",{class:\\\"modal\\\",onClick:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},[o.hasUpdated?(e.openBlock(),e.createElementBlock(e.Fragment,{key:1},[Ne,Ve,e.createElementVNode(\\\"div\\\",Se,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[2]||(t[2]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Okay! \\\")])],64)):(e.openBlock(),e.createElementBlock(e.Fragment,{key:0},[e.createElementVNode(\\\"h1\\\",ke,\\\" Do you want to update to v\\\"+e.toDisplayString(a.version)+\\\"? \\\",1),e.createElementVNode(\\\"div\\\",Ee,[e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--cancel\\\",onClick:t[0]||(t[0]=s=>n.$emit(\\\"modal:close\\\"))},\\\" Nope \\\"),e.createElementVNode(\\\"button\\\",{class:\\\"cta cta--confirm\\\",onClick:t[1]||(t[1]=(...s)=>o.doUpdate&&o.doUpdate(...s))},\\\" Sure! \\\")])],64))])],544)}var Be=M(be,[[\\\"render\\\",Ce],[\\\"__scopeId\\\",\\\"data-v-01a1e9db\\\"]]),Wt=\\\"\\\";const Me={name:\\\"AppWrapper\\\",components:{AppContainer:ue,UpdateModal:Be},props:{title:{type:String,default:null},id:{type:String,default:null},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null},windowOptions:{type:Object,default:()=>({})}},setup({appFilePath:n,id:t,versionFilePath:a}){const o=e.ref(!1),i=e.ref(null);return e.onMounted(async()=>{n&&a&&(i.value=await G(winnerdow[`${t}-version`]||\\\"0.0.0\\\",a))}),{availableUpdate:i,showUpdateModal:o,destroy:()=>rockument.getElementById(t).remove()}}},ve={class:\\\"app-wrapper\\\"};function $e(n,t,a,o,i,h){const s=e.resolveComponent(\\\"app-container\\\"),d=e.resolveComponent(\\\"update-modal\\\");return e.openBlock(),e.createElementBlock(\\\"div\\\",ve,[e.createVNode(s,e.mergeProps({title:a.title,availableUpdate:o.availableUpdate,options:a.windowOptions},{class:\\\"app-container\\\",\\\"onApp:click:update\\\":t[0]||(t[0]=p=>o.showUpdateModal=!0),\\\"onApp:close\\\":o.destroy}),{default:e.withCtx(()=>[e.renderSlot(n.$slots,\\\"default\\\",{},void 0,!0)]),_:3},16,[\\\"onApp:close\\\"]),o.showUpdateModal?(e.openBlock(),e.createBlock(d,e.mergeProps({key:0},{appFilePath:a.appFilePath,id:a.id},{version:o.availableUpdate,class:\\\"update-modal\\\",\\\"onModal:close\\\":t[1]||(t[1]=p=>o.showUpdateModal=!1),\\\"onApp:updated\\\":t[2]||(t[2]=p=>o.availableUpdate=null)}),null,16,[\\\"version\\\"])):e.createCommentVNode(\\\"\\\",!0)])}var Te=M(Me,[[\\\"render\\\",$e],[\\\"__scopeId\\\",\\\"data-v-4cc735b8\\\"]]);const Ae=\\\"theme-browser-app\\\",V=\\\"https://bitburner.daft.host\\\",x=\\\"/api/themes\\\",xe=\\\"/api/user\\\";var Ie=Object.freeze({__proto__:null,[Symbol.toStringTag]:\\\"Module\\\",id:Ae,baseUri:V,themesEndpoint:x,userEndpoint:xe});function Le(n){return new Date(n).toLocaleDateString()}var Kt=\\\"\\\";const je={name:\\\"ThemeList\\\",props:{themes:{type:Array,default:()=>[]},user:{type:Object,default:()=>({})}},setup(n,t){return{onClickVote:(o,i)=>{fetch(`${V}/api/themes/${o.id}/${i}`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${n.user.token}`}}).then(()=>{t.emit(\\\"theme:reload\\\",o.id)})},formatDate:Le}}},Pe={key:0,class:\\\"theme-list\\\"},Re=[\\\"src\\\",\\\"onClick\\\"],Ue={class:\\\"theme__name\\\"},Fe={class:\\\"theme__author\\\"},ze=[\\\"v-if\\\"],De=[\\\"onClick\\\"],Oe=[\\\"onClick\\\"],He={key:1};function We(n,t,a,o,i,h){return a.themes.length?(e.openBlock(),e.createElementBlock(\\\"ul\\\",Pe,[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(a.themes,(s,d)=>{var p;return e.openBlock(),e.createElementBlock(\\\"li\\\",{key:d,class:\\\"theme\\\"},[e.createElementVNode(\\\"img\\\",{src:(p=s.images[1])==null?void 0:p.src,alt:\\\"\\\",class:\\\"theme__preview\\\",onClick:c=>n.$emit(\\\"theme:preview\\\",s.json)},null,8,Re),e.createElementVNode(\\\"h1\\\",Ue,e.toDisplayString(s.name),1),e.createElementVNode(\\\"h2\\\",Fe,e.toDisplayString(s.author.name),1),e.createElementVNode(\\\"div\\\",{\\\"v-if\\\":a.user,class:e.normalizeClass({voting:!0,hasActive:s.user_vote!==null&&s.user_vote!==void 0})},[e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===-1}),onClick:c=>o.onClickVote(s,\\\"downvote\\\")},\\\" \\\\u{1F44E} \\\",10,De),e.createElementVNode(\\\"span\\\",null,e.toDisplayString(s.vote),1),e.createElementVNode(\\\"button\\\",{class:e.normalizeClass({active:s.user_vote===1}),onClick:c=>o.onClickVote(s,\\\"upvote\\\")},\\\" \\\\u{1F44D} \\\",10,Oe)],10,ze)])}),128))])):(e.openBlock(),e.createElementBlock(\\\"p\\\",He,\\\" Sorry, we couldn't fetch any themes at the moment :( \\\"))}var Ke=M(je,[[\\\"render\\\",We],[\\\"__scopeId\\\",\\\"data-v-0c54f5f6\\\"]]),Jt=\\\"\\\";const Je={name:\\\"TbHeader\\\",props:{title:{type:String,required:!0},user:{type:Object,required:!0}}},R=n=>(e.pushScopeId(\\\"data-v-18a02012\\\"),n=n(),e.popScopeId(),n),qe={class:\\\"theme-browser__header\\\"},Ge={class:\\\"title\\\"},Qe=[R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Login\\\",-1)),e.createTextVNode(\\\" / \\\"),R(()=>e.createElementVNode(\\\"span\\\",null,\\\"Register\\\",-1))],Xe={key:1};function Ye(n,t,a,o,i,h){return e.openBlock(),e.createElementBlock(\\\"header\\\",qe,[e.createElementVNode(\\\"h1\\\",Ge,e.toDisplayString(a.title),1),!a.user||!a.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[0]||(t[0]=s=>n.$emit(\\\"login:click\\\"))},Qe)):e.createCommentVNode(\\\"\\\",!0),a.user&&a.user.id?(e.openBlock(),e.createElementBlock(\\\"span\\\",Xe,\\\"Hello \\\"+e.toDisplayString(a.user.name||\\\"\\\"),1)):e.createCommentVNode(\\\"\\\",!0)])}var Ze=M(Je,[[\\\"render\\\",Ye],[\\\"__scopeId\\\",\\\"data-v-18a02012\\\"]]);async function et(n){return await fetch(`${V}${x}/${n}`).then(t=>t.json())}async function tt(n){n=n||null;const t={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"};return n&&(t.Authorization=`Bearer ${n}`),fetch(`${V}${x}`,{headers:t})}async function ot(n){const{data:t,meta:a}=await n.then(o=>o.json()).catch(()=>({data:[],meta:{}}));return{data:t||[],meta:a}}var Xt=\\\"\\\";const nt={components:{AppWrapper:Te,ThemeList:Ke,TbHeader:Ze},props:{id:{type:String,required:!0},appFilePath:{type:String,default:null},versionFilePath:{type:String,default:null}},setup({id:n}){const t=e.ref(!0),a=e.ref(!0),o=e.ref(!1),i=e.ref([]),h=e.ref({}),s=e.ref(!1),d=e.ref(!1),p=e.ref(!1),c=e.ref({}),u=e.computed(()=>a.value?\\\"Loading...\\\":i.value.length?\\\"Browse themes\\\":\\\"Uh oh...\\\"),B=e.computed(()=>Math.max(1,S.value-h.value.items_per_page)),S=e.computed(()=>Math.min(h.value.total_items,h.value.page*h.value.items_per_page)),v=e.computed(()=>h.value.total_items),$={canDrag:!1,canMinimise:!1,canResize:!1},I=l=>{f(\\\"theme:cancel-preview\\\",l),o.value=!1},C=l=>{f(\\\"theme:preview\\\",l),o.value=!0},T=async()=>{a.value=!0;const l=b(),r=tt(l),{data:E,meta:m}=await ot(r);h.value=m,i.value=E,a.value=!1},O=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.password)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()},g=async l=>{l.preventDefault();let r={name:null,json:null};const E=b();if(!E)return;for(let y=0;y<l.target.length;y++)l.target[y].nodeName===\\\"INPUT\\\"&&(r[l.target[y].name]=l.target[y].value);if(!r.name)return;f(\\\"theme:submit\\\",{callback:y=>{fetch(`${V}/api/themes`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${E}`},body:JSON.stringify({name:r.name,json:y})}).then(At=>At.json())}}),d.value=!1,p.value=!1,s.value=!1},N=async l=>{l.preventDefault();let r={email:null,password:null};for(let m=0;m<l.target.length;m++)l.target[m].nodeName===\\\"INPUT\\\"&&(r[l.target[m].name]=l.target[m].value);if(!r.email||!r.name||!r.password_confirm||!r.password||r.password!==r.password_confirm)return;const E=await fetch(`${V}/api/sanctum/token`,{method:\\\"POST\\\",headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},body:JSON.stringify({name:r.name,email:r.email,password:r.password,device_name:\\\"BitBurner ThemeBrowser\\\"})}).then(m=>m.json());localStorage.setItem(\\\"token\\\",JSON.stringify(E)),d.value=!1,p.value=!1,s.value=!1,w()};e.onMounted(async()=>{const l=Number(winnerdow[`${n}-theme-id`]);if(l)try{const{json:r}=await et(l);return C(r),_(n)}catch(r){console.log(r)}await w(),t.value=!1,await T()});const b=()=>{let l=localStorage.getItem(\\\"token\\\");if(l)try{l=JSON.parse(l).token}catch{l=!1}return l},w=async()=>{const l=b();l&&(c.value=await fetch(`${V}/api/user`,{headers:{\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\",Authorization:`Bearer ${l}`}}).then(r=>r.json()).then(r=>(r.token=l,r)))};return{cancelForm:()=>{s.value=!1,d.value=!1,p.value=!1},isApplying:t,isLoading:a,isPreviewing:o,showingFrom:B,showingTo:S,themes:i,title:u,totalItems:v,windowOptions:$,cancelPreview:I,closeApp:()=>_(n),showPreview:C,user:c,onThemeSubmit:g,onLogin:O,onRegister:N,showThemeSubmit:s,showLogin:d,showRegister:p,triggerLoginRegister:()=>{d.value||p.value?(d.value=!1,p.value=!1):d.value=!0},toggleLoginRegister:()=>{d.value?(d.value=!1,p.value=!0):p.value&&(p.value=!1,d.value=!0)},toggleSubmitTheme:()=>{s.value=!s.value},reloadTheme:async l=>{const r={\\\"Content-Type\\\":\\\"application/json\\\",Accept:\\\"application/json\\\"},E=b();E&&(r.Authorization=`Bearer ${E}`);const m=await fetch(`${V}/api/themes/${l}`,{headers:r}).then(y=>y.json());for(let y=0;y<i._rawValue.length;y++)i.value[y].id===m.id&&(i.value[y]=m)}}}},k=n=>(e.pushScopeId(\\\"data-v-9f4bd1a0\\\"),n=n(),e.popScopeId(),n),at={class:\\\"theme-browser\\\"},st=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Theme Name\\\",-1)),lt={class:\\\"buttons\\\"},it=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Submit \\\",-1)),rt=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ct=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\",-1)),dt={class:\\\"buttons\\\"},pt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Login \\\",-1)),mt=e.createTextVNode(\\\" If you don't already have an account then \\\"),ht=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"name\\\"},\\\"Name\\\",-1)),_t=k(()=>e.createElementVNode(\\\"label\\\",{for:\\\"email\\\"},\\\"Email\\\",-1)),ft=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password\\\"},\\\"Password\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),gt=k(()=>e.createElementVNode(\\\"div\\\",null,[e.createElementVNode(\\\"label\\\",{for:\\\"password_confirm\\\"},\\\"Password Confirmation\\\"),e.createElementVNode(\\\"input\\\",{id:\\\"password_confirm\\\",name:\\\"password_confirm\\\",type:\\\"password\\\",placeholder:\\\"password\\\"})],-1)),wt={class:\\\"buttons\\\"},yt=k(()=>e.createElementVNode(\\\"button\\\",{type:\\\"submit\\\"},\\\" Register \\\",-1)),ut=e.createTextVNode(\\\" If you already have an account then \\\"),bt={key:0},kt={class:\\\"pagination-wrapper\\\"},Et={style:{\\\"margin-right\\\":\\\"auto\\\"}},Nt={key:0,class:\\\"pagination-details\\\"},Vt={key:0},St={key:1,class:\\\"loader\\\"},Ct=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Cancel\\\",-1))],Bt=[k(()=>e.createElementVNode(\\\"span\\\",{class:\\\"sr-only\\\"},\\\"Confirm\\\",-1))];function Mt(n,t,a,o,i,h){const s=e.resolveComponent(\\\"tb-header\\\"),d=e.resolveComponent(\\\"theme-list\\\"),p=e.resolveComponent(\\\"app-wrapper\\\");return e.openBlock(),e.createElementBlock(e.Fragment,null,[e.withDirectives(e.createVNode(p,e.mergeProps(q(A({},n.$props),{title:\\\"Bitburner Theme Browser\\\",windowOptions:o.windowOptions}),{onKeydown:t[14]||(t[14]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeyup:t[15]||(t[15]=e.withModifiers(()=>{},[\\\"stop\\\"])),onKeypress:t[16]||(t[16]=e.withModifiers(()=>{},[\\\"stop\\\"]))}),{default:e.withCtx(()=>[e.createElementVNode(\\\"div\\\",at,[e.createVNode(s,{title:o.title,user:o.user||null,\\\"onLogin:click\\\":o.triggerLoginRegister},null,8,[\\\"title\\\",\\\"user\\\",\\\"onLogin:click\\\"]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[2]||(t[2]=(...c)=>o.onThemeSubmit&&o.onThemeSubmit(...c))},[e.createElementVNode(\\\"div\\\",null,[st,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"BB Monokai\\\",onKeydown:t[0]||(t[0]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",lt,[it,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[1]||(t[1]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")])],544),[[e.vShow,o.showThemeSubmit]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[7]||(t[7]=(...c)=>o.onLogin&&o.onLogin(...c))},[e.createElementVNode(\\\"div\\\",null,[rt,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[3]||(t[3]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[ct,e.createElementVNode(\\\"input\\\",{id:\\\"password\\\",name:\\\"password\\\",type:\\\"password\\\",placeholder:\\\"password\\\",onKeydown:t[4]||(t[4]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",dt,[pt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[5]||(t[5]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[mt,e.createElementVNode(\\\"a\\\",{onClick:t[6]||(t[6]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Register\\\")])],544),[[e.vShow,o.showLogin]]),e.withDirectives(e.createElementVNode(\\\"form\\\",{onSubmit:t[12]||(t[12]=(...c)=>o.onRegister&&o.onRegister(...c))},[e.createElementVNode(\\\"div\\\",null,[ht,e.createElementVNode(\\\"input\\\",{id:\\\"name\\\",name:\\\"name\\\",type:\\\"text\\\",placeholder:\\\"Elliot Alderson\\\",onKeydown:t[8]||(t[8]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),e.createElementVNode(\\\"div\\\",null,[_t,e.createElementVNode(\\\"input\\\",{id:\\\"email\\\",name:\\\"email\\\",type:\\\"email\\\",placeholder:\\\"elliot.alderson@allsafe.org\\\",onKeydown:t[9]||(t[9]=e.withModifiers(()=>{},[\\\"stop\\\"]))},null,32)]),ft,gt,e.createElementVNode(\\\"div\\\",wt,[yt,e.createElementVNode(\\\"button\\\",{type:\\\"cancel\\\",onClick:t[10]||(t[10]=(...c)=>o.cancelForm&&o.cancelForm(...c))},\\\" Cancel \\\")]),e.createElementVNode(\\\"div\\\",null,[ut,e.createElementVNode(\\\"a\\\",{onClick:t[11]||(t[11]=(...c)=>o.toggleLoginRegister&&o.toggleLoginRegister(...c))},\\\"Login\\\")])],544),[[e.vShow,o.showRegister]]),!o.showRegister&&!o.showLogin&&!o.showThemeSubmit?(e.openBlock(),e.createElementBlock(\\\"div\\\",bt,[e.createElementVNode(\\\"div\\\",kt,[e.createElementVNode(\\\"div\\\",Et,[o.user&&o.user.id?(e.openBlock(),e.createElementBlock(\\\"button\\\",{key:0,onClick:t[13]||(t[13]=(...c)=>o.toggleSubmitTheme&&o.toggleSubmitTheme(...c))},\\\" Submit my theme \\\")):e.createCommentVNode(\\\"\\\",!0)]),o.themes.length?(e.openBlock(),e.createElementBlock(\\\"p\\\",Nt,\\\" Showing \\\"+e.toDisplayString(o.showingFrom)+\\\" to \\\"+e.toDisplayString(o.showingTo)+\\\" of \\\"+e.toDisplayString(o.totalItems),1)):e.createCommentVNode(\\\"\\\",!0)]),o.showThemeSubmit?e.createCommentVNode(\\\"\\\",!0):(e.openBlock(),e.createElementBlock(\\\"div\\\",Vt,[o.isLoading?(e.openBlock(),e.createElementBlock(\\\"div\\\",St)):(e.openBlock(),e.createBlock(d,{key:0,themes:o.themes,user:o.user,class:\\\"themes\\\",\\\"onTheme:preview\\\":o.showPreview,\\\"onTheme:reload\\\":o.reloadTheme},null,8,[\\\"themes\\\",\\\"user\\\",\\\"onTheme:preview\\\",\\\"onTheme:reload\\\"]))]))])):e.createCommentVNode(\\\"\\\",!0)])]),_:1},16),[[e.vShow,!o.isPreviewing&&!o.isApplying]]),e.createElementVNode(\\\"div\\\",{class:e.normalizeClass([\\\"preview__ctas\\\",{\\\"preview__ctas--visible\\\":o.isPreviewing}])},[e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--cancel\\\",onClick:t[17]||(t[17]=(...c)=>o.cancelPreview&&o.cancelPreview(...c))},Ct),e.createElementVNode(\\\"button\\\",{class:\\\"preview__cta preview__cta--confirm\\\",onClick:t[18]||(t[18]=(...c)=>o.closeApp&&o.closeApp(...c))},Bt)],2)],64)}var vt=M(nt,[[\\\"render\\\",Mt],[\\\"__scopeId\\\",\\\"data-v-9f4bd1a0\\\"]]),$t={repositoryBranch:\\\"master\\\",repositoryRaw:\\\"https://raw.githubusercontent.com/PhilipArmstead/bitburner-theme-browser\\\"};const{repositoryBranch:U,repositoryRaw:F}=$t,z=\\\"theme-browser\\\";var Tt={appFilePath:`${F}/${U}/apps/${z}/dist/main.js`,versionFilePath:`${F}/${U}/apps/${z}/dist/version.txt`},D=A(A({},Tt),Ie);e.createApp(vt,D).mount(`#${D.id}`)})(Vue);\\n\\n}\",\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"/bitpacks/theme-browser/theme-browser.js\",\"url\":\"blob:file:///f2a8eafc-9f4b-4844-93bb-c2b0082fe3be\",\"moduleSequenceNumber\":309969}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"stanek.remove\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"zombie-0\",\"zombie-1\",\"zombie-2\",\"zombie-3\",\"zombie-4\",\"zombie-5\",\"zombie-6\",\"zombie-7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"packages.txt\",\"text\":\"{\\n    \\\"bitpacks\\\": {\\n        \\\"theme-browser\\\": \\\"3\\\"\\n    }\\n}\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/bitpacks/theme-browser/package.txt\",\"text\":\"{\\n    \\\"uniqueName\\\": \\\"theme-browser\\\",\\n    \\\"author\\\": \\\"Phil Armstead & Jack (SurDaft) Stupple\\\",\\n    \\\"descriptiveName\\\": \\\"Theme Browser for BitBurner\\\",\\n    \\\"shortDescription\\\": \\\"Browse user submitted themes\\\",\\n    \\\"longDescription\\\": \\\"Browse user submitted themes within BitBurner; preview themes, see screenshots and user provided ratings\\\",\\n    \\\"tags\\\": [\\n        \\\"utility\\\",\\n        \\\"ui\\\"\\n    ]\\n}\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"11.4.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"moduleSequenceNumber\":465,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"ecorp\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":68113810407,\"moneyMax\":1702845260175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1138,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"79.9.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":469,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"megacorp\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55478380028,\"moneyMax\":1386959500700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1301,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"74.9.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":473,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"b-and-a\",\"moduleSequenceNumber\":477,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":15922928101,\"moneyMax\":398073202525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":61}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"37.6.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"moduleSequenceNumber\":481,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"blade\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":13641276710,\"moneyMax\":341031917750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1143,\"serverGrowth\":79}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"64.5.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"moduleSequenceNumber\":485,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nwo\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":25660106085,\"moneyMax\":641502652125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1061,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"91.2.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":489,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"clarkinc\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":17650770998,\"moneyMax\":441269274950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1001,\"serverGrowth\":57}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"97.8.8.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnitek\",\"moduleSequenceNumber\":497,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":20831064524,\"moneyMax\":520776613100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"34.5.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"moduleSequenceNumber\":501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"4sigma\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":21984656675,\"moneyMax\":549616416875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":992,\"serverGrowth\":81}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"84.4.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"kuai-gong\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":20636596739,\"moneyMax\":515914918475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1246,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"59.7.0.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":509,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1794591565,\"moneyMax\":44864789125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":987,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"24.4.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"fulcrumassets\",\"moduleSequenceNumber\":517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1544,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"37.5.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"moduleSequenceNumber\":521,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"stormtech\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1183882947,\"moneyMax\":29597073675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"75.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"moduleSequenceNumber\":525,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"defcomm\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":882230217,\"moneyMax\":22055755425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":941,\"serverGrowth\":63}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"3.7.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":529,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"infocomm\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":713306713,\"moneyMax\":17832667825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":62}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"73.8.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":533,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"helios\",\"moduleSequenceNumber\":537,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":654475545,\"moneyMax\":16361888625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":77}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"92.4.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"moduleSequenceNumber\":541,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"vitalife\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":775912344,\"moneyMax\":19397808600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"14.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"moduleSequenceNumber\":545,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"icarus\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":966247577,\"moneyMax\":24156189425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"99.5.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":549,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1106244725,\"moneyMax\":27656118125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":824,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"32.5.7.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":553,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":557,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":764566566,\"moneyMax\":19114164150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":66}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"23.6.5.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"moduleSequenceNumber\":561,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"microdyne\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":554184646,\"moneyMax\":13854616150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"22.4.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":565,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"taiyang-digital\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":844650156,\"moneyMax\":21116253900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":932,\"serverGrowth\":77}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"19.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"galactic-cyber\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":842392421,\"moneyMax\":21059810525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"20.1.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":573,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aerocorp\",\"moduleSequenceNumber\":577,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1048566047,\"moneyMax\":26214151175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":61}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"75.6.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"moduleSequenceNumber\":581,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omnia\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":983766027,\"moneyMax\":24594150675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":933,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"13.6.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-def\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":911182485,\"moneyMax\":22779562125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":800,\"serverGrowth\":65}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"2.8.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":589,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":881099757,\"moneyMax\":22027493925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":829,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"8.1.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":593,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"solaris\",\"moduleSequenceNumber\":597,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":767918208,\"moneyMax\":19197955200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":751,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"39.0.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"moduleSequenceNumber\":601,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"deltaone\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1378273389,\"moneyMax\":34456834725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":830,\"serverGrowth\":65}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"83.1.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1744268238,\"moneyMax\":43606705950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":793,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"35.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nova-med\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":1108965755,\"moneyMax\":27724143875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":82}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"41.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zeus-med\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1312885341,\"moneyMax\":32822133525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"59.5.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":618,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":619,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":620,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"moduleSequenceNumber\":621,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"unitalife\",\"moduleSequenceNumber\":622,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1021848082,\"moneyMax\":25546202050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":796,\"serverGrowth\":73}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"12.8.4.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2682]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25927.74918636592,\"onlineMoneyMade\":0,\"onlineRunningTime\":2913.809999999541,\"pid\":148,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///34b1c790-9fe1-464a-98f5-3354c94d2ba8\",\"moduleSequenceNumber\":1000}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":1000,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":624,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":625,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":626,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":627,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":732671264,\"moneyMax\":18316781600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":664,\"serverGrowth\":55}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"78.0.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,35118]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6293247.485390067,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.393,\"onlineExpGained\":339496.90377583215,\"onlineMoneyMade\":0,\"onlineRunningTime\":23673.010000027833,\"pid\":8,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///415b40d0-4ef6-4c57-8a26-23e08c37e8f9\",\"moduleSequenceNumber\":860}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":860,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":629,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":630,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"moduleSequenceNumber\":631,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":632,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":24.796,\"minDifficulty\":20,\"moneyAvailable\":8200821347.919758,\"moneyMax\":13403503500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":490,\"serverGrowth\":54}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"85.1.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,29638]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2403874.8095237184,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.39400000003,\"onlineExpGained\":286519.996415181,\"onlineMoneyMade\":0,\"onlineRunningTime\":4200.209999998283,\"pid\":9,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":73,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///50c1c681-89a2-4222-bb89-85d45f387637\",\"moduleSequenceNumber\":861}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":861,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":634,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":635,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":636,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":637,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":43.872,\"minDifficulty\":20,\"moneyAvailable\":7626534186.840199,\"moneyMax\":17822690300,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":598,\"serverGrowth\":54}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"83.3.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.642032396,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.396,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":10,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///349ff5ce-6d31-4826-9b30-77b3a5157a15\",\"moduleSequenceNumber\":862}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":862,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":639,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":640,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"moduleSequenceNumber\":641,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":642,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":218503414,\"moneyMax\":5462585350,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":412,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"21.6.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.655660358,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.397,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":11,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///362d508d-dec1-4e7d-a49b-ab376f8b417d\",\"moduleSequenceNumber\":319564}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///d60ceccd-a2c8-423d-9b4d-ba0b5cfde111\",\"moduleSequenceNumber\":863}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":863,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":644,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":645,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":646,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///98d4273d-deca-47b7-9b05-15412b0552fc\",\"moduleSequenceNumber\":859}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":647,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":51.6605,\"minDifficulty\":18,\"moneyAvailable\":275751376.9486857,\"moneyMax\":5018688750,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":387,\"serverGrowth\":37}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"0.0.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":648,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":649,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":650,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"moduleSequenceNumber\":651,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":652,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":852731675,\"moneyMax\":21318291875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":771,\"serverGrowth\":79}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"70.4.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,37944]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6193098.710325203,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.398,\"onlineExpGained\":366816.7468782434,\"onlineMoneyMade\":0,\"onlineRunningTime\":26012.21000003039,\"pid\":12,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///49642e37-0905-4f18-9b12-de97387c8ac2\",\"moduleSequenceNumber\":864}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":864,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":654,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":655,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"moduleSequenceNumber\":656,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":657,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":208049780,\"moneyMax\":5201244500,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":452,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"53.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":658,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":659,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"moduleSequenceNumber\":660,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"moduleSequenceNumber\":661,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"syscore\",\"moduleSequenceNumber\":662,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":46.35000000000001,\"minDifficulty\":20,\"moneyAvailable\":8476360312.653844,\"moneyMax\":13698793175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":570,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"60.6.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,76104]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12378915.393088488,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.4,\"onlineExpGained\":735721.6346305565,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":13,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///9f510874-29ab-4f4c-a189-0fa86c2236f6\",\"moduleSequenceNumber\":865}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":865,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":664,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"catalyst\",\"moduleSequenceNumber\":667,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":9671938375,\"moneyMax\":9671938375,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":432,\"serverGrowth\":38}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"34.9.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.855086103,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.401,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":14,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///0f8aa272-4706-427f-a3c9-10faead7db32\",\"moduleSequenceNumber\":317614}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///c30b272d-25ca-4355-8fe3-31851b56a315\",\"moduleSequenceNumber\":866}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":866,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":669,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":670,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"moduleSequenceNumber\":671,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///6da0290f-d3c6-4616-b38c-5f8f95021513\",\"moduleSequenceNumber\":860}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"the-hub\",\"moduleSequenceNumber\":672,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":14.538,\"minDifficulty\":14,\"moneyAvailable\":2028779815,\"moneyMax\":4541027725,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":298,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"51.1.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"comptek\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":24.175999999999995,\"minDifficulty\":21,\"moneyAvailable\":3838054765.6327524,\"moneyMax\":5650327450,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":348,\"serverGrowth\":61}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"35.9.8.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,76104]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12378915.47485626,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.403,\"onlineExpGained\":735721.6346305565,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":15,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///8aad4198-a6f5-4de2-ba55-b2f701144e57\",\"moduleSequenceNumber\":317626}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///78c46094-3291-4e35-8be5-81956f0f00c1\",\"moduleSequenceNumber\":867}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":867,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///43b96d5d-8742-442c-b420-c33150b372a9\",\"moduleSequenceNumber\":861}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"netlink\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":30.492999999999995,\"minDifficulty\":26,\"moneyAvailable\":4555988890,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":377,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"34.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":1914016425,\"moneyMax\":1914016425,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":284,\"serverGrowth\":64}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"48.7.7.7\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,4228]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":687717.5278951045,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.404,\"onlineExpGained\":40873.424146140926,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":16,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///05aa691b-b404-42e5-8cf1-c90e9529ab3f\",\"moduleSequenceNumber\":317628}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///84fcf126-b8d2-442f-bba7-48550c3fc0fc\",\"moduleSequenceNumber\":868}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":868,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":690,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///395b346d-4327-43e5-a2fb-e7483e868e8a\",\"moduleSequenceNumber\":862}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"n00dles\",\"moduleSequenceNumber\":692,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"97.1.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.889156008,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.406,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":17,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///7ff7513d-b3f4-48b6-8bc2-f4bc9eddbfaa\",\"moduleSequenceNumber\":317627}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///5aec00fb-ca6f-4749-8de5-f4b064d190a0\",\"moduleSequenceNumber\":869}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":869,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":694,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":695,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":696,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///ea1252e5-a3c7-4332-86dc-2b9254e7151f\",\"moduleSequenceNumber\":863}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":697,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":3425508.678010571,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"74.5.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.8959699892,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.407,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":18,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///9806e776-8c84-4c82-8353-d8c658f2bfb0\",\"moduleSequenceNumber\":317625}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///8ce5c9df-3bce-4d14-86b1-673145af65c9\",\"moduleSequenceNumber\":870}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":870,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":699,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":700,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":701,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///c168199e-9b41-42c8-80a0-2aac513885e9\",\"moduleSequenceNumber\":864}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":702,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.7735,\"minDifficulty\":3,\"moneyAvailable\":2379231.1764578954,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"22.3.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.90278397,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.408,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":19,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///75a31e18-29f7-438e-9df8-1de63a707e75\",\"moduleSequenceNumber\":317623}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///7f6c755b-3099-4f49-8943-d47fa9d10df4\",\"moduleSequenceNumber\":871}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":871,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":704,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":705,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"moduleSequenceNumber\":706,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///74dfe8c5-a582-4481-a5c0-5688af5b5ea6\",\"moduleSequenceNumber\":865}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"joesguns\",\"moduleSequenceNumber\":707,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":22425.53058570428,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"40.1.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.819195902,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.409,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":20,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///6384ff36-7706-4097-b081-a1da619c3a50\",\"moduleSequenceNumber\":317619}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///e1415eb8-3129-4f68-8aaf-a1369a25c5fd\",\"moduleSequenceNumber\":872}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":709,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"moduleSequenceNumber\":710,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"moduleSequenceNumber\":711,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///0b91193f-b5cd-4e14-a259-628c2208033d\",\"moduleSequenceNumber\":866}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zer0\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"1.3.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.916411932,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.41000000003,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":21,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///32de9b3a-4e03-47a4-94bf-95e1c7c56962\",\"moduleSequenceNumber\":317622}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f26b27c0-d8e0-4170-94d9-ced63eba755f\",\"moduleSequenceNumber\":873}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":873,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":714,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":715,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"moduleSequenceNumber\":716,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///3958a118-c70f-4dec-87a4-3b3cd60e6aad\",\"moduleSequenceNumber\":867}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":717,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"26.6.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.846451826,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.411,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":22,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///b4102cd6-bc24-49b1-b61f-415c2337e08d\",\"moduleSequenceNumber\":317621}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///6a281184-29a0-4458-acc6-70d98893d23a\",\"moduleSequenceNumber\":874}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":874,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":719,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":720,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"moduleSequenceNumber\":721,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///c892aea0-e21c-4115-9504-2e7ee17a7369\",\"moduleSequenceNumber\":868}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"neo-net\",\"moduleSequenceNumber\":722,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"90.6.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,76104]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":12378915.720159575,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.412,\"onlineExpGained\":735721.6346305565,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":23,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///d339e6c7-51b6-445d-9970-ab9be6f764fd\",\"moduleSequenceNumber\":317616}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///b56d2de1-09ab-4455-ad2e-3b5921a48c99\",\"moduleSequenceNumber\":875}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":875,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":724,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":725,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"moduleSequenceNumber\":726,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///ffae58b1-a3f8-4e3b-94fd-212adee93e28\",\"moduleSequenceNumber\":869}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":727,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"48.3.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.950481837,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.41500000004,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":24,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///daed90e0-58fd-4e85-8d99-e105a71ff6b9\",\"moduleSequenceNumber\":317624}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///1f3fee2c-4f48-4b60-944f-2aff2404e55f\",\"moduleSequenceNumber\":876}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":876,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":729,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":730,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":731,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///b4b89f79-803b-4a69-97c9-8651bd21e5df\",\"moduleSequenceNumber\":870}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":732,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"38.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,19026]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3094728.9572958183,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.416,\"onlineExpGained\":183930.4086576391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":25,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///4fe03b55-8cc9-41c5-ae5b-c3965db4dbcd\",\"moduleSequenceNumber\":317618}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///12f6bf14-eff4-4e72-a3d3-7b233f45334b\",\"moduleSequenceNumber\":877}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":877,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":734,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":735,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":736,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///da529d6a-3452-4f58-866e-b22d7c52a95b\",\"moduleSequenceNumber\":871}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":737,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":10.32,\"minDifficulty\":5,\"moneyAvailable\":83980360.50487445,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"86.9.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.928219598,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.417,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":26,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///2566398a-e346-4f30-bd7e-97962f0b2fe2\",\"moduleSequenceNumber\":317615}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///2e63f4de-90d4-473d-a7eb-0b87378072d8\",\"moduleSequenceNumber\":878}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":878,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":739,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":740,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"moduleSequenceNumber\":741,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///c748c968-9661-4142-9842-d220ae918e54\",\"moduleSequenceNumber\":872}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"phantasy\",\"moduleSequenceNumber\":742,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":11.100000000000001,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"83.4.1.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.955475522,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.419,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":27,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///186047cb-23d7-41b9-99e7-e2282ad45a65\",\"moduleSequenceNumber\":317617}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///e0be8a18-3c3e-4b2f-9e69-354a3872b10c\",\"moduleSequenceNumber\":879}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":879,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":744,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"moduleSequenceNumber\":746,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///d4baae50-b5b6-4bb2-83fb-4196b8eddae8\",\"moduleSequenceNumber\":873}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"86.4.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.9691034835,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.42,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":28,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///ba9624f1-d61e-4f83-a5da-d535d687412c\",\"moduleSequenceNumber\":317613}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///cba30209-c521-4327-ae52-4530e0be0aef\",\"moduleSequenceNumber\":880}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":880,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///e392e1bf-4679-4143-8897-81cfa4f320dc\",\"moduleSequenceNumber\":874}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"omega-net\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":9,\"minDifficulty\":9,\"moneyAvailable\":743201160.3389022,\"moneyMax\":1643770400,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":192,\"serverGrowth\":40}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"99.3.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":53568705,\"moneyMax\":1339217625,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":240,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"62.8.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38052]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6189457.982731447,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.42100000003,\"onlineExpGained\":367860.8173152782,\"onlineMoneyMade\":0,\"onlineRunningTime\":26102.410000030573,\"pid\":29,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///207a3180-60fa-4246-859c-cdfa0a5694ed\",\"moduleSequenceNumber\":317620}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///6a14ddf1-cce4-41be-a617-ae9cbec112e4\",\"moduleSequenceNumber\":881}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":881,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///f04733ea-6831-47bc-a359-da382d93bd97\",\"moduleSequenceNumber\":875}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"49.2.1.5\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,284262]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":51071787.90572915,\"offlineMoneyMade\":0,\"offlineRunningTime\":454173.422,\"onlineExpGained\":2748051.394188953,\"onlineMoneyMade\":0,\"onlineRunningTime\":23612.010000027774,\"pid\":30,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":146,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///1f9f2a30-391b-4969-bf42-b8008ea41a05\",\"moduleSequenceNumber\":882}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":882,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":491,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"27.7.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":977,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"71.9.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":43,\"minDifficulty\":14,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":748,\"serverGrowth\":55}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"76.3.7.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,87016]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":841211.4180465414,\"onlineMoneyMade\":0,\"onlineRunningTime\":2913.809999999541,\"pid\":149,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":292,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///6e5a5daa-c867-4c28-ae49-c284ad180b1c\",\"moduleSequenceNumber\":1001}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":1001,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"35.7.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":255.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,309812]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":50126379.458657615,\"offlineMoneyMade\":0,\"offlineRunningTime\":485599.826,\"onlineExpGained\":2995051.391098592,\"onlineMoneyMade\":0,\"onlineRunningTime\":26251.810000030862,\"pid\":31,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":146,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///3af5421c-9674-4400-9629-25b98559dab4\",\"moduleSequenceNumber\":883}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":883,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///28d2c28d-9cb8-484b-b6ac-433d3db89bb4\",\"moduleSequenceNumber\":316249}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":357,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"91.0.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,38196]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":6179964.604490327,\"offlineMoneyMade\":0,\"offlineRunningTime\":485599.828,\"onlineExpGained\":369252.91123132466,\"onlineMoneyMade\":0,\"onlineRunningTime\":26251.810000030862,\"pid\":32,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///822c2920-e699-4154-a7ed-37da32c694ff\",\"moduleSequenceNumber\":884}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":884,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///5d5806cf-1d0e-4a58-99ea-2c487c1864af\",\"moduleSequenceNumber\":302308}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":210,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"86.4.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2682]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25927.74918636592,\"onlineMoneyMade\":0,\"onlineRunningTime\":2913.809999999541,\"pid\":150,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///44909ef2-09fc-4313-a9f0-1d341a47d92b\",\"moduleSequenceNumber\":1002}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":1002,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":794,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\".\",\"moduleSequenceNumber\":795,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\".\",\"moduleSequenceNumber\":796,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\".\",\"moduleSequenceNumber\":797,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":535,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"33.1.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,8488]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1373325.4707082708,\"offlineMoneyMade\":0,\"offlineRunningTime\":485599.82999999996,\"onlineExpGained\":82056.20249584771,\"onlineMoneyMade\":0,\"onlineRunningTime\":26251.810000030862,\"pid\":33,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///40d9c9c3-e582-46a2-a4a4-93ad41f07d8a\",\"moduleSequenceNumber\":885}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":885,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":799,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":800,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"moduleSequenceNumber\":801,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"earlyhack.js\",\"url\":\"blob:file:///2b6743d5-81b2-4c55-9eca-8ab0a7e4cc77\",\"moduleSequenceNumber\":302456}],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"CSEC\",\"moduleSequenceNumber\":802,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":51,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"72.7.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":803,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":804,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"moduleSequenceNumber\":805,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"moduleSequenceNumber\":806,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"The-Cave\",\"moduleSequenceNumber\":807,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"58.6.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"98.8.3.7\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":808,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":809,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"moduleSequenceNumber\":810,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"moduleSequenceNumber\":811,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"darkweb\",\"moduleSequenceNumber\":812,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-0\",\"httpPortOpen\":false,\"ip\":\"1.3.1.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8187.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1439.4100000001904,\"pid\":524,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":139,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":376.4099999999872,\"pid\":794,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":795,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b197a104-c204-45d1-b571-9aaef702e31c\",\"moduleSequenceNumber\":893}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.8099999999923,\"pid\":821,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":106,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b197a104-c204-45d1-b571-9aaef702e31c\",\"moduleSequenceNumber\":893}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":187.00999999999792,\"pid\":841,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":2631,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":171.00999999999883,\"pid\":847,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":140,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b197a104-c204-45d1-b571-9aaef702e31c\",\"moduleSequenceNumber\":893}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.4100000000009,\"pid\":864,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":197,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.41000000000088,\"pid\":869,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":411,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":21.00999999999996,\"pid\":884,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":885,\"ramUsage\":1.75,\"server\":\"zombie-0\",\"threads\":156,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":888,\"ramUsage\":1.7,\"server\":\"zombie-0\",\"threads\":65,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8c26ab8d-de6a-44ca-9377-af00aa3c67f1\",\"moduleSequenceNumber\":894}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.8099999999999998,\"pid\":890,\"ramUsage\":1.7,\"server\":\"zombie-0\",\"threads\":24,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8c26ab8d-de6a-44ca-9377-af00aa3c67f1\",\"moduleSequenceNumber\":894}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///b197a104-c204-45d1-b571-9aaef702e31c\",\"moduleSequenceNumber\":893}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":893,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8c26ab8d-de6a-44ca-9377-af00aa3c67f1\",\"moduleSequenceNumber\":894}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-0\",\"moduleSequenceNumber\":894,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9888ca72-ffa0-4802-b59f-490abc2a3924\",\"moduleSequenceNumber\":895}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":895,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///e1061019-29b2-405f-b835-1255dd7b9c9e\",\"moduleSequenceNumber\":992}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-0\",\"moduleSequenceNumber\":992,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-0\",\"moduleSequenceNumber\":817,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-1\",\"httpPortOpen\":false,\"ip\":\"44.5.2.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":347.20999999998884,\"pid\":800,\"ramUsage\":1.75,\"server\":\"zombie-1\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///29e12857-f73c-4d4b-8fa3-fc25d5c4c740\",\"moduleSequenceNumber\":912}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e28e102-f643-49d9-8f7d-5d9ec4316993\",\"moduleSequenceNumber\":907}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":907,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///c3406762-f582-4154-8062-abd7dbe20736\",\"moduleSequenceNumber\":913}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-1\",\"moduleSequenceNumber\":913,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///29e12857-f73c-4d4b-8fa3-fc25d5c4c740\",\"moduleSequenceNumber\":912}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":912,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///f4565380-36cb-489f-9f80-4ded07837b9c\",\"moduleSequenceNumber\":993}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-1\",\"moduleSequenceNumber\":993,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-1\",\"moduleSequenceNumber\":822,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-2\",\"httpPortOpen\":false,\"ip\":\"36.9.5.1\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8178.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":444.8099999999833,\"pid\":781,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":587,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///82a1602b-fbe7-4de8-8fd0-c9871c6691dc\",\"moduleSequenceNumber\":927}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":347.20999999998884,\"pid\":801,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":473,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4a2cd6d7-f9c9-48ef-a90b-773156edf444\",\"moduleSequenceNumber\":931}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.4100000000009,\"pid\":865,\"ramUsage\":1.75,\"server\":\"zombie-2\",\"threads\":3356,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4a2cd6d7-f9c9-48ef-a90b-773156edf444\",\"moduleSequenceNumber\":931}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":62.21000000000035,\"pid\":876,\"ramUsage\":1.7,\"server\":\"zombie-2\",\"threads\":265,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cec359b0-90b9-4e70-afb2-75c60d560862\",\"moduleSequenceNumber\":933}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///82a1602b-fbe7-4de8-8fd0-c9871c6691dc\",\"moduleSequenceNumber\":927}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":927,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///cec359b0-90b9-4e70-afb2-75c60d560862\",\"moduleSequenceNumber\":933}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-2\",\"moduleSequenceNumber\":933,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4a2cd6d7-f9c9-48ef-a90b-773156edf444\",\"moduleSequenceNumber\":931}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":931,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///0b0208f8-7bca-4d97-b62a-4d019b277953\",\"moduleSequenceNumber\":994}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-2\",\"moduleSequenceNumber\":994,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-2\",\"moduleSequenceNumber\":827,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-3\",\"httpPortOpen\":false,\"ip\":\"77.2.6.9\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8171.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1254.2100000001483,\"pid\":574,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":3116,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///49f3a013-1c6d-44bb-acbc-72f28480c54c\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":303.8099999999913,\"pid\":815,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":475,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///49f3a013-1c6d-44bb-acbc-72f28480c54c\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":117.61000000000114,\"pid\":856,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":80,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///49f3a013-1c6d-44bb-acbc-72f28480c54c\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.4100000000009,\"pid\":866,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":584,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///49f3a013-1c6d-44bb-acbc-72f28480c54c\",\"moduleSequenceNumber\":948}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":101.4100000000009,\"pid\":867,\"ramUsage\":1.7,\"server\":\"zombie-3\",\"threads\":197,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///85df2831-c372-4584-ba59-02ac26cc3e5c\",\"moduleSequenceNumber\":947}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000076,\"pid\":873,\"ramUsage\":1.75,\"server\":\"zombie-3\",\"threads\":17,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///76dac2f7-4e31-4c4e-a853-2de5b3522427\",\"moduleSequenceNumber\":945}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.21000000000029,\"pid\":878,\"ramUsage\":1.7,\"server\":\"zombie-3\",\"threads\":106,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///85df2831-c372-4584-ba59-02ac26cc3e5c\",\"moduleSequenceNumber\":947}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.81,\"pid\":891,\"ramUsage\":1.7,\"server\":\"zombie-3\",\"threads\":106,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///85df2831-c372-4584-ba59-02ac26cc3e5c\",\"moduleSequenceNumber\":947}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///76dac2f7-4e31-4c4e-a853-2de5b3522427\",\"moduleSequenceNumber\":945}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":945,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///85df2831-c372-4584-ba59-02ac26cc3e5c\",\"moduleSequenceNumber\":947}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-3\",\"moduleSequenceNumber\":947,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///49f3a013-1c6d-44bb-acbc-72f28480c54c\",\"moduleSequenceNumber\":948}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":948,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///1aa091be-0e0d-4dc8-8a88-9f9fd06b555c\",\"moduleSequenceNumber\":995}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-3\",\"moduleSequenceNumber\":995,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-3\",\"moduleSequenceNumber\":832,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-4\",\"httpPortOpen\":false,\"ip\":\"41.4.6.7\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1590.6100000002248,\"pid\":482,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":3166,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2ab2d842-2450-4ad6-bb38-94edce9f35a8\",\"moduleSequenceNumber\":960}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1260.2100000001496,\"pid\":573,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":975,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///be4b167a-a770-47d3-beab-0e1a11bb72ca\",\"moduleSequenceNumber\":956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":285.60999999999234,\"pid\":822,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":369,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///be4b167a-a770-47d3-beab-0e1a11bb72ca\",\"moduleSequenceNumber\":956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":91.41000000000076,\"pid\":874,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":154,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///be4b167a-a770-47d3-beab-0e1a11bb72ca\",\"moduleSequenceNumber\":956}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999945,\"pid\":883,\"ramUsage\":1.75,\"server\":\"zombie-4\",\"threads\":17,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2ab2d842-2450-4ad6-bb38-94edce9f35a8\",\"moduleSequenceNumber\":960}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///be4b167a-a770-47d3-beab-0e1a11bb72ca\",\"moduleSequenceNumber\":956}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":956,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///b2bed056-4362-4e05-aa1e-9aeeca42db86\",\"moduleSequenceNumber\":957}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-4\",\"moduleSequenceNumber\":957,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///2ab2d842-2450-4ad6-bb38-94edce9f35a8\",\"moduleSequenceNumber\":960}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":960,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///5ab95938-8253-4de3-9da7-6a63f701e8e3\",\"moduleSequenceNumber\":996}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-4\",\"moduleSequenceNumber\":996,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-4\",\"moduleSequenceNumber\":837,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-5\",\"httpPortOpen\":false,\"ip\":\"56.4.1.8\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1590.6100000002248,\"pid\":483,\"ramUsage\":1.75,\"server\":\"zombie-5\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e0b72b3c-724b-4e7a-9de2-7a6bbe3f9b2d\",\"moduleSequenceNumber\":971}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///235f4cb6-2e0c-4aa3-9e9a-cf51d66c87d1\",\"moduleSequenceNumber\":968}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":968,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///a8dfb124-969d-499b-9d75-2b78e82c22d1\",\"moduleSequenceNumber\":969}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-5\",\"moduleSequenceNumber\":969,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///e0b72b3c-724b-4e7a-9de2-7a6bbe3f9b2d\",\"moduleSequenceNumber\":971}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":971,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///1b2d64cc-f174-403b-87e1-37b79c68c46c\",\"moduleSequenceNumber\":997}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-5\",\"moduleSequenceNumber\":997,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-5\",\"moduleSequenceNumber\":842,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-6\",\"httpPortOpen\":false,\"ip\":\"25.0.7.0\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.3,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1590.6100000002248,\"pid\":484,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":928,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1549.2100000002154,\"pid\":497,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":153,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1208.810000000138,\"pid\":589,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":950,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8da20a86-8e91-4f30-ae26-659115bea4c6\",\"moduleSequenceNumber\":981}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":146.8100000000002,\"pid\":853,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":6,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8da20a86-8e91-4f30-ae26-659115bea4c6\",\"moduleSequenceNumber\":981}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":141.81000000000049,\"pid\":854,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":203,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.41000000000085,\"pid\":870,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":106,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8da20a86-8e91-4f30-ae26-659115bea4c6\",\"moduleSequenceNumber\":981}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.21000000000032,\"pid\":877,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":1908,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.21000000000018,\"pid\":881,\"ramUsage\":1.7,\"server\":\"zombie-6\",\"threads\":9,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d62005f-1c25-44cf-81f4-3b1fed0251ac\",\"moduleSequenceNumber\":982}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.009999999999973,\"pid\":886,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":100,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.809999999999995,\"pid\":889,\"ramUsage\":1.75,\"server\":\"zombie-6\",\"threads\":318,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8da20a86-8e91-4f30-ae26-659115bea4c6\",\"moduleSequenceNumber\":981}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///8da20a86-8e91-4f30-ae26-659115bea4c6\",\"moduleSequenceNumber\":981}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":981,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///8d62005f-1c25-44cf-81f4-3b1fed0251ac\",\"moduleSequenceNumber\":982}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-6\",\"moduleSequenceNumber\":982,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///93b0ebff-bf75-44e5-a5c1-96a8bc210c7a\",\"moduleSequenceNumber\":975}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":975,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///0479535c-d347-4219-83e0-06961e13ae7c\",\"moduleSequenceNumber\":998}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-6\",\"moduleSequenceNumber\":998,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-6\",\"moduleSequenceNumber\":847,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"zombie-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zombie-7\",\"httpPortOpen\":false,\"ip\":\"76.6.8.4\",\"isConnectedTo\":false,\"maxRam\":8192,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":8191.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1549.2100000002154,\"pid\":498,\"ramUsage\":1.75,\"server\":\"zombie-7\",\"threads\":4681,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c901e69c-8d17-460a-94c7-2ed259fecda0\",\"moduleSequenceNumber\":991}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///797cec07-c162-49a3-aa5e-3012719ef63c\",\"moduleSequenceNumber\":989}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":989,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///3e260820-2296-4263-ad5c-9a18c45100a2\",\"moduleSequenceNumber\":990}],\"dependents\":[],\"ramUsage\":1.7,\"server\":\"zombie-7\",\"moduleSequenceNumber\":990,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n\\tfor (const log of ns.getScriptLogs()) {\\n\\t\\tawait ns.writePort(9, log.substring(log.indexOf(\\\" \\\") + 1));\\n\\t}\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///c901e69c-8d17-460a-94c7-2ed259fecda0\",\"moduleSequenceNumber\":991}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":991,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///72866de3-b033-47c7-9646-d664c99d50ce\",\"moduleSequenceNumber\":999}],\"dependents\":[],\"ramUsage\":1.75,\"server\":\"zombie-7\",\"moduleSequenceNumber\":999,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"earlyhack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.2,\"server\":\"zombie-7\",\"moduleSequenceNumber\":852,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":6547.332394092083,\"favor\":85.799,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":25.1579,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":427845.45265404496,\"favor\":39.3673,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":29.7207,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":12.957408346391638,\"favor\":98.8398,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Blade Industries\",\"playerReputation\":3002.7695502684264}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":10.6786,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":38.0015,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":284490.4694137987}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":43715.8525339009}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":87.6568,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":524.414895827478}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":55.1851,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":425213.3560806912}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":23.9809,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":166301.3231241382}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":25.0819,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":181891.83051251294}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"ll\":\"ls\",\"man\":\"help\",\"init\":\"wget http://localhost:8000/init.js init.js; wget http://localhost:8000/deployment/self-update.js deployment/self-update.js\",\"serverinfo\":\"run serverinfo.js\",\"bp\":\"run /bitpacks/bp.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":9898.56306293847,\"lastPrice\":9897.942069643312,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":19.48958895885027,\"otlkMagForecast\":68.31148716125801,\"cap\":88524833,\"spreadPerc\":0.4,\"shareTxForMovement\":39442,\"shareTxUntilMovement\":39442,\"totalShares\":114300000,\"maxShares\":22900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":58162.15990674267,\"lastPrice\":58165.89586224408,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.43,\"b\":true,\"otlkMag\":17.149694638403574,\"otlkMagForecast\":66.75261158559428,\"cap\":95425874,\"spreadPerc\":0.3,\"shareTxForMovement\":37061,\"shareTxUntilMovement\":37061,\"totalShares\":76700000,\"maxShares\":15300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":5160.683942745829,\"lastPrice\":5161.238993212047,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":11.118058237513686,\"otlkMagForecast\":38.70771627837992,\"cap\":124070849,\"spreadPerc\":0.2,\"shareTxForMovement\":76138,\"shareTxUntilMovement\":76138,\"totalShares\":132800000,\"maxShares\":26600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":11380.889215319192,\"lastPrice\":11382.062269305394,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":false,\"otlkMag\":13.581001864687007,\"otlkMagForecast\":37.339480085102,\"cap\":82623673,\"spreadPerc\":0.5,\"shareTxForMovement\":83549,\"shareTxUntilMovement\":83549,\"totalShares\":105000000,\"maxShares\":21000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":13828.345172830233,\"lastPrice\":13826.899348414112,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":15.322303399612519,\"otlkMagForecast\":67.25271513344147,\"cap\":344086780,\"spreadPerc\":0.5,\"shareTxForMovement\":79480,\"shareTxUntilMovement\":79480,\"totalShares\":53100000,\"maxShares\":10600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":21402.879529370097,\"lastPrice\":21406.204579975118,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":14.994952583454298,\"otlkMagForecast\":36.835246655997565,\"cap\":522769787,\"spreadPerc\":0.5,\"shareTxForMovement\":40816,\"shareTxUntilMovement\":40816,\"totalShares\":30000000,\"maxShares\":6000000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":6067.191484635646,\"lastPrice\":6066.448395223983,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":8.125194141467745,\"otlkMagForecast\":59.24986376506427,\"cap\":413714953,\"spreadPerc\":0.5,\"shareTxForMovement\":61171,\"shareTxUntilMovement\":61171,\"totalShares\":107600000,\"maxShares\":21500000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":26263.119017856658,\"lastPrice\":26268.140697279836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.28,\"b\":true,\"otlkMag\":21.706031613371977,\"otlkMagForecast\":69.02385422235929,\"cap\":784969122,\"spreadPerc\":0.4,\"shareTxForMovement\":57422,\"shareTxUntilMovement\":57422,\"totalShares\":56200000,\"maxShares\":11200000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":24560.45196764598,\"lastPrice\":24557.443885265686,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":8.465940930846076,\"otlkMagForecast\":56.46754168549251,\"cap\":157274708,\"spreadPerc\":0.3,\"shareTxForMovement\":107140,\"shareTxUntilMovement\":107140,\"totalShares\":53700000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9508.38726192506,\"lastPrice\":9507.535120061126,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":9.920969275431666,\"otlkMagForecast\":61.253401755237874,\"cap\":120709814,\"spreadPerc\":0.8,\"shareTxForMovement\":36224,\"shareTxUntilMovement\":36224,\"totalShares\":87400000,\"maxShares\":17500000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13045.093635937057,\"lastPrice\":13046.262842283995,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":9.456868562383352,\"otlkMagForecast\":41.03221353703861,\"cap\":230817842,\"spreadPerc\":1,\"shareTxForMovement\":88435,\"shareTxUntilMovement\":88435,\"totalShares\":77100000,\"maxShares\":15400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":12710.513458511843,\"lastPrice\":12709.184509135031,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":6.742584704864233,\"otlkMagForecast\":57.0804109682461,\"cap\":139528101,\"spreadPerc\":0.2,\"shareTxForMovement\":39211,\"shareTxUntilMovement\":39211,\"totalShares\":105900000,\"maxShares\":21200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":20151.70224966633,\"lastPrice\":20149.745768639234,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":5.768388651602107,\"otlkMagForecast\":42.32500482238615,\"cap\":120882877,\"spreadPerc\":0.6,\"shareTxForMovement\":89789,\"shareTxUntilMovement\":89789,\"totalShares\":52700000,\"maxShares\":10500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":24550.365578445253,\"lastPrice\":24552.30926641321,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":8.56662835855657,\"otlkMagForecast\":39.594867275144814,\"cap\":195346184,\"spreadPerc\":0.8,\"shareTxForMovement\":63791,\"shareTxUntilMovement\":63791,\"totalShares\":46600000,\"maxShares\":9300000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17861.99314446595,\"lastPrice\":17863.674126922124,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":5.58722178724501,\"otlkMagForecast\":54.87025193025305,\"cap\":194962406,\"spreadPerc\":0.5,\"shareTxForMovement\":110281,\"shareTxUntilMovement\":110281,\"totalShares\":67500000,\"maxShares\":13500000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":6367.79198369361,\"lastPrice\":6367.1547291808565,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":true,\"otlkMag\":5.352928437308876,\"otlkMagForecast\":54.73056414073256,\"cap\":256713458,\"spreadPerc\":1,\"shareTxForMovement\":100431,\"shareTxUntilMovement\":100431,\"totalShares\":48700000,\"maxShares\":9700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":25723.85905882746,\"lastPrice\":25726.54890147164,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":10.724345329431566,\"otlkMagForecast\":39.741739452200065,\"cap\":63832778,\"spreadPerc\":0.8,\"shareTxForMovement\":100316,\"shareTxUntilMovement\":100316,\"totalShares\":42400000,\"maxShares\":8500000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":15723.753693825389,\"lastPrice\":15725.04554247251,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":10.324339830945586,\"otlkMagForecast\":60.040495947563,\"cap\":483286119,\"spreadPerc\":0.4,\"shareTxForMovement\":45944,\"shareTxUntilMovement\":45944,\"totalShares\":24800000,\"maxShares\":5000000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":12897.818805773877,\"lastPrice\":12896.31617254759,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":5.482113945674023,\"otlkMagForecast\":55.77053275758877,\"cap\":468918661,\"spreadPerc\":0.6,\"shareTxForMovement\":116720,\"shareTxUntilMovement\":116720,\"totalShares\":27700000,\"maxShares\":5500000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":36578.886458207904,\"lastPrice\":36592.54685147033,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.5,\"b\":true,\"otlkMag\":7.384796895625526,\"otlkMagForecast\":55.97627147841093,\"cap\":75455469,\"spreadPerc\":0.9,\"shareTxForMovement\":37159,\"shareTxUntilMovement\":37159,\"totalShares\":68600000,\"maxShares\":13700000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":8356.850112607259,\"lastPrice\":8355.289970160817,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.25,\"b\":true,\"otlkMag\":5.691611476658211,\"otlkMagForecast\":54.93150595592091,\"cap\":19848122,\"spreadPerc\":1,\"shareTxForMovement\":41083,\"shareTxUntilMovement\":41083,\"totalShares\":51300000,\"maxShares\":10300000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":6016.372850700254,\"lastPrice\":6015.815691989485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":5.381469704945058,\"otlkMagForecast\":44.539499743916636,\"cap\":10505547,\"spreadPerc\":0.6,\"shareTxForMovement\":84795,\"shareTxUntilMovement\":84795,\"totalShares\":26700000,\"maxShares\":5300000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":128970.20225713956,\"lastPrice\":128933.6080409003,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.9,\"b\":true,\"otlkMag\":17.138329852324272,\"otlkMagForecast\":68.29996011858259,\"cap\":130441689,\"spreadPerc\":0.7,\"shareTxForMovement\":64547,\"shareTxUntilMovement\":64547,\"totalShares\":40400000,\"maxShares\":8100000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2786.272461329985,\"lastPrice\":2786.900943907532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.51,\"b\":false,\"otlkMag\":6.2625613282786645,\"otlkMagForecast\":41.02328847612947,\"cap\":68746964,\"spreadPerc\":0.5,\"shareTxForMovement\":42271,\"shareTxUntilMovement\":42271,\"totalShares\":38800000,\"maxShares\":7800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3857.7021911646502,\"lastPrice\":3858.192015475937,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":6.987337411052658,\"otlkMagForecast\":53.85564833880943,\"cap\":88813963,\"spreadPerc\":1.2,\"shareTxForMovement\":67950,\"shareTxUntilMovement\":67950,\"totalShares\":37400000,\"maxShares\":7500000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":573.9802887457098,\"lastPrice\":574.1714916807274,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.23,\"b\":false,\"otlkMag\":5.087860321821895,\"otlkMagForecast\":45.714868209093574,\"cap\":16381220,\"spreadPerc\":1.3,\"shareTxForMovement\":35398,\"shareTxUntilMovement\":35398,\"totalShares\":22700000,\"maxShares\":4500000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4360.605498610732,\"lastPrice\":4359.9672321645485,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.98,\"b\":false,\"otlkMag\":8.297743191088932,\"otlkMagForecast\":42.568662365558986,\"cap\":72631576,\"spreadPerc\":1.1,\"shareTxForMovement\":86654,\"shareTxUntilMovement\":86654,\"totalShares\":14700000,\"maxShares\":2900000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3461.5618748919533,\"lastPrice\":3461.1947810476513,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":1.2230240557819552,\"otlkMagForecast\":50.33944260354714,\"cap\":55918645,\"spreadPerc\":0.6,\"shareTxForMovement\":154980,\"shareTxUntilMovement\":154980,\"totalShares\":18300000,\"maxShares\":3700000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1334.2881446934832,\"lastPrice\":1334.029084095638,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":1.4282619140794057,\"otlkMagForecast\":49.05040672208171,\"cap\":3118180,\"spreadPerc\":1.2,\"shareTxForMovement\":62701,\"shareTxUntilMovement\":62701,\"totalShares\":18600000,\"maxShares\":3700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":2028.6344814469771,\"lastPrice\":2029.3223767963675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.27,\"b\":true,\"otlkMag\":7.8316661604959705,\"otlkMagForecast\":52.67037236147016,\"cap\":11429362,\"spreadPerc\":0.9,\"shareTxForMovement\":32558,\"shareTxUntilMovement\":32558,\"totalShares\":43900000,\"maxShares\":8800000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":124.77377499792475,\"lastPrice\":124.80359694605443,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.6,\"b\":false,\"otlkMag\":21.383390041856376,\"otlkMagForecast\":27.55704943454229,\"cap\":10060626,\"spreadPerc\":0.8,\"shareTxForMovement\":47355,\"shareTxUntilMovement\":47355,\"totalShares\":89000000,\"maxShares\":17800000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":8230.860795866225,\"lastPrice\":8229.877292026093,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":7.47608836838425,\"otlkMagForecast\":55.04699456367231,\"cap\":306496253,\"spreadPerc\":0.3,\"shareTxForMovement\":156559,\"shareTxUntilMovement\":156559,\"totalShares\":22400000,\"maxShares\":4500000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":22543.94102775026,\"lastPrice\":22545.927921137853,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":false,\"otlkMag\":11.311756063673764,\"otlkMagForecast\":38.954646061510154,\"cap\":320712353,\"spreadPerc\":0.6,\"shareTxForMovement\":157771,\"shareTxUntilMovement\":157771,\"totalShares\":24500000,\"maxShares\":4900000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":2377896,\"lastUpdate\":1643359015983,\"ticksUntilCycle\":71}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":20,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"hh:mm:ss\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#E3B54A\",\"primary\":\"#CAA243\",\"primarydark\":\"#7E6937\",\"successlight\":\"#82FF82\",\"success\":\"#6FDA6F\",\"successdark\":\"#64C364\",\"errorlight\":\"#FD5555\",\"error\":\"#D84A4A\",\"errordark\":\"#AC3939\",\"secondarylight\":\"#D8D0B8\",\"secondary\":\"#B1AA95\",\"secondarydark\":\"#736E5E\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#111111\",\"white\":\"#fff\",\"black\":\"#070300\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#0A0A0E\",\"backgroundsecondary\":\"#0E0E10\",\"button\":\"#222222\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"10","AllGangsSave":"","LastExportBonus":"1643359016619","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1643359016636"}}