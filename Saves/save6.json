{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":2443,\"hp\":40,\"max_hp\":40,\"strength\":413,\"defense\":304,\"dexterity\":464,\"agility\":300,\"charisma\":318,\"intelligence\":0,\"hacking_chance_mult\":1.8502262440383246,\"hacking_speed_mult\":1.810023635110342,\"hacking_money_mult\":6.002625737237377,\"hacking_grow_mult\":2.8053199891001994,\"hacking_exp\":1615864977.5122783,\"strength_exp\":5978.181599788964,\"defense_exp\":5978.181599788964,\"dexterity_exp\":6874.908839757092,\"agility_exp\":52763.59684425484,\"charisma_exp\":92960.770143461,\"intelligence_exp\":0,\"hacking_mult\":5.106647760211338,\"strength_mult\":5.10557972656113,\"defense_mult\":3.756613845630263,\"dexterity_mult\":5.451027650890571,\"agility_mult\":2.0282268270923205,\"charisma_mult\":1.9155586679876817,\"hacking_exp_mult\":7.888858305440546,\"strength_exp_mult\":2.1414049452797776,\"defense_exp_mult\":2.1414049452797776,\"dexterity_exp_mult\":2.462615687071744,\"agility_exp_mult\":2.1414049452797776,\"charisma_exp_mult\":1.923160091273347,\"company_rep_mult\":2.653960925957218,\"faction_rep_mult\":2.0105764590584987,\"money\":93561675165567.67,\"city\":\"Aevum\",\"location\":\"ECorp\",\"jobs\":{\"MegaCorp\":\"Junior Software Engineer\",\"Fulcrum Technologies\":\"Senior Software Engineer\",\"ECorp\":\"Senior Software Engineer\"},\"companyName\":\"ECorp\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"The Black Hand\",\"BitRunners\",\"NiteSec\",\"Slum Snakes\",\"Volhaven\",\"Tetrads\",\"The Syndicate\",\"Speakers for the Dead\",\"The Dark Army\",\"Tian Di Hui\",\"CyberSec\",\"Fulcrum Secret Technologies\",\"ECorp\"],\"factionInvitations\":[],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Unstable Circadian Modulator\"},{\"level\":1,\"name\":\"Graphene BrachiBlades Upgrade\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"Bionic Legs\"},{\"level\":1,\"name\":\"DermaForce Particle Barrier\"}],\"augmentations\":[{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"},{\"level\":1,\"name\":\"Speech Enhancement\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Power Recirculation Core\"},{\"level\":1,\"name\":\"HemoRecirculator\"},{\"level\":1,\"name\":\"LuminCloaking-V1 Skin Implant\"},{\"level\":1,\"name\":\"LuminCloaking-V2 Skin Implant\"},{\"level\":1,\"name\":\"INFRARET Enhancement\"},{\"level\":1,\"name\":\"Combat Rib I\"},{\"level\":1,\"name\":\"NutriGen Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"SmartSonar Implant\"},{\"level\":1,\"name\":\"Nanofiber Weave\"},{\"level\":1,\"name\":\"PCMatrix\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Bionic Arms\"},{\"level\":1,\"name\":\"Neuroreceptor Management Implant\"},{\"level\":1,\"name\":\"Combat Rib II\"},{\"level\":1,\"name\":\"The Shadow's Simulacrum\"},{\"level\":1,\"name\":\"Bionic Spine\"},{\"level\":1,\"name\":\"Combat Rib III\"},{\"level\":1,\"name\":\"Augmented Targeting III\"},{\"level\":1,\"name\":\"BrachiBlades\"}],\"sourceFiles\":[],\"numPeopleKilled\":30,\"karma\":-188.3,\"crime_money_mult\":3.0049376426146046,\"crime_success_mult\":1.900355821416351,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":4,\"workExpMult\":3,\"currentWorkFactionName\":\"ECorp\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":1.1833287458160817,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":5.037782861005038,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":469.7815120889852,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":1999.9997958190065,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":79400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":2.506769820660187,\"hacknet_node_money_mult\":3.234413719432995,\"hacknet_node_purchase_cost_mult\":0.595033339940347,\"hacknet_node_ram_cost_mult\":0.7778213593991465,\"hacknet_node_core_cost_mult\":0.7778213593991465,\"hacknet_node_level_cost_mult\":0.6611481554892746,\"hasWseAccount\":true,\"hasTixApiAccess\":true,\"has4SData\":true,\"has4SDataTixApi\":true,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1642444005016,\"totalPlaytime\":1008943400,\"playtimeSinceLastAug\":79464400,\"playtimeSinceLastBitnode\":1008943400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-9134976,\"codingcontract\":150000000,\"corporation\":0,\"crime\":4056665.817529717,\"gang\":0,\"hacking\":98661037512044.62,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":93561674165567.67,\"work\":47139199.83921505,\"servers\":-5060276295384.0625,\"other\":-5308900000,\"augmentations\":-33970212000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-10952928,\"codingcontract\":150000000,\"corporation\":0,\"crime\":12349613.067291768,\"gang\":0,\"hacking\":127646177181417,\"hacknet\":166517620903.62805,\"hacknet_expenses\":-32296396842.690136,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-31200000000,\"total\":97684508461570.95,\"work\":225047947.38057792,\"servers\":-5119946336060.114,\"other\":-16872800000,\"augmentations\":-24928247252501.195}},\"scriptProdSinceLastAug\":61732978521029,\"exploits\":[],\"achievements\":[{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1641754584653},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1641754584662},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1641754584664},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1641754584666},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1641754584668},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1641754584671},{\"ID\":\"NS2\",\"unlockedOn\":1641754584674},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1641754584677},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1641754584679},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1641754584682},{\"ID\":\"TOR\",\"unlockedOn\":1641754584684},{\"ID\":\"TRAVEL\",\"unlockedOn\":1641845444497},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1641850365093},{\"ID\":\"NITESEC\",\"unlockedOn\":1641861956094},{\"ID\":\"FROZE\",\"unlockedOn\":1641875022751},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1641960792866},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1641969706253},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1642038598392},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1642042880540},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1642121167108},{\"ID\":\"4S\",\"unlockedOn\":1642134698100},{\"ID\":\"WORKOUT\",\"unlockedOn\":1642309956412},{\"ID\":\"DONATION\",\"unlockedOn\":1642364578003}],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":5,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"28.3.8.1\",\"isConnectedTo\":true,\"maxRam\":65536,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\",\"the-hidden-world.lit\",\"beyond-man.lit\",\"cost-of-immortality.lit\",\"coded-intelligence.lit\",\"history-of-synthoids.lit\",\"synthetic-muscles.lit\",\"tensions-in-tech-race.lit\",\"sector-12-crime.lit\",\"the-failed-frontier.lit\",\"simulated-reality.lit\",\"brighter-than-the-sun.lit\",\"man-and-machine.lit\",\"secret-societies.lit\",\"the-new-god.lit\",\"new-triads.lit\",\"democracy-is-dead.lit\",\"alpha-omega.lit\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"ServerProfiler.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":52256.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"control.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":61428761.10665643,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.167999999998,\"onlineExpGained\":33896832.8998687,\"onlineMoneyMade\":15611213438637,\"onlineRunningTime\":1411.0100000001814,\"pid\":1,\"ramUsage\":9.25,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///0f09e402-533d-44e2-a7a9-298585e6c71c\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///a112416d-416e-4d9d-8ea9-07a9f27dfca2\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///fcd61ab8-677e-48a0-bccd-17dc79dd303e\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///0f09e402-533d-44e2-a7a9-298585e6c71c\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///fcd61ab8-677e-48a0-bccd-17dc79dd303e\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///c19daa59-e802-4029-8853-04cc4ae49502\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///0f09e402-533d-44e2-a7a9-298585e6c71c\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///28d0885c-8d5c-4a03-9358-f0d064d9c539\"},{\"filename\":\"control.js\",\"url\":\"blob:file:///a4732358-da1d-40be-9a82-4ac9716780ee\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.167999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":798.8100000000444,\"pid\":2,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":672,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.168999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":788.410000000042,\"pid\":3,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":672,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.17,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":777.8100000000396,\"pid\":4,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":672,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.171,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":770.4100000000379,\"pid\":5,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":714,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.172,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":747.2100000000327,\"pid\":6,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":651,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.173,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":746.0100000000324,\"pid\":7,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.173,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":738.0100000000306,\"pid\":8,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":672,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.174,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":695.8100000000214,\"pid\":9,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":714,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.175,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":678.4100000000175,\"pid\":10,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":11,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.176,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":646.6100000000101,\"pid\":11,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.176,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":634.2100000000074,\"pid\":12,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.177,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":621.2100000000045,\"pid\":13,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.178,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":610.210000000002,\"pid\":14,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":102,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.178,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":602.6100000000002,\"pid\":15,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":798,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.179,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":595.4099999999986,\"pid\":16,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":798,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.179999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":582.2099999999956,\"pid\":17,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":93,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.179999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":579.8099999999951,\"pid\":18,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":987,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.180999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":577.2099999999945,\"pid\":19,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":117,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.180999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":571.2099999999931,\"pid\":20,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":96,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.181999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":552.6099999999889,\"pid\":21,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":120,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.182999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":533.6099999999846,\"pid\":22,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":51,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.182999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":518.8099999999812,\"pid\":23,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":102,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.183999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":483.80999999998113,\"pid\":24,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":693,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.183999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":413.00999999998515,\"pid\":25,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":141,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.185999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":409.6099999999854,\"pid\":26,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":66,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.186999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":401.40999999998587,\"pid\":27,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":114,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.188,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":396.80999999998613,\"pid\":28,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":38,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4dd60d64-d328-488f-8d3d-53ffe5726ede\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.188,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":391.8099999999864,\"pid\":29,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":114,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.189,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":389.0099999999866,\"pid\":30,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":38,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4dd60d64-d328-488f-8d3d-53ffe5726ede\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.191,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":383.0099999999869,\"pid\":33,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":81,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.192,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":383.0099999999869,\"pid\":34,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":87,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.192,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":375.20999999998736,\"pid\":35,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.194,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":370.6099999999876,\"pid\":37,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":99,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.194,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":360.4099999999882,\"pid\":38,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":819,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.197999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":354.00999999998857,\"pid\":41,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":75,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.198999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":350.6099999999887,\"pid\":42,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":16,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.200999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":348.6099999999888,\"pid\":44,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":840,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.201999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":336.40999999998945,\"pid\":46,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":630,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.201999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":334.2099999999896,\"pid\":47,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":462,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.202999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":318.60999999999046,\"pid\":48,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":81,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.203999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":315.20999999999066,\"pid\":49,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":99,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.203999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.0099999999907,\"pid\":50,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":609,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.204999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":311.80999999999085,\"pid\":51,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":90,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.216999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.0099999999911,\"pid\":57,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":34,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///4dd60d64-d328-488f-8d3d-53ffe5726ede\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.217999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":304.40999999999127,\"pid\":58,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.219999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":295.80999999999176,\"pid\":60,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":618,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.226,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":280.8099999999926,\"pid\":65,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":93,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.228,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":259.4099999999938,\"pid\":69,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":84,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.231,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":246.40999999999454,\"pid\":74,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":630,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.232,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":244.00999999999468,\"pid\":75,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":630,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.235999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":237.80999999999503,\"pid\":81,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":81,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.248,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":222.00999999999593,\"pid\":94,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":81,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.248,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":222.00999999999593,\"pid\":95,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":73,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.253999999997,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":213.40999999999642,\"pid\":104,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":84,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.256999999998,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":211.20999999999654,\"pid\":108,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":84,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.265,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":203.209999999997,\"pid\":121,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":87,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///0e27efae-5a11-4f73-9188-b5df35085751\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.266,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":202.20999999999705,\"pid\":123,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":651,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///4ae6b031-93d6-4587-a0a4-1fcbb209ef74\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":99.21000000000087,\"pid\":301,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":495,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":95.81000000000083,\"pid\":306,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":53,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":90.21000000000075,\"pid\":317,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":53,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":88.01000000000072,\"pid\":322,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":55,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":84.81000000000067,\"pid\":325,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":83.61000000000065,\"pid\":327,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":39,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":79.21000000000059,\"pid\":333,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":33,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74.61000000000053,\"pid\":342,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":55,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":71.21000000000048,\"pid\":348,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":47,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":66.2100000000004,\"pid\":354,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":504,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":63.01000000000036,\"pid\":355,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":504,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":59.810000000000315,\"pid\":361,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":546,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.41000000000028,\"pid\":366,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000028,\"pid\":367,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":30,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":57.21000000000028,\"pid\":368,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":388,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":55.01000000000025,\"pid\":371,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":22,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":52.61000000000021,\"pid\":375,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":30,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.41000000000018,\"pid\":379,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":345,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":48.41000000000015,\"pid\":381,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":60,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":46.21000000000012,\"pid\":385,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":48,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"pid\":388,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":42.81000000000007,\"pid\":390,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":50,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":41.81000000000006,\"pid\":391,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":36,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.210000000000036,\"pid\":398,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":54,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.010000000000005,\"pid\":403,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":607,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":35.809999999999974,\"pid\":406,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":30,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":409,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":27,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":34.60999999999996,\"pid\":410,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":328,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999994,\"pid\":411,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":472,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999994,\"pid\":412,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":72,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"pid\":413,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"comptek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.409999999999926,\"pid\":414,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":53,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.209999999999926,\"pid\":415,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":57,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":26.20999999999994,\"pid\":418,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":567,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.009999999999945,\"pid\":420,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":78,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"pid\":422,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"pid\":423,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":378,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":425,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":22.609999999999953,\"pid\":426,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":61,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.60999999999996,\"pid\":428,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":45,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":19.609999999999964,\"pid\":430,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":299,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.409999999999968,\"pid\":431,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":17.209999999999972,\"pid\":437,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":567,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":16.009999999999977,\"pid\":438,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":28,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":439,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":440,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":405,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":15.809999999999977,\"pid\":441,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":40,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":14.609999999999982,\"pid\":445,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":63,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":13.409999999999986,\"pid\":448,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":32,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":460,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":28,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":461,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":450,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"pid\":462,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":177,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":463,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":34,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.61,\"pid\":464,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":43,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.410000000000004,\"pid\":467,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":630,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":471,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":652,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"pid\":472,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":296,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":473,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":24,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"pid\":474,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":360,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":476,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":18,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":477,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":336,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.810000000000003,\"pid\":478,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":48,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.810000000000002,\"pid\":481,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":241,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.610000000000001,\"pid\":482,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":20,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":483,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":31,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":484,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":400,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.410000000000001,\"pid\":485,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":296,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":486,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":78,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"pid\":487,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":64,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":488,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":32,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{},\"filename\":\"grow.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.41000000000000003,\"pid\":489,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":588,\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":490,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":491,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":45,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"hack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":492,\"ramUsage\":1.7,\"server\":\"home\",\"threads\":15,\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":0.21000000000000002,\"pid\":493,\"ramUsage\":1.75,\"server\":\"home\",\"threads\":48,\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @type {import('./types/NetscriptDefinitions').NS}\\n */\\n\\n/**\\n * @class\\n */\\nexport class Logger {\\n\\n\\tconstructor(ns, debug = false) {\\n\\t\\tthis.ns = ns;\\n\\t\\tthis.debugEnabled = debug;\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\terror(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"ERROR  | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tfail(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"FAIL   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tinfo(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"INFO   | \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\twarn(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"WARNING| \\\" + format, values);\\n\\t}\\n\\n\\t/** \\n\\t * @param {string} format\\n\\t * @param {any[]} values\\n\\t **/\\n\\tsuccess(format, values) {\\n\\t\\tthis.ns.tprintf(\\\"SUCCESS| \\\" + format, values);\\n\\t}\\n\\n\\t/**\\n\\t * \\n\\t * @param {string} format \\n\\t * @param {any[]} values \\n\\t */\\n\\tdebug(format, values) {\\n\\t\\tif (this.debugEnabled) {\\n\\t\\t\\tthis.ns.tprintf(\\\"DEBUG| \\\" + format, values);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"log.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"d373aa5a5d9ab1f50dec82f92041c5fee046884dc0a599b37441f117e2c5d738\",\"moduleSequenceNumber\":309,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weaken.js\",\"url\":\"blob:file:///4f64fc03-cdbb-48b5-b4d8-d0e117791551\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":747,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///de43de84-1171-4021-916f-a392851a519b\"}],\"ramUsage\":1.7,\"server\":\"home\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":745,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"grow.js\",\"url\":\"blob:file:///9f5a944d-c86e-4800-a280-afe53976486d\"}],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":749,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n */\\n\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport { Logger } from \\\"./log.js\\\";\\nimport { numAvailableExploits } from \\\"./exploits.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {Logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n    ns.disableLog(\\\"killall\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n */\\nasync function control(ns) {\\n\\t// initialize our logging system\\n\\tconst logger = new Logger(ns, false);\\n\\n\\tlet targets = await findNewServers(ns);\\n\\tlet runners = await findRunners(ns);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const runner of runners) {\\n\\t\\tif (runner.hostname !== \\\"home\\\") {\\n\\t\\t\\tns.killall(runner.hostname);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\t// let targets = [{ zombie: potentialTargets[0], hostname: potentialTargets[0].hostname, setup: true, threadRatio: 1 }];\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n    ns.print(\\\"Starting up against with total threads: -> \\\" + threads.counts.maxThreads);\\n\\t// logger.info(\\\"%(stage)s | Starting up against %(target)s using %(threads)d total threads.\\\", \\n\\t// \\t{ stage: targets[0].setup ? \\\"SETUP\\\" : \\\"HACK\\\", target: targets[0].hostname, threads: threads.counts.maxThreads });\\n\\twhile (true) {\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (target.setup && target.isAtMinSecurity() && target.isAtMaxMoney()) {\\n\\t\\t\\t\\tns.print(\\\"-> Finished hack setup <- \\\" + target.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!target.setup && target.availableMoney < target.maxMoney * .15) {\\n\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\t\\ttarget.getRoot(ns);\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\tcounter = 0;\\n\\n\\t\\t\\trunners = await findRunners(ns);\\n\\t\\t\\tif (runners.length === 0) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\t\\t\\tfor (const target of targets) {\\n\\t\\t\\t\\tif (target.root) {\\n\\t\\t\\t\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\t\\n\\t\\t\\t\\t\\t// foodnstuff has the best XP rate, so just target it for weakenloops\\n\\t\\t\\t\\t\\tif (target.maxRunningThreads > 0 && !ns.isRunning(\\\"weakenloop.js\\\", target.hostname, \\\"foodnstuff\\\")) {\\n\\t\\t\\t\\t\\t\\tns.killall(target.hostname);\\n\\t\\t\\t\\t\\t\\tns.exec(\\\"weakenloop.js\\\", target.hostname, target.maxRunningThreads, \\\"foodnstuff\\\");\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// re-sort the list so we are always using the best target\\n\\t\\t\\ttargets = targets.sort((a, b) => b.currentRating - a.currentRating);\\n\\t\\t}\\n\\n\\t\\tawait doHacks(runners, targets, ns, logger);\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {Zombie[]} oldTargets\\n * @param {Server[]} runners \\n */\\nfunction cleanupOldThreads(ns, oldTargets, runners) {\\n\\tfor (const target of oldTargets) {\\n\\t\\tfor (const runner of runners) {\\n\\t\\t\\tfor (const scriptName of [\\\"weaken.js\\\", \\\"grow.js\\\",  \\\"hack.js\\\"]) {\\n\\t\\t\\t\\tlet script = ns.getRunningScript(scriptName, runner.hostname, target.hostname);\\n\\t\\t\\t\\tif (script) {\\n\\t\\t\\t\\t\\tns.kill(scriptName, runner.hostname, target.hostname);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {Server[]} runners \\n * @param {Zombie[]} targets\\n * @param {NS} ns\\n * @param {Logger} logger\\n */\\nasync function doHacks(runners, targets, ns, logger) {\\n\\tlet threads = getThreadCounts(ns, runners, targets);\\n\\n\\tfor (const target of targets) {\\n\\t\\tconst growRate = target.setup ? target.shouldGrow ? .9 : 0 : .84;\\n\\t\\tconst hackRate = target.setup ? 0 : .04;\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((target.maxTargetingThreads * growRate) - target.growRunners), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.floor((target.maxTargetingThreads * hackRate) - target.hackRunners), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(target.maxTargetingThreads - target.wantedGrowThreads - target.wantedHackThreads - target.weakenRunners - target.hackRunners - target.growRunners, 0);\\n\\t\\tlogger.debug(\\\"Start: %j\\\", threads);\\n\\t}\\n\\n\\t// ns.print(\\\"Running | Grow: \\\" + runningGrow + \\\" | Hack: \\\" + runningHack + \\\" | Weaken: \\\" + runningWeaken);\\n\\n\\n\\tfor (const server of runners) {\\n\\t\\tlet availableRunners = threads[server.hostname].maxThreads - threads[server.hostname].growRunners - threads[server.hostname].hackRunners - threads[server.hostname].weakenRunners;\\n\\t\\tif (availableRunners <= 0 || threads.counts.usedThreads >= threads.counts.maxThreads) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\ttarget.updateStats(ns);\\n\\t\\t\\tif (!target.root) continue;\\n\\t\\t\\tthreads.counts.usedThreads += target.maxTargetingThreads;\\n\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\t// ns.print(\\\"Weaken: \\\" + target.weakenRunners + \\\" Hack: \\\" + target.hackRunners + \\\"Grow: \\\" + target.growRunners);\\n\\t\\t\\tconst weakenScript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\t// ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.hostname);\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"weaken.js\\\", server.hostname, toWeaken, target.hostname);\\n\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tns.print(\\\"Failed to startup weaken on: \\\" + server.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ threads[server.hostname].weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\tlet serverData = ns.getServer(server.hostname);\\n\\t\\t\\t\\t\\t// logger.warn(\\\"%j\\\", { weakRunners: threads[server.hostname].weakenRunners,\\n\\t\\t\\t\\t\\t// \\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t// \\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t// \\tserver: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"weaken.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tlogger.debug(\\\"Calcs: new Grow: %s\\\", toGrow);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"grow.js\\\", server.hostname, toGrow, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"grow.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> Sec: \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tawait ns.sleep(100)\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: server.hostname,  target: target.hostname});\\n\\t\\t\\t\\tconst pid = ns.exec(\\\"hack.js\\\", server.hostname, toHack, target.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tns.print(server.hostname + \\\" \\\" + getRunningScriptLogs(ns, server, target.hostname, \\\"hack.js\\\")[0] + \\\" <- Money \\\" + Formatter.formatMoney(target.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.maxMoney) + \\\" -> \\\" + target.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// logger.info(\\\"End:   %j\\\", {threads: [wantedGrowThreads, wantedHackThreads, wantedWeakenThreads]});\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {string} targetHostname\\n * @param {string} scriptName\\n */\\nfunction getRunningScriptLogs(ns, server, targetHostname, scriptName) {\\n\\tlet script = ns.getRunningScript(scriptName, server.hostname, targetHostname);\\n\\treturn script ? script.logs : [];\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"})\\n\\t\\t.map(server => new Zombie(server.server, ns, server.parent, server.depth));\\n\\n\\tfor (const target of allServers) {\\n\\t\\ttarget.setup = target.isAtMinSecurity() && target.isAtMaxMoney();\\n\\n\\t\\tif (target.shouldCrack === \\\"true\\\") {\\n\\t\\t\\ttarget.getRoot(ns);\\n\\t\\t}\\n\\t\\tawait target.uploadFiles(ns, [\\\"weakenloop.js\\\", \\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\ttarget.updateStats(ns);\\n\\n\\t\\t// foodnstuff has the best XP rate, so just target it for weakenloops\\n\\t\\tif (target.maxRunningThreads > 0 && !ns.isRunning(\\\"weakenloop.js\\\", target.hostname, \\\"foodnstuff\\\")) {\\n\\t\\t\\tns.killall(target.hostname);\\n\\t\\t\\tns.exec(\\\"weakenloop.js\\\", target.hostname, target.maxRunningThreads, \\\"foodnstuff\\\");\\n\\t\\t}\\n\\t}\\n\\treturn Promise.resolve(allServers.filter(target => target.maxMoney > 0).sort((a, b) => b.currentRating - a.currentRating));\\n}\\n\\n/**\\n * @param {NS} ns\\n */\\nasync function findRunners(ns) {\\n\\tlet runners = ns.scan(\\\"home\\\")\\n\\t\\t.filter(child => child.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(child => ns.getServer(child));\\n\\n\\tfor (const runner of runners) {\\n\\t\\tawait ns.scp([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"], runner.hostname);\\n\\t}\\n\\n\\trunners.push(ns.getServer(\\\"home\\\"));\\n\\treturn runners;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {Server[]} runners\\n * @param {Zombie[]} targets\\n * @return {{counts: { growRunners: number[], weakenRunners: number[], hackRunners: number[], maxThreads: number, usedThreads: number}}} \\n */\\nfunction getThreadCounts(ns, runners, targets) {\\n\\tlet data = {\\n\\t\\tcounts: {\\n\\t\\t\\tmaxThreads: 0,\\n\\t\\t\\tusedThreads: 0\\n\\t\\t}\\n\\t};\\n\\tfor (let target of targets) {\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t}\\n\\tfor (const server of runners) {\\n\\t\\tlet maxServerThreads = Math.floor(server.maxRam / 1.75);\\n\\t\\tif (server.hostname === \\\"home\\\") {\\n\\t\\t\\tmaxServerThreads = Math.floor(maxServerThreads * .8);\\n\\t\\t}\\n\\t\\tdata[server.hostname] = { growRunners: 0, hackRunners: 0, weakenRunners: 0, maxThreads: maxServerThreads};\\n\\t\\tdata.counts.maxThreads += maxServerThreads;\\n\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tlet script = ns.getRunningScript(\\\"grow.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"hack.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\n\\t\\t\\t}\\n\\t\\t\\tscript = ns.getRunningScript(\\\"weaken.js\\\", server.hostname, target.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tdata[server.hostname].weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn data;\\n}\",\"filename\":\"control.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///cab811f5-9789-4a41-9d90-295172f25c06\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///993ed09f-7cb6-4a10-a49a-9eb200d3ce9e\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///65404a80-d6eb-4967-971c-65101afe6202\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///cab811f5-9789-4a41-9d90-295172f25c06\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///65404a80-d6eb-4967-971c-65101afe6202\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///0c14df8d-daa6-409f-bf6c-277926f3416b\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///cab811f5-9789-4a41-9d90-295172f25c06\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///c570afde-c7be-4469-8ff0-0d34f808870f\"},{\"filename\":\"control.js\",\"url\":\"blob:file:///08594cb0-3e1c-4903-b91a-89438f2618bc\"}],\"ramUsage\":9.25,\"server\":\"home\",\"_hash\":\"fe95d40df1a73fa159f57f3bbaf9d9027c53df6f5d514bc81f2c0b620f8fcfbb\",\"moduleSequenceNumber\":617,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tns.getPurchasedServers();\\n\\tns.getPurchasedServerCost()\\n\\tns.getPurchasedServerMaxRam();\\n\\tns.purchaseProgram()\\n}\",\"filename\":\"servers.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":36.15,\"server\":\"home\",\"_hash\":\"b4b570dd4faa257518f373d8abc3d274cb1ef69085dcbe4901223364a111f453\",\"moduleSequenceNumber\":314,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"purchaseProgram\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @public\\n */\\n interface Player {\\n    hacking: number;\\n    hp: number;\\n    max_hp: number;\\n    strength: number;\\n    defense: number;\\n    dexterity: number;\\n    agility: number;\\n    charisma: number;\\n    intelligence: number;\\n    hacking_chance_mult: number;\\n    hacking_speed_mult: number;\\n    hacking_money_mult: number;\\n    hacking_grow_mult: number;\\n    hacking_exp: number;\\n    strength_exp: number;\\n    defense_exp: number;\\n    dexterity_exp: number;\\n    agility_exp: number;\\n    charisma_exp: number;\\n    hacking_mult: number;\\n    strength_mult: number;\\n    defense_mult: number;\\n    dexterity_mult: number;\\n    agility_mult: number;\\n    charisma_mult: number;\\n    hacking_exp_mult: number;\\n    strength_exp_mult: number;\\n    defense_exp_mult: number;\\n    dexterity_exp_mult: number;\\n    agility_exp_mult: number;\\n    charisma_exp_mult: number;\\n    company_rep_mult: number;\\n    faction_rep_mult: number;\\n    numPeopleKilled: number;\\n    money: number;\\n    city: string;\\n    location: string;\\n    companyName: string;\\n    crime_money_mult: number;\\n    crime_success_mult: number;\\n    isWorking: boolean;\\n    workType: string;\\n    currentWorkFactionName: string;\\n    currentWorkFactionDescription: string;\\n    workHackExpGainRate: number;\\n    workStrExpGainRate: number;\\n    workDefExpGainRate: number;\\n    workDexExpGainRate: number;\\n    workAgiExpGainRate: number;\\n    workChaExpGainRate: number;\\n    workRepGainRate: number;\\n    workMoneyGainRate: number;\\n    workMoneyLossRate: number;\\n    workHackExpGained: number;\\n    workStrExpGained: number;\\n    workDefExpGained: number;\\n    workDexExpGained: number;\\n    workAgiExpGained: number;\\n    workChaExpGained: number;\\n    workRepGained: number;\\n    workMoneyGained: number;\\n    createProgramName: string;\\n    createProgramReqLvl: number;\\n    className: string;\\n    crimeType: string;\\n    work_money_mult: number;\\n    hacknet_node_money_mult: number;\\n    hacknet_node_purchase_cost_mult: number;\\n    hacknet_node_ram_cost_mult: number;\\n    hacknet_node_core_cost_mult: number;\\n    hacknet_node_level_cost_mult: number;\\n    hasWseAccount: boolean;\\n    hasTixApiAccess: boolean;\\n    has4SData: boolean;\\n    has4SDataTixApi: boolean;\\n    bladeburner_max_stamina_mult: number;\\n    bladeburner_stamina_gain_mult: number;\\n    bladeburner_analysis_mult: number;\\n    bladeburner_success_chance_mult: number;\\n    bitNodeN: number;\\n    totalPlaytime: number;\\n    playtimeSinceLastAug: number;\\n    playtimeSinceLastBitnode: number;\\n    jobs: any;\\n    factions: string[];\\n    tor: boolean;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  interface RunningScript {\\n    args: string[];\\n    filename: string;\\n    logs: string[];\\n    offlineExpGained: number;\\n    offlineMoneyMade: number;\\n    offlineRunningTime: number;\\n    onlineExpGained: number;\\n    onlineMoneyMade: number;\\n    onlineRunningTime: number;\\n    pid: number;\\n    ramUsage: number;\\n    server: string;\\n    threads: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of a crime.\\n   * @public\\n   */\\n  export interface CrimeStats {\\n    /** Number representing the difficulty of the crime. Used for success chance calculations */\\n    difficulty: number;\\n    /** Amount of karma lost for successfully committing this crime */\\n    karma: number;\\n    /** How many people die as a result of this crime */\\n    kills: number;\\n    /** How much money is given */\\n    money: number;\\n    /** Name of crime */\\n    name: number;\\n    /** Milliseconds it takes to attempt the crime */\\n    time: number;\\n    /** Description of the crime activity */\\n    type: string;\\n    /** hacking level impact on success change of the crime */\\n    hacking_success_weight: number;\\n    /** strength level impact on success change of the crime */\\n    strength_success_weight: number;\\n    /** defense level impact on success change of the crime */\\n    defense_success_weight: number;\\n    /** dexterity level impact on success change of the crime */\\n    dexterity_success_weight: number;\\n    /** agility level impact on success change of the crime */\\n    agility_success_weight: number;\\n    /** charisma level impact on success change of the crime */\\n    charisma_success_weight: number;\\n    /** hacking exp gained from crime */\\n    hacking_exp: number;\\n    /** strength exp gained from crime */\\n    strength_exp: number;\\n    /** defense exp gained from crime */\\n    defense_exp: number;\\n    /** dexterity exp gained from crime */\\n    dexterity_exp: number;\\n    /** agility exp gained from crime */\\n    agility_exp: number;\\n    /** charisma exp gained from crime */\\n    charisma_exp: number;\\n    /** intelligence exp gained from crime */\\n    intelligence_exp: number;\\n  }\\n  \\n  /**\\n   * Data representing the internal values of an Augmentation.\\n   * @public\\n   */\\n  export interface AugmentationStats {\\n    /** Multipler to hacking skill */\\n    hacking_mult?: number;\\n    /** Multipler to strength skill */\\n    strength_mult?: number;\\n    /** Multipler to defense skill */\\n    defense_mult?: number;\\n    /** Multipler to dexterity skill */\\n    dexterity_mult?: number;\\n    /** Multipler to agility skill */\\n    agility_mult?: number;\\n    /** Multipler to charisma skill */\\n    charisma_mult?: number;\\n    /** Multipler to hacking experience gain rate */\\n    hacking_exp_mult?: number;\\n    /** Multipler to strength experience gain rate */\\n    strength_exp_mult?: number;\\n    /** Multipler to defense experience gain rate */\\n    defense_exp_mult?: number;\\n    /** Multipler to dexterity experience gain rate */\\n    dexterity_exp_mult?: number;\\n    /** Multipler to agility experience gain rate */\\n    agility_exp_mult?: number;\\n    /** Multipler to charisma experience gain rate */\\n    charisma_exp_mult?: number;\\n    /** Multipler to chance of successfully performing a hack */\\n    hacking_chance_mult?: number;\\n    /** Multipler to hacking speed */\\n    hacking_speed_mult?: number;\\n    /** Multipler to amount of money the player gains from hacking */\\n    hacking_money_mult?: number;\\n    /** Multipler to amount of money injected into servers using grow */\\n    hacking_grow_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    company_rep_mult?: number;\\n    /** Multipler to amount of reputation gained when working */\\n    faction_rep_mult?: number;\\n    /** Multipler to amount of money gained from crimes */\\n    crime_money_mult?: number;\\n    /** Multipler to crime success rate */\\n    crime_success_mult?: number;\\n    /** Multipler to amount of money gained from working */\\n    work_money_mult?: number;\\n    /** Multipler to amount of money produced by Hacknet Nodes */\\n    hacknet_node_money_mult?: number;\\n    /** Multipler to cost of purchasing a Hacknet Node */\\n    hacknet_node_purchase_cost_mult?: number;\\n    /** Multipler to cost of ram for a Hacknet Node */\\n    hacknet_node_ram_cost_mult?: number;\\n    /** Multipler to cost of core for a Hacknet Node */\\n    hacknet_node_core_cost_mult?: number;\\n    /** Multipler to cost of leveling up a Hacknet Node */\\n    hacknet_node_level_cost_mult?: number;\\n    /** Multipler to Bladeburner max stamina */\\n    bladeburner_max_stamina_mult?: number;\\n    /** Multipler to Bladeburner stamina gain rate */\\n    bladeburner_stamina_gain_mult?: number;\\n    /** Multipler to effectiveness in Bladeburner Field Analysis */\\n    bladeburner_analysis_mult?: number;\\n    /** Multipler to success chance in Bladeburner contracts/operations */\\n    bladeburner_success_chance_mult?: number;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link NS.hack | hack}, {@link NS.grow | grow}, and {@link NS.weaken | weaken}.\\n   * @public\\n   */\\n  export interface BasicHGWOptions {\\n    /** Number of threads to use for this function. Must be less than or equal to the number of threads the script is running with. */\\n    threads?: number;\\n    /** Set to true this action will affect the stock market. */\\n    stock?: boolean;\\n  }\\n  \\n  /**\\n   * Options to affect the behavior of {@link CodingContract} attempt.\\n   * @public\\n   */\\n  export interface CodingAttemptOptions {\\n    /** If truthy, then the function will return a string that states the contract’s reward when it is successfully solved. */\\n    returnReward: boolean;\\n  }\\n  \\n  /**\\n   * Return value of {@link Sleeve.getSleevePurchasableAugs | getSleevePurchasableAugs}\\n   * @public\\n   */\\n  export interface AugmentPair {\\n    /** augmentation name */\\n    name: string;\\n    /** augmentation cost */\\n    cost: number;\\n  }\\n  \\n  /**\\n   * Value in map of {@link StockOrder}\\n   * @public\\n   */\\n  export interface StockOrderObject {\\n    /** Number of shares */\\n    shares: number;\\n    /** Price per share */\\n    price: number;\\n    /** Order type */\\n    type: string;\\n    /** Order position */\\n    position: string;\\n  }\\n  \\n  /**\\n   * Return value of {@link TIX.getOrders | getOrders}\\n   * @public\\n   */\\n  export interface StockOrder {\\n    /** Stock Symbol */\\n    [key: string]: StockOrderObject[];\\n  }\\n  \\n  /**\\n   * A single process on a server.\\n   * @public\\n   */\\n  export interface ProcessInfo {\\n    /** Script name. */\\n    filename: string;\\n    /** Number of threads script is running with */\\n    threads: number;\\n    /** Script's arguments */\\n    args: string[];\\n    /** Process ID */\\n    pid: number;\\n  }\\n  \\n  /**\\n   * Hack related multipliers.\\n   * @public\\n   */\\n  export interface HackingMultipliers {\\n    /** Player's hacking chance multiplier. */\\n    chance: number;\\n    /** Player's hacking speed multiplier. */\\n    speed: number;\\n    /** Player's hacking money stolen multiplier. */\\n    money: number;\\n    /** Player's hacking growth multiplier */\\n    growth: number;\\n  }\\n  \\n  /**\\n   * Hacknet related multipliers.\\n   * @public\\n   */\\n  export interface HacknetMultipliers {\\n    /** Player's hacknet production multiplier */\\n    production: number;\\n    /** Player's hacknet purchase cost multiplier */\\n    purchaseCost: number;\\n    /** Player's hacknet ram cost multiplier */\\n    ramCost: number;\\n    /** Player's hacknet core cost multiplier */\\n    coreCost: number;\\n    /** Player's hacknet level cost multiplier */\\n    levelCost: number;\\n  }\\n  \\n  /**\\n   * A single server.\\n   * @public\\n   */\\n  export interface Server {\\n    /**\\n     * How many CPU cores this server has. Maximum of 8.\\n     * Affects magnitude of grow and weaken.\\n     */\\n    cpuCores: number;\\n  \\n    /** Flag indicating whether the FTP port is open */\\n    ftpPortOpen: boolean;\\n  \\n    /** Flag indicating whether player has admin/root access to this server */\\n    hasAdminRights: boolean;\\n  \\n    /** Hostname. Must be unique */\\n    hostname: string;\\n  \\n    /** Flag indicating whether HTTP Port is open */\\n    httpPortOpen: boolean;\\n  \\n    /** IP Address. Must be unique */\\n    ip: string;\\n  \\n    /** Flag indicating whether player is curently connected to this server */\\n    isConnectedTo: boolean;\\n  \\n    /** RAM (GB) available on this server */\\n    maxRam: number;\\n  \\n    /**\\n     * Name of company/faction/etc. that this server belongs to.\\n     * Optional, not applicable to all Servers\\n     */\\n    organizationName: string;\\n  \\n    /** RAM (GB) used. i.e. unavailable RAM */\\n    ramUsed: number;\\n  \\n    /** Flag indicating whether SMTP Port is open */\\n    smtpPortOpen: boolean;\\n  \\n    /** Flag indicating whether SQL Port is open */\\n    sqlPortOpen: boolean;\\n  \\n    /** Flag indicating whether the SSH Port is open */\\n    sshPortOpen: boolean;\\n  \\n    /** Flag indicating whether this is a purchased server */\\n    purchasedByPlayer: boolean;\\n  \\n    /** Flag indicating whether this server has a backdoor installed by a player */\\n    backdoorInstalled: boolean;\\n  \\n    /**\\n     * Initial server security level\\n     * (i.e. security level when the server was created)\\n     */\\n    baseDifficulty: number;\\n  \\n    /** Server Security Level */\\n    hackDifficulty: number;\\n  \\n    /** Minimum server security level that this server can be weakened to */\\n    minDifficulty: number;\\n  \\n    /** How much money currently resides on the server and can be hacked */\\n    moneyAvailable: number;\\n  \\n    /** Maximum amount of money that this server can hold */\\n    moneyMax: number;\\n  \\n    /** Number of open ports required in order to gain admin/root access */\\n    numOpenPortsRequired: number;\\n  \\n    /** How many ports are currently opened on the server */\\n    openPortCount: number;\\n  \\n    /** Hacking level required to hack this server */\\n    requiredHackingSkill: number;\\n  \\n    /**\\n     * Parameter that affects how effectively this server's money can\\n     * be increased using the grow() Netscript function\\n     */\\n    serverGrowth: number;\\n  }\\n  \\n  /**\\n   * All multipliers affecting the difficulty of the current challenge.\\n   * @public\\n   */\\n  export interface BitNodeMultipliers {\\n    /** Influences how quickly the player's agility level (not exp) scales */\\n    AgilityLevelMultiplier: number;\\n    /** Influences the base cost to purchase an augmentation. */\\n    AugmentationMoneyCost: number;\\n    /** Influences the base rep the player must have with a faction to purchase an augmentation. */\\n    AugmentationRepCost: number;\\n    /** Influences how quickly the player can gain rank within Bladeburner. */\\n    BladeburnerRank: number;\\n    /** Influences the cost of skill levels from Bladeburner. */\\n    BladeburnerSkillCost: number;\\n    /** Influences how quickly the player's charisma level (not exp) scales */\\n    CharismaLevelMultiplier: number;\\n    /** Influences the experience gained for each ability when a player completes a class. */\\n    ClassGymExpGain: number;\\n    /** Influences the amount of money gained from completing Coding Contracts */\\n    CodingContractMoney: number;\\n    /** Influences the experience gained for each ability when the player completes working their job. */\\n    CompanyWorkExpGain: number;\\n    /** Influences how much money the player earns when completing working their job. */\\n    CompanyWorkMoney: number;\\n    /** Influences the valuation of corporations created by the player. */\\n    CorporationValuation: number;\\n    /** Influences the base experience gained for each ability when the player commits a crime. */\\n    CrimeExpGain: number;\\n    /** Influences the base money gained when the player commits a crime. */\\n    CrimeMoney: number;\\n    /** Influences how many Augmentations you need in order to get invited to the Daedalus faction */\\n    DaedalusAugsRequirement: number;\\n    /** Influences how quickly the player's defense level (not exp) scales */\\n    DefenseLevelMultiplier: number;\\n    /** Influences how quickly the player's dexterity level (not exp) scales */\\n    DexterityLevelMultiplier: number;\\n    /** Influences how much rep the player gains in each faction simply by being a member. */\\n    FactionPassiveRepGain: number;\\n    /** Influences the experience gained for each ability when the player completes work for a Faction. */\\n    FactionWorkExpGain: number;\\n    /** Influences how much rep the player gains when performing work for a faction. */\\n    FactionWorkRepGain: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data API */\\n    FourSigmaMarketDataApiCost: number;\\n    /** Influences how much it costs to unlock the stock market's 4S Market Data (NOT API) */\\n    FourSigmaMarketDataCost: number;\\n    /** Influences the experienced gained when hacking a server. */\\n    HackExpGain: number;\\n    /** Influences how quickly the player's hacking level (not experience) scales */\\n    HackingLevelMultiplier: number;\\n    /** Influences how much money is produced by Hacknet Nodes and the hash rate of Hacknet Servers (unlocked in BitNode-9) */\\n    HacknetNodeMoney: number;\\n    /** Influences how much money it costs to upgrade your home computer's RAM */\\n    HomeComputerRamCost: number;\\n    /** Influences how much money is gained when the player infiltrates a company. */\\n    InfiltrationMoney: number;\\n    /** Influences how much rep the player can gain from factions when selling stolen documents and secrets */\\n    InfiltrationRep: number;\\n    /** Influences how much money can be stolen from a server when the player performs a hack against it through the Terminal. */\\n    ManualHackMoney: number;\\n    /** Influence how much it costs to purchase a server */\\n    PurchasedServerCost: number;\\n    /** Influences the maximum number of purchased servers you can have */\\n    PurchasedServerLimit: number;\\n    /** Influences the maximum allowed RAM for a purchased server */\\n    PurchasedServerMaxRam: number;\\n    /** Influences the minimum favor the player must have with a faction before they can donate to gain rep. */\\n    RepToDonateToFaction: number;\\n    /** Influences how much money can be stolen from a server when a script performs a hack against it. */\\n    ScriptHackMoney: number;\\n    /** Influences the growth percentage per cycle against a server. */\\n    ServerGrowthRate: number;\\n    /** Influences the maxmimum money that a server can grow to. */\\n    ServerMaxMoney: number;\\n    /** Influences the initial money that a server starts with. */\\n    ServerStartingMoney: number;\\n    /** Influences the initial security level (hackDifficulty) of a server. */\\n    ServerStartingSecurity: number;\\n    /** Influences the weaken amount per invocation against a server. */\\n    ServerWeakenRate: number;\\n    /** Influences how quickly the player's strength level (not exp) scales */\\n    StrengthLevelMultiplier: number;\\n  }\\n  \\n  /**\\n   * Object representing all the values related to a hacknet node.\\n   * @public\\n   */\\n  export interface NodeStats {\\n    /** Node's name */\\n    name: string;\\n    /** Node's level */\\n    level: number;\\n    /** Node's RAM */\\n    ram: number;\\n    /** Node's used RAM */\\n    ramUsed: number;\\n    /** Node's number of cores */\\n    cores: number;\\n    /** Cache level. Only applicable for Hacknet Servers */\\n    cache: number;\\n    /** Hash Capacity provided by this Node. Only applicable for Hacknet Servers */\\n    hashCapacity: number;\\n    /** Node's production per second */\\n    production: number;\\n    /** Number of seconds since Node has been purchased */\\n    timeOnline: number;\\n    /** Total number of money Node has produced */\\n    totalProduction: number;\\n  }\\n  \\n  /**\\n   * Short summary of the players skills.\\n   * @public\\n   */\\n  export interface PlayerSkills {\\n    /** Hacking level */\\n    hacking: number;\\n    /** Strength level */\\n    strength: number;\\n    /** Defense level */\\n    defense: number;\\n    /** Dexterity level */\\n    dexterity: number;\\n    /** Agility level */\\n    agility: number;\\n    /** Chraisma level */\\n    charisma: number;\\n    /** Intelligence level */\\n    intelligence: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterMult {\\n    /** Agility stat */\\n    agility: number;\\n    /** Agility exp */\\n    agilityExp: number;\\n    /** Company reputation */\\n    companyRep: number;\\n    /** Money earned from crimes */\\n    crimeMoney: number;\\n    /** Crime success chance */\\n    crimeSuccess: number;\\n    /** Defense stat */\\n    defense: number;\\n    /** Defense exp */\\n    defenseExp: number;\\n    /** Dexterity stat */\\n    dexterity: number;\\n    /** Dexterity exp */\\n    dexterityExp: number;\\n    /** Faction reputation */\\n    factionRep: number;\\n    /** Hacking stat */\\n    hacking: number;\\n    /** Hacking exp */\\n    hackingExp: number;\\n    /** Strength stat */\\n    strength: number;\\n    /** Strength exp */\\n    strengthExp: number;\\n    /** Money earned from jobs */\\n    workMoney: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface CharacterInfo {\\n    /** Current BitNode number */\\n    bitnode: number;\\n    /** Name of city you are currently in */\\n    city: string;\\n    /** Array of factions you are currently a member of */\\n    factions: string[];\\n    /** Current health points */\\n    hp: number;\\n    /** Array of all companies at which you have jobs */\\n    company: string[];\\n    /** Array of job positions for all companies you are employed at. Same order as 'jobs' */\\n    jobTitle: string[];\\n    /** Maximum health points */\\n    maxHp: number;\\n    /** Boolean indicating whether or not you have a tor router */\\n    tor: boolean;\\n    /** Object with many of the player's multipliers from Augmentations/Source Files */\\n    mult: CharacterMult;\\n    /** Timed worked in ms */\\n    timeWorked: number;\\n    /** Hacking experience earned so far from work */\\n    workHackExpGain: number;\\n    /** Str experience earned so far from work */\\n    workStrExpGain: number;\\n    /** Def experience earned so far from work */\\n    workDefExpGain: number;\\n    /** Dex experience earned so far from work */\\n    workDexExpGain: number;\\n    /** Agi experience earned so far from work */\\n    workAgiExpGain: number;\\n    /** Cha experience earned so far from work */\\n    workChaExpGain: number;\\n    /** Reputation earned so far from work, if applicable */\\n    workRepGain: number;\\n    /** Money earned so far from work, if applicable */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SleeveWorkGains {\\n    /** Hacking exp gained from work */\\n    workHackExpGain: number;\\n    /** Strength exp gained from work */\\n    workStrExpGain: number;\\n    /** Defense exp gained from work, */\\n    workDefExpGain: number;\\n    /** Dexterity exp gained from work */\\n    workDexExpGain: number;\\n    /** Agility exp gained from work */\\n    workAgiExpGain: number;\\n    /** Charisma exp gained from work */\\n    workChaExpGain: number;\\n    /** Money gained from work */\\n    workMoneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface SourceFileLvl {\\n    /** The number of the source file */\\n    n: number;\\n    /** The level of the source file */\\n    lvl: number;\\n  }\\n  \\n  /**\\n   * Bladeburner current action.\\n   * @public\\n   */\\n  export interface BladeburnerCurAction {\\n    /** Type of Action */\\n    type: string;\\n    /** Name of Action */\\n    name: string;\\n  }\\n  \\n  /**\\n   * Gang general info.\\n   * @public\\n   */\\n  export interface GangGenInfo {\\n    /** Name of faction that the gang belongs to (\\\"Slum Snakes\\\", etc.) */\\n    faction: string;\\n    /** Indicating whether or not it's a hacking gang */\\n    isHacking: boolean;\\n    /** Money earned per game cycle */\\n    moneyGainRate: number;\\n    /** Gang's power for territory warfare */\\n    power: number;\\n    /** Gang's respect */\\n    respect: number;\\n    /** Respect earned per game cycle */\\n    respectGainRate: number;\\n    /** Amount of territory held */\\n    territory: number;\\n    /** Clash chance */\\n    territoryClashChance: number;\\n    /** Gang's wanted level */\\n    wantedLevel: number;\\n    /** Wanted level gained/lost per game cycle (negative for losses) */\\n    wantedLevelGainRate: number;\\n    /** Indicating if territory warfare is enabled */\\n    territoryWarfareEngaged: boolean;\\n    /** Number indicating the current wanted penalty */\\n    wantedPenalty: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfoObject {\\n    /** Gang power */\\n    power: number;\\n    /** Gang territory, in decimal form */\\n    territory: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangOtherInfo {\\n    \\\"Slum Snakes\\\": GangOtherInfoObject;\\n    Tetrads: GangOtherInfoObject;\\n    \\\"The Syndicate\\\": GangOtherInfoObject;\\n    \\\"The Dark Army\\\": GangOtherInfoObject;\\n    \\\"Speakers for the Dead\\\": GangOtherInfoObject;\\n    NiteSec: GangOtherInfoObject;\\n    \\\"The Black Hand\\\": GangOtherInfoObject;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member task.\\n   * @public\\n   */\\n  export interface GangTaskStats {\\n    /** Task name */\\n    name: string;\\n    /** Task Description */\\n    desc: string;\\n    /** Is a task of a hacking gang */\\n    isHacking: boolean;\\n    /** Is a task of a combat gang */\\n    isCombat: boolean;\\n    /** Base respect earned */\\n    baseRespect: number;\\n    /** Base wanted earned */\\n    baseWanted: number;\\n    /** Base money earned */\\n    baseMoney: number;\\n    /** Hacking skill impact on task scaling */\\n    hackWeight: number;\\n    /** Stength skill impact on task scaling */\\n    strWeight: number;\\n    /** Defense skill impact on task scaling */\\n    defWeight: number;\\n    /** Dexterity skill impact on task scaling */\\n    dexWeight: number;\\n    /** Agility skill impact on task scaling */\\n    agiWeight: number;\\n    /** Charisma skill impact on task scaling */\\n    chaWeight: number;\\n    /** Number representing the difficulty of the task */\\n    difficulty: number;\\n    /** Territory impact on task scaling */\\n    territory: GangTerritory;\\n  }\\n  \\n  /**\\n   * Object representing data representing a gang member equipment.\\n   * @public\\n   */\\n  export interface EquipmentStats {\\n    /** Strength multiplier */\\n    str?: number;\\n    /** Defense multiplier */\\n    def?: number;\\n    /** Dexterity multiplier */\\n    dex?: number;\\n    /** Agility multiplier */\\n    agi?: number;\\n    /** Charisma multiplier */\\n    cha?: number;\\n    /** Hacking multiplier */\\n    hack?: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangTerritory {\\n    /** Money gain impact on task scaling */\\n    money: number;\\n    /** Respect gain impact on task scaling */\\n    respect: number;\\n    /** Wanted gain impact on task scaling */\\n    wanted: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberInfo {\\n    name: string;\\n    task: string;\\n    earnedRespect: number;\\n    hack: number;\\n    str: number;\\n    def: number;\\n    dex: number;\\n    agi: number;\\n    cha: number;\\n  \\n    hack_exp: number;\\n    str_exp: number;\\n    def_exp: number;\\n    dex_exp: number;\\n    agi_exp: number;\\n    cha_exp: number;\\n  \\n    hack_mult: number;\\n    str_mult: number;\\n    def_mult: number;\\n    dex_mult: number;\\n    agi_mult: number;\\n    cha_mult: number;\\n  \\n    hack_asc_mult: number;\\n    str_asc_mult: number;\\n    def_asc_mult: number;\\n    dex_asc_mult: number;\\n    agi_asc_mult: number;\\n    cha_asc_mult: number;\\n  \\n    hack_asc_points: number;\\n    str_asc_points: number;\\n    def_asc_points: number;\\n    dex_asc_points: number;\\n    agi_asc_points: number;\\n    cha_asc_points: number;\\n  \\n    upgrades: string[];\\n    augmentations: string[];\\n  \\n    respectGain: number;\\n    wantedLevelGain: number;\\n    moneyGain: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface GangMemberAscension {\\n    /** Amount of respect lost from ascending */\\n    respect: number;\\n    /** Hacking multiplier gained from ascending */\\n    hack: number;\\n    /** Strength multiplier gained from ascending */\\n    str: number;\\n    /** Defense multiplier gained from ascending */\\n    def: number;\\n    /** Dexterity multiplier gained from ascending */\\n    dex: number;\\n    /** Agility multiplier gained from ascending */\\n    agi: number;\\n    /** Charisma multiplier gained from ascending */\\n    cha: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve stats.\\n   * @public\\n   */\\n  export interface SleeveSkills {\\n    /** Current shock of the sleeve [0-100] */\\n    shock: number;\\n    /** Current sync of the sleeve [0-100] */\\n    sync: number;\\n    /** Current hacking skill of the sleeve */\\n    hacking: number;\\n    /** Current strength of the sleeve */\\n    strength: number;\\n    /** Current defense of the sleeve */\\n    defense: number;\\n    /** Current dexterity of the sleeve */\\n    dexterity: number;\\n    /** Current agility of the sleeve */\\n    agility: number;\\n    /** Current charisma of the sleeve */\\n    charisma: number;\\n  }\\n  \\n  /**\\n   * Object representing sleeve information.\\n   * @public\\n   */\\n  export interface SleeveInformation {\\n    /** Location of the sleeve */\\n    city: string;\\n    /** Current hp of the sleeve */\\n    hp: number;\\n    /** Max hp of the sleeve */\\n    maxHp: number;\\n    /** Jobs available to the sleeve */\\n    jobs: string[];\\n    /** Job titles available to the sleeve */\\n    jobTitle: string[];\\n    /** Does this sleeve have access to the tor router */\\n    tor: boolean;\\n    /** Sleeve multipliers */\\n    mult: CharacterMult;\\n    /** Time spent on the current task in milliseconds */\\n    timeWorked: number;\\n    /** Earnings synchronized to other sleeves */\\n    earningsForSleeves: SleeveWorkGains;\\n    /** Earnings synchronized to the player */\\n    earningsForPlayer: SleeveWorkGains;\\n    /** Earnings for this sleeve */\\n    earningsForTask: SleeveWorkGains;\\n    /** Faction or company reputation gained for the current task */\\n    workRepGain: number;\\n  }\\n  \\n  /**\\n   * Object representing a sleeve current task.\\n   * @public\\n   */\\n  export interface SleeveTask {\\n    /** Task type */\\n    task: string;\\n    /** Crime currently attempting, if any */\\n    crime: string;\\n    /** Location of the task, if any */\\n    location: string;\\n    /** Stat being trained at the gym, if any */\\n    gymStatType: string;\\n    /** Faction work type being performed, if any */\\n    factionWorkType: string;\\n  }\\n  \\n  /**\\n   * Stock market API\\n   * @public\\n   */\\n  export interface TIX {\\n    /**\\n     * Returns an array of the symbols of the tradable stocks\\n     *\\n     * @remarks RAM cost: 2 GB\\n     * @returns Array of the symbols of the tradable stocks.\\n     */\\n    getSymbols(): string[];\\n  \\n    /**\\n     * Returns the price of a stock\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * The stock’s price is the average of its bid and ask price.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.stock.getPrice(\\\"FISG\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns The price of a stock.\\n     */\\n    getPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the ask price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The ask price of a stock.\\n     */\\n    getAskPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the bid price of that stock.\\n     * @remarks RAM cost: 2 GB\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns The bid price of a stock.\\n     */\\n    getBidPrice(sym: string): number;\\n  \\n    /**\\n     * Returns the player’s position in a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Returns an array of four elements that represents the player’s position in a stock.\\n     *\\n     * The first element is the returned array is the number of shares the player owns of\\n     * the stock in the Long position. The second element in the array is the average price\\n     * of the player’s shares in the Long position.\\n     *\\n     * The third element in the array is the number of shares the player owns of the stock\\n     * in the Short position. The fourth element in the array is the average price of the\\n     * player’s Short position.\\n     *\\n     * All elements in the returned array are numeric.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * var pos = stock.getPosition(\\\"ECP\\\");\\n     * var shares      = pos[0];\\n     * var avgPx       = pos[1];\\n     * var sharesShort = pos[2];\\n     * var avgPxShort  = pos[3];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * const [shares, avgPx, sharesShort, avgPxShort] = ns.stock.getPosition(\\\"ECP\\\");\\n     * ```\\n     * @param sym - Stock symbol.\\n     * @returns Array of four elements that represents the player’s position in a stock.\\n     */\\n    getPosition(sym: string): [number, number, number, number];\\n  \\n    /**\\n     * Returns the maximum number of shares of a stock.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * This is the maximum amount of the stock that can be purchased\\n     * in both the Long and Short positions combined.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Maximum number of shares that the stock has.\\n     */\\n    getMaxShares(sym: string): number;\\n  \\n    /**\\n     * Calculates cost of buying stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much it would cost to buy a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchase.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Cost to buy a given number of shares of a stock.\\n     */\\n    getPurchaseCost(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Calculate profit of selling stocks.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * Calculates and returns how much you would gain from selling a given number of shares of a stock.\\n     * This takes into account spread, large transactions influencing the price of the stock and commission fees.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell.\\n     * @param posType - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns Gain from selling a given number of shares of a stock.\\n     */\\n    getSaleGain(sym: string, shares: number, posType: string): number;\\n  \\n    /**\\n     * Buy stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase shares of a stock using a Market Order.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If this function successfully purchases the shares, it will return the stock price at which\\n     * each share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to purchased. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    buy(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell shares of a stock using a Market Order.\\n     *\\n     * If the specified number of shares in the function exceeds the amount that the player\\n     * actually owns, then this function will sell all owned shares. Remember that every\\n     * transaction on the stock exchange costs a certain commission fee.\\n     *\\n     * The net profit made from selling stocks with this function is reflected in the script’s\\n     * statistics. This net profit is calculated as:\\n     *\\n     *    shares * (sell_price - average_price_of_purchased_shares)\\n     *\\n     * If the sale is successful, this function will return the stock price at\\n     * which each share was sold. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sell(sym: string, shares: number): number;\\n  \\n    /**\\n     * Short stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to purchase a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the player does not have enough money to purchase the specified number of shares,\\n     * then no shares will be purchased. Remember that every transaction on the stock exchange\\n     * costs a certain commission fee.\\n     *\\n     * If the purchase is successful, this function will return the stock price at which each\\n     * share was purchased. Otherwise, it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to short. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was purchased, otherwise 0 if the shares weren't purchased.\\n     */\\n    short(sym: string, shares: number): number;\\n  \\n    /**\\n     * Sell short stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Attempts to sell a short position of a stock using a Market Order.\\n     *\\n     * The ability to short a stock is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * If the specified number of shares exceeds the amount that the player actually owns,\\n     * then this function will sell all owned shares. Remember that every transaction on\\n     * the stock exchange costs a certain commission fee.\\n     *\\n     * If the sale is successful, this function will return the stock price at which each\\n     * share was sold. Otherwise it will return 0.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares to sell. Must be positive. Will be rounded to nearest integer.\\n     * @returns The stock price at which each share was sold, otherwise 0 if the shares weren't sold.\\n     */\\n    sellShort(sym: string, shares: number): number;\\n  \\n    /**\\n     * Place order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Places an order on the stock market. This function only works for Limit and Stop Orders.\\n     *\\n     * The ability to place limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * Returns true if the order is successfully placed, and false otherwise.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     * @returns True if the order is successfully placed, and false otherwise.\\n     */\\n    placeOrder(sym: string, shares: number, price: number, type: string, pos: string): boolean;\\n  \\n    /**\\n     * Cancel order for stocks.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Cancels an oustanding Limit or Stop order on the stock market.\\n     *\\n     * The ability to use limit and stop orders is **not** immediately available to the player and\\n     * must be unlocked later on in the game.\\n     *\\n     * @param sym - Stock symbol.\\n     * @param shares - Number of shares for order. Must be positive. Will be rounded to nearest integer.\\n     * @param price - Execution price for the order.\\n     * @param type - Type of order.\\n     * @param pos - Specifies whether the order is a “Long” or “Short” position.\\n     */\\n    cancelOrder(sym: string, shares: number, price: number, type: string, pos: string): void;\\n  \\n    /**\\n     * Returns your order book for the stock market.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * This is an object containing information for all the Limit and Stop Orders you have in the stock market.\\n     * The object has the following structure:\\n     *\\n     * ```ts\\n     * {\\n     *  string1: [ // Array of orders for this stock\\n     *      {\\n     *          shares: Order quantity\\n     *          price: Order price\\n     *          type: Order type\\n     *          position: Either \\\"L\\\" or \\\"S\\\" for Long or Short position\\n     *      },\\n     *      {\\n     *          ...\\n     *      },\\n     *      ...\\n     *  ],\\n     *  string2: [ // Array of orders for this stock\\n     *      ...\\n     *  ],\\n     *  ...\\n     * }\\n     * ```\\n     * The “Order type” property can have one of the following four values: \\\"Limit Buy Order\\\", \\\"Limit Sell Order\\\", \\\"Stop Buy Order\\\", \\\"Stop Sell Order\\\".\\n     * Note that the order book will only contain information for stocks that you actually have orders in.\\n     *\\n     * @example\\n     * ```ts\\n     * \\\"If you do not have orders in Nova Medical (NVMD), then the returned object will not have a “NVMD” property.\\\"\\n     * {\\n     *  ECP: [\\n     *      {\\n     *          shares: 5,\\n     *          price: 100,000\\n     *          type: \\\"Stop Buy Order\\\",\\n     *          position: \\\"S\\\",\\n     *      },\\n     *      {\\n     *          shares: 25,\\n     *          price: 125,000\\n     *          type: \\\"Limit Sell Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     *  SYSC: [\\n     *      {\\n     *          shares: 100,\\n     *          price: 10,000\\n     *          type: \\\"Limit Buy Order\\\",\\n     *          position: \\\"L\\\",\\n     *      },\\n     *  ],\\n     * }\\n     * ```\\n     * @returns Object containing information for all the Limit and Stop Orders you have in the stock market.\\n     */\\n    getOrders(): StockOrder;\\n  \\n    /**\\n     * Returns the volatility of the specified stock.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * Volatility represents the maximum percentage by which a stock’s price can change every tick.\\n     * The volatility is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a volatility of 3%, then this function will return 0.03, NOT 3).\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Volatility of the specified stock.\\n     */\\n    getVolatility(sym: string): number;\\n  \\n    /**\\n     * Returns the probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     * @remarks\\n     * RAM cost: 2.5 GB\\n     * The probability is returned as a decimal value, NOT a percentage\\n     * (e.g. if a stock has a 60% chance of increasing, then this function will return 0.6, NOT 60).\\n     *\\n     * In other words, if this function returned 0.30 for a stock, then this means that the stock’s price has a\\n     * 30% chance of increasing and a 70% chance of decreasing during the next tick.\\n     *\\n     * In order to use this function, you must first purchase access to the Four Sigma (4S) Market Data TIX API.\\n     *\\n     * @param sym - Stock symbol.\\n     * @returns Probability that the specified stock’s price will increase (as opposed to decrease) during the next tick.\\n     */\\n    getForecast(sym: string): number;\\n  \\n    /**\\n     * Purchase 4S Market Data Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketData(): boolean;\\n  \\n    /**\\n     * Purchase 4S Market Data TIX API Access.\\n     * @remarks RAM cost: 2.5 GB\\n     * @returns True if you successfully purchased it or if you already have access, false otherwise.\\n     */\\n    purchase4SMarketDataTixApi(): boolean;\\n  }\\n  \\n  /**\\n   * Singularity API\\n   * @remarks\\n   * This API requires Source-File 4 level 1 to use. The RAM cost of all these functions is multiplied by 16/4/1 based on Source-File 4 levels.\\n   * @public\\n   */\\n  export interface Singularity {\\n    /**\\n     * Take university class.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start taking a course at a university.\\n     * If you are already in the middle of some “working” action (such as working at a\\n     * company, for a faction, or on a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these universities and classes are the same as\\n     * if you were to manually visit and take these classes.\\n     *\\n     * @param universityName - Name of university. You must be in the correct city for whatever university you specify.\\n     * @param courseName - Name of course.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    universityCourse(universityName: string, courseName: string): boolean;\\n  \\n    /**\\n     * Workout at the gym.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n  \\n     * This function will automatically set you to start working out at a gym to train\\n     * a particular stat. If you are already in the middle of some “working” action\\n     * (such as working at a company, for a faction, or on a program), then running\\n     * this function will automatically cancel that action and give you your earnings.\\n     *\\n     * The cost and experience gains for all of these gyms are the same as if you were\\n     * to manually visit these gyms and train\\n     *\\n     * @param gymName - Name of gym. You must be in the correct city for whatever gym you specify.\\n     * @param stat - The stat you want to train.\\n     * @returns True if actions is successfully started, false otherwise.\\n     */\\n    gymWorkout(gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Travel to another city.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows the player to travel to any city. The cost for using this\\n     * function is the same as the cost for traveling through the Travel Agency.\\n     *\\n     * @param city - City to travel to.\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    travelToCity(city: string): boolean;\\n  \\n    /**\\n     * Purchase the TOR router.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase a TOR router. The cost for\\n     * purchasing a TOR router using this function is the same as if you were to\\n     * manually purchase one.\\n     *\\n     * @returns True if actions is successful, false otherwise.\\n     */\\n    purchaseTor(): boolean;\\n  \\n    /**\\n     * Purchase a program from the dark web.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * This function allows you to automatically purchase programs. You MUST have a\\n     * TOR router in order to use this function. The cost of purchasing programs\\n     * using this function is the same as if you were purchasing them through the Dark\\n     * Web using the Terminal buy command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1\\n     * purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2\\n     * ns.purchaseProgram(\\\"brutessh.exe\\\");\\n     * ```\\n     * @param programName - Name of program to purchase.\\n     * @returns True if the specified program is purchased, and false otherwise.\\n     */\\n    purchaseProgram(programName: string): boolean;\\n  \\n    /**\\n     * Check if the player is busy.\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns a boolean indicating whether or not the player is currently performing an\\n     * ‘action’. These actions include working for a company/faction, studying at a univeristy,\\n     * working out at a gym, creating a program, committing a crime, or carrying out a Hacking Mission.\\n     *\\n     * @returns True if the player is currently performing an ‘action’, false otherwise.\\n     */\\n    isBusy(): boolean;\\n  \\n    /**\\n     * Stop the current action.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to end whatever ‘action’ the player is currently performing.\\n     * The player will receive whatever money/experience/etc. he has earned from that action.\\n     *\\n     * The actions that can be stopped with this function are:\\n     *\\n     * * Studying at a university\\n     * * Working for a company/faction\\n     * * Creating a program\\n     * * Committing a Crime\\n     *\\n     * This function will return true if the player’s action was ended.\\n     * It will return false if the player was not performing an action when this function was called.\\n     *\\n     * @returns True if the player’s action was ended, false if the player was not performing an action.\\n     */\\n    stopAction(): boolean;\\n  \\n    /**\\n     * Upgrade home computer RAM.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of RAM on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer RAM is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeRam(): boolean;\\n  \\n    /**\\n     * Upgrade home computer cores.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will upgrade amount of cores on the player’s home computer. The cost is\\n     * the same as if you were to do it manually.\\n     *\\n     * This function will return true if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     *\\n     * @returns True if the player’s home computer cores is successfully upgraded, and false otherwise.\\n     */\\n    upgradeHomeCores(): boolean;\\n  \\n    /**\\n     * Get the price of upgrading home RAM.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer RAM.\\n     *\\n     * @returns Cost of upgrading the player’s home computer RAM.\\n     */\\n    getUpgradeHomeRamCost(): number;\\n  \\n    /**\\n     * Get the price of upgrading home cores.\\n     * @remarks\\n     * RAM cost: 1.5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the cost of upgrading the player’s home computer cores.\\n     *\\n     * @returns Cost of upgrading the player’s home computer cores.\\n     */\\n    getUpgradeHomeCoresCost(): number;\\n  \\n    /**\\n     * Work for a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working at the company\\n     * at which you are employed. If you are already in the middle of some “working”\\n     * action (such as working for a faction, training at a gym, or creating a program),\\n     * then running this function will automatically cancel that action and give you\\n     * your earnings.\\n     *\\n     * This function will return true if the player starts working, and false otherwise.\\n     *\\n     * Note that when you are working for a company, you will not actually receive your earnings (reputation, money, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    workForCompany();\\n     *    sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 company reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getCompanyRep(COMPANY HERE) < VALUE) {\\n     *    ns.workForCompany();\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your company reputation will be updated every minute.\\n     * ```\\n     * @param companyName - Name of company to work for. Must be an exact match. Optional. If not specified, this argument defaults to the last job that you worked\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForCompany(companyName?: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Apply for a job at a company.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically try to apply to the specified company\\n     * for a position in the specified field. This function can also be used to\\n     * apply for promotions by specifying the company and field you are already\\n     * employed at.\\n     *\\n     * This function will return true if you successfully get a job/promotion,\\n     * and false otherwise. Note that if you are trying to use this function to\\n     * apply for a promotion and you don’t get one, it will return false.\\n     *\\n     * @param companyName - Name of company to apply to.\\n     * @param field - Field to which you want to apply.\\n     * @returns True if the player successfully get a job/promotion, and false otherwise.\\n     */\\n    applyToCompany(companyName: string, field: string): boolean;\\n  \\n    /**\\n     * Get company reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of reputation you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of reputation you have at the specified company.\\n     */\\n    getCompanyRep(companyName: string): number;\\n  \\n    /**\\n     * Get company favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you have at the specified company.\\n     * If the company passed in as an argument is invalid, -1 will be returned.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you have at the specified company.\\n     */\\n    getCompanyFavor(companyName: string): number;\\n  \\n    /**\\n     * Get company favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function will return the amount of favor you will gain for the specified\\n     * company when you reset by installing Augmentations.\\n     *\\n     * @param companyName - Name of the company.\\n     * @returns Amount of favor you gain at the specified company when you reset by installing Augmentations.\\n     */\\n    getCompanyFavorGain(companyName: string): number;\\n  \\n    /**\\n     * List all current faction invitations.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array with the name of all Factions you currently have oustanding invitations from.\\n     *\\n     * @returns Array with the name of all Factions you currently have oustanding invitations from.\\n     */\\n    checkFactionInvitations(): string[];\\n  \\n    /**\\n     * Join a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically accept an invitation from a faction and join it.\\n     *\\n     * @param faction - Name of faction to join.\\n     * @returns True if player joined the faction, and false otherwise.\\n     */\\n    joinFaction(faction: string): boolean;\\n  \\n    /**\\n     * Work for a faction.\\n     * @remarks\\n     * RAM cost: 3 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working for the specified faction.\\n     * Obviously, you must be a member of the faction or else this function will fail. If\\n     * you are already in the middle of some “working” action (such as working for a company,\\n     * training at a gym, or creating a program), then running this function will automatically\\n     * cancel that action and give you your earnings.\\n     *\\n     * This function will return true if you successfully start working for the specified faction, and false otherwise.\\n     *\\n     * Note that when you are working for a faction, you will not actually receive your earnings (reputation, experience) until you FINISH the action.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (getFactionRep(FACTION NAME) < VALUE) {\\n     *    workForFaction(FACNAME, WORKTYPE);\\n     *    sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //If you only want to work until you get 100,000 faction reputation. One small hack to get around this is to continuously restart the action to receive your earnings:\\n     * while (ns.getFactionRep(FACTION NAME) < VALUE) {\\n     *    ns.workForFaction(FACNAME, WORKTYPE);\\n     *    await ns.sleep(60000);\\n     * }\\n     * //This way, your faction reputation will be updated every minute.\\n     * ```\\n     * @param faction - Name of faction to work for.\\n     * @param workType - Type of work to perform for the faction.\\n     * @param focus - Acquire player focus on this work operation. Optional. Defaults to true.\\n     * @returns True if the player starts working, and false otherwise.\\n     */\\n    workForFaction(faction: string, workType: string, focus?: boolean): boolean;\\n  \\n    /**\\n     * Get faction reputation.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of reputation you have for the specified faction.\\n     *\\n     * @param faction - Name of faction to work for.\\n     * @returns Amount of reputation you have for the specified faction.\\n     */\\n    getFactionRep(faction: string): number;\\n  \\n    /**\\n     * Get faction favor.\\n     * @remarks\\n     * RAM cost: 1 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you have for the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you have for the specified faction.\\n     */\\n    getFactionFavor(faction: string): number;\\n  \\n    /**\\n     * Get faction favor gain.\\n     * @remarks\\n     * RAM cost: 0.75 GB * 16/4/1\\n     *\\n     *\\n     * This function returns the amount of favor you will gain for the specified\\n     * faction when you reset by installing Augmentations.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Amount of favor you will gain for the specified faction when you reset by installing Augmentations.\\n     */\\n    getFactionFavorGain(faction: string): number;\\n  \\n    /**\\n     * Donate to a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Attempts to donate money to the specified faction in exchange for reputation.\\n     * Returns true if you successfully donate the money, and false otherwise.\\n     *\\n     * @param faction - Name of faction to donate to.\\n     * @param amount - Amount of money to donate.\\n     * @returns True if the money was donated, and false otherwise.\\n     */\\n    donateToFaction(faction: string, amount: number): boolean;\\n  \\n    /**\\n     * Create a program.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically set you to start working on creating the\\n     * specified program. If you are already in the middle of some “working” action\\n     * (such as working for a company, training at a gym, or taking a course), then\\n     * running this function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns true if you successfully start working on the specified program, and false otherwise.\\n     *\\n     * Note that creating a program using this function has the same hacking level requirements as it normally would. These level requirements are:\\n     * * BruteSSH.exe: 50\\n     * * FTPCrack.exe: 100\\n     * * relaySMTP.exe: 250\\n     * * HTTPWorm.exe: 500\\n     * * SQLInject.exe: 750\\n     * * DeepscanV1.exe: 75\\n     * * DeepscanV2.exe: 400\\n     * * ServerProfiler.exe: 75\\n     * * AutoLink.exe: 25\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.createProgram(“relaysmtp.exe”);\\n     * ```\\n     * @param program - Name of program to create.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    createProgram(program: string): boolean;\\n  \\n    /**\\n     * Commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function is used to automatically attempt to commit crimes.\\n     * If you are already in the middle of some ‘working’ action (such\\n     * as working for a company or training at a gym), then running this\\n     * function will automatically cancel that action and give you your\\n     * earnings.\\n     *\\n     * This function returns the number of milliseconds it takes to attempt the\\n     * specified crime (e.g It takes 60 seconds to attempt the ‘Rob Store’ crime,\\n     * so running `commitCrime('rob store')` will return 60,000).\\n     *\\n     * Warning: I do not recommend using the time returned from this function to try\\n     * and schedule your crime attempts. Instead, I would use the isBusy Singularity\\n     * function to check whether you have finished attempting a crime. This is because\\n     * although the game sets a certain crime to be X amount of seconds, there is no\\n     * guarantee that your browser will follow that time limit.\\n     *\\n     * @param crime - Name of crime to attempt.\\n     * @returns True if you successfully start working on the specified program, and false otherwise.\\n     */\\n    commitCrime(crime: string): number;\\n  \\n    /**\\n     * Get chance to successfully commit a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns your chance of success at commiting the specified crime.\\n     *\\n     * @param crime - Name of crime.\\n     * @returns Chance of success at commiting the specified crime.\\n     */\\n    getCrimeChance(crime: string): number;\\n  \\n    /**\\n     * Get stats related to a crime.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns the stats of the crime.\\n     *\\n     * @param crime - Name of crime. Not case-sensitive\\n     * @returns The stats of the crime.\\n     */\\n    getCrimeStats(crime: string): CrimeStats;\\n  \\n    /**\\n     * Get a list of owned augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array containing the names (as strings) of all Augmentations you have.\\n     *\\n     * @param purchased - Specifies whether the returned array should include Augmentations you have purchased but not yet installed. By default, this argument is false which means that the return value will NOT have the purchased Augmentations.\\n     * @returns Array containing the names (as strings) of all Augmentations you have.\\n     */\\n    getOwnedAugmentations(purchased?: boolean): string[];\\n  \\n    /**\\n     * Get a list of augmentation available from a faction.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Returns an array containing the names (as strings) of all Augmentations\\n     * that are available from the specified faction.\\n     *\\n     * @param faction - Name of faction.\\n     * @returns Array containing the names of all Augmentations.\\n     */\\n    getAugmentationsFromFaction(faction: string): string[];\\n  \\n    /**\\n     * Get the pre-requisite of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     * If there are no prerequisites, a blank array is returned.\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with the names of the prerequisite Augmentation(s) for the specified Augmentation.\\n     */\\n    getAugmentationPrereq(augName: string): string[];\\n  \\n    /**\\n     * Get the price and reputation of an augmentation.\\n     * @deprecated use getAugmentationPrice getAugmentationRepCost\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns an array with two elements that gives the cost for\\n     * the specified Augmentation. The first element in the returned array is the\\n     * reputation requirement of the Augmentation, and the second element is the\\n     * money cost.\\n     *\\n     * If an invalid Augmentation name is passed in for the augName argument, this\\n     * function will return the array [-1, -1].\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Array with first element as a reputation requirement and second element as the money cost.\\n     */\\n    getAugmentationCost(augName: string): [number, number];\\n  \\n    /**\\n     * Get price of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Price of the augmentation.\\n     */\\n    getAugmentationPrice(augName: string): number;\\n  \\n    /**\\n     * Get reputation requirement of an augmentation.\\n     * @remarks\\n     * RAM cost: 2.5 GB * 16/4/1\\n     *\\n     *\\n     * @param augName - Name of Augmentation.\\n     * @returns Reputation requirement of the augmentation.\\n     */\\n    getAugmentationRepReq(augName: string): number;\\n  \\n    /**\\n     * Purchase an augmentation\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will try to purchase the specified Augmentation through the given Faction.\\n     *\\n     * This function will return true if the Augmentation is successfully purchased, and false otherwise.\\n     *\\n     * @param faction - Name of faction to purchase Augmentation from.\\n     * @param augmentation - Name of Augmentation to purchase.\\n     * @returns True if the Augmentation is successfully purchased, and false otherwise.\\n     */\\n    purchaseAugmentation(faction: string, augmentation: string): boolean;\\n  \\n    /**\\n     * Get the stats of an augmentation.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function returns augmentation stats.\\n     *\\n     * @param name - Name of Augmentation. CASE-SENSITIVE.\\n     * @returns Augmentation stats.\\n     */\\n    getAugmentationStats(name: string): AugmentationStats;\\n  \\n    /**\\n     * Install your purchased augmentations.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will automatically install your Augmentations, resetting the game as usual.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    installAugmentations(cbScript?: string): void;\\n  \\n    /**\\n     * Returns an object with the Player’s stats.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @example\\n     * ```ts\\n     * res = getStats();\\n     * print('My charisma level is: ' + res.charisma);\\n     * ```\\n     * @returns Object with the Player’s stats.\\n     */\\n    getStats(): PlayerSkills;\\n  \\n    /**\\n     * Returns an object with various information about your character.\\n     * @deprecated use getPlayer\\n     *\\n     * @remarks\\n     * RAM cost: 0.5 GB * 16/4/1\\n     *\\n     *\\n     * @returns Object with various information about your character.\\n     */\\n    getCharacterInformation(): CharacterInfo;\\n  \\n    /**\\n     * Hospitalize the player.\\n     * @remarks\\n     * RAM cost: 0.25 GB * 16/4/1\\n     *\\n     *\\n     * @returns The cost of the hospitalization.\\n     */\\n    hospitalize(): number;\\n  \\n    /**\\n     * Soft reset the game.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * This function will perform a reset even if you don’t have any augmentation installed.\\n     *\\n     * @param cbScript - This is a script that will automatically be run after Augmentations are installed (after the reset). This script will be run with no arguments and 1 thread. It must be located on your home computer.\\n     */\\n    softReset(cbScript: string): void;\\n  \\n    /**\\n     * Go to a location.\\n     * @remarks\\n     * RAM cost: 5 GB * 16/4/1\\n     *\\n     *\\n     * Move the player to a specific location.\\n     *\\n     * @param locationName - Name of the location.\\n     * @returns True if the player was moved there, false otherwise.\\n     */\\n    goToLocation(locationName: string): boolean;\\n  \\n    /**\\n     * Get the current server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Name of the current server.\\n     */\\n    getCurrentServer(): string;\\n  \\n    /**\\n     * Connect to a server.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * Run the connect HOSTNAME command in the terminal. Can only connect to neighbors.\\n     *\\n     * @returns True if the connect command was successful, false otherwise.\\n     */\\n    connect(hostname: string): boolean;\\n  \\n    /**\\n     * Run the hack command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Amount of money stolen by manual hacking.\\n     */\\n    manualHack(): Promise<number>;\\n  \\n    /**\\n     * Run the backdoor command in the terminal.\\n     * @remarks\\n     * RAM cost: 2 GB * 16/4/1\\n     *\\n     *\\n     * @returns Promise waiting for the installation to finish.\\n     */\\n    installBackdoor(): Promise<void>;\\n  \\n    /**\\n     * Check if the player is focused.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     *\\n     * @returns True if the player is focused.\\n     */\\n    isFocused(): boolean;\\n  \\n    /**\\n     * Set the players focus.\\n     * @remarks\\n     * RAM cost: 0.1 GB * 16/4/1\\n     *\\n     * @returns True if the focus was changed.\\n     */\\n    setFocus(focus: boolean): boolean;\\n  }\\n  \\n  /**\\n   * Hacknet API\\n   * @remarks\\n   * Not all these functions are immediately available.\\n   * @public\\n   */\\n  export interface Hacknet {\\n    /**\\n     * Get the number of hacknet nodes you own.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the number of Hacknet Nodes you own.\\n     *\\n     * @returns number of hacknet nodes.\\n     */\\n    numNodes(): number;\\n  \\n    /**\\n     * Get the maximum number of hacknet nodes.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @returns maximum number of hacknet nodes.\\n     */\\n    maxNumNodes(): number;\\n  \\n    /**\\n     * Purchase a new hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Purchases a new Hacknet Node. Returns a number with the index of the\\n     * Hacknet Node. This index is equivalent to the number at the end of\\n     * the Hacknet Node’s name (e.g The Hacknet Node named `hacknet-node-4`\\n     * will have an index of 4).\\n     *\\n     * If the player cannot afford to purchase a new Hacknet Node then the function will return -1.\\n     *\\n     * @returns The index of the Hacknet Node or if the player cannot afford to purchase a new Hacknet Node the function will return -1.\\n     */\\n    purchaseNode(): number;\\n  \\n    /**\\n     * Get the price of the next hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of purchasing a new Hacknet Node.\\n     *\\n     * @returns Cost of purchasing a new Hacknet Node.\\n     */\\n    getPurchaseNodeCost(): number;\\n  \\n    /**\\n     * Get the stats of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns an object containing a variety of stats about the specified Hacknet Node.\\n     *\\n     * Note that for Hacknet Nodes, production refers to the amount of money the node generates.\\n     * For Hacknet Servers (the upgraded version of Hacknet Nodes), production refers to the\\n     * amount of hashes the node generates.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node\\n     * @returns Object containing a variety of stats about the specified Hacknet Node.\\n     */\\n    getNodeStats(index: number): NodeStats;\\n  \\n    /**\\n     * Upgrade the level of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the level of the specified Hacknet Node by n.\\n     *\\n     * Returns true if the Hacknet Node’s level is successfully upgraded by n\\n     * or if it is upgraded by some positive amount and the Node reaches its max level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s level is successfully upgraded, false otherwise.\\n     */\\n    upgradeLevel(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the RAM of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to upgrade the specified Hacknet Node’s RAM n times.\\n     * Note that each upgrade doubles the Node’s RAM.\\n     * So this is equivalent to multiplying the Node’s RAM by 2 n.\\n     *\\n     * Returns true if the Hacknet Node’s RAM is successfully upgraded n times\\n     * or if it is upgraded some positive number of times and the Node reaches it max RAM.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s ram is successfully upgraded, false otherwise.\\n     */\\n    upgradeRam(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the core of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Tries to purchase n cores for the specified Hacknet Node.\\n     *\\n     * Returns true if it successfully purchases n cores for the Hacknet Node\\n     * or if it purchases some positive amount and the Node reaches its max number of cores.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cores to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCore(index: number, n: number): boolean;\\n  \\n    /**\\n     * Upgrade the cache of a hacknet node.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Tries to upgrade the specified Hacknet Server’s cache n times.\\n     *\\n     * Returns true if it successfully upgrades the Server’s cache n times,\\n     * or if it purchases some positive amount and the Server reaches its max cache level.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of cache levels to purchase. Must be positive. Rounded to nearest integer.\\n     * @returns True if the Hacknet Node’s cores are successfully purchased, false otherwise.\\n     */\\n    upgradeCache(index: number, n: number): boolean;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node levels.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the specified Hacknet Node by n levels.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of levels to upgrade. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node.\\n     */\\n    getLevelUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node RAM.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the RAM of the specified Hacknet Node n times.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade RAM. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's ram.\\n     */\\n    getRamUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cores.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the cost of upgrading the number of cores of the specified Hacknet Node by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cores. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's number of cores.\\n     */\\n    getCoreUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Calculate the cost of upgrading hacknet node cache.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the cost of upgrading the cache level of the specified Hacknet Server by n.\\n     *\\n     * If an invalid value for n is provided, then this function returns 0.\\n     * If the specified Hacknet Node is already at max level, then Infinity is returned.\\n     *\\n     * @param index - Index/Identifier of Hacknet Node.\\n     * @param n - Number of times to upgrade cache. Must be positive. Rounded to nearest integer.\\n     * @returns Cost of upgrading the specified Hacknet Node's cache.\\n     */\\n    getCacheUpgradeCost(index: number, n: number): number;\\n  \\n    /**\\n     * Get the total number of hashes stored.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you have.\\n     *\\n     * @returns Number of hashes you have.\\n     */\\n    numHashes(): number;\\n  \\n    /**\\n     * Get the maximum number of hashes you can store.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes you can store.\\n     *\\n     * @returns Number of hashes you can store.\\n     */\\n    hashCapacity(): number;\\n  \\n    /**\\n     * Get the cost of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the number of hashes required for the specified upgrade. The name of the upgrade must be an exact match.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (hacknet.numHashes() > hacknet.hashCost(upgradeName)) {\\n     *    hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgradeName = \\\"Sell for Corporation Funds\\\";\\n     * if (ns.hacknet.numHashes() > ns.hacknet.hashCost(upgradeName)) {\\n     *    ns.hacknet.spendHashes(upgName);\\n     * }\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @returns Number of hashes required for the specified upgrade.\\n     */\\n    hashCost(upgName: string): number;\\n  \\n    /**\\n     * Purchase a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Spend the hashes generated by your Hacknet Servers on an upgrade.\\n     * Returns a boolean value - true if the upgrade is successfully purchased, and false otherwise.\\n     *\\n     * The name of the upgrade must be an exact match.\\n     * The `upgTarget` argument is used for upgrades such as `Reduce Minimum Security`, which applies to a specific server.\\n     * In this case, the `upgTarget` argument must be the hostname of the server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * NS2:\\n     * ns.hacknet.spendHashes(\\\"Sell for Corporation Funds\\\");\\n     * ns.hacknet.spendHashes(\\\"Increase Maximum Money\\\", \\\"foodnstuff\\\");\\n     * ```\\n     * @param upgName - Name of the upgrade of Hacknet Node.\\n     * @param upgTarget - Object to which upgrade applies. Required for certain upgrades.\\n     * @returns True if the upgrade is successfully purchased, and false otherwise..\\n     */\\n    spendHashes(upgName: string, upgTarget?: string): boolean;\\n  \\n    /**\\n     * Get the list of hash upgrades\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * Returns the list of all available hash upgrades that can be used in the spendHashes function.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var upgrades = hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const upgrades = ns.hacknet.getHashUpgrades(); // [\\\"Sell for Money\\\",\\\"Sell for Corporation Funds\\\",...]\\n     * ```\\n     * @returns An array containing the available upgrades\\n     */\\n    getHashUpgrades(): string[];\\n  \\n    /**\\n     * Get the level of a hash upgrade.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Level of the upgrade.\\n     */\\n    getHashUpgradeLevel(upgName: string): number;\\n  \\n    /**\\n     * Get the multipler to study.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getStudyMult(): number;\\n  \\n    /**\\n     * Get the multipler to training.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is only applicable for Hacknet Servers (the upgraded version of a Hacknet Node).\\n     *\\n     * @returns Multiplier.\\n     */\\n    getTrainingMult(): number;\\n  }\\n  \\n  /**\\n   * Bladeburner API\\n   * @remarks\\n   * You have to be employed in the Bladeburner division and be in BitNode-7\\n   * or have Source-File 7 in order to use this API.\\n   * @public\\n   */\\n  export interface Bladeburner {\\n    /**\\n     * List all contracts.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner contracts.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner contracts.\\n     */\\n    getContractNames(): string[];\\n  \\n    /**\\n     * List all operations.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner operations.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner operations.\\n     */\\n    getOperationNames(): string[];\\n  \\n    /**\\n     * List all black ops.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all Bladeburner Black Ops.\\n     *\\n     * @returns Array of strings containing the names of all Bladeburner Black Ops.\\n     */\\n    getBlackOpNames(): string[];\\n  \\n    /**\\n     * List all general actions.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner actions.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner actions.\\n     */\\n    getGeneralActionNames(): string[];\\n  \\n    /**\\n     * List all skills.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     *\\n     * Returns an array of strings containing the names of all general Bladeburner skills.\\n     *\\n     * @returns Array of strings containing the names of all general Bladeburner skills.\\n     */\\n    getSkillNames(): string[];\\n  \\n    /**\\n     * Start an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to start the specified Bladeburner action.\\n     * Returns true if the action was started successfully, and false otherwise.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match\\n     * @returns True if the action was started successfully, and false otherwise.\\n     */\\n    startAction(type: string, name: string): boolean;\\n  \\n    /**\\n     * Stop current action.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Stops the current Bladeburner action.\\n     *\\n     */\\n    stopBladeburnerAction(): void;\\n  \\n    /**\\n     * Get current action.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns an object that represents the player’s current Bladeburner action.\\n     * If the player is not performing an action, the function will return an object with the ‘type’ property set to “Idle”.\\n     *\\n     * @returns Object that represents the player’s current Bladeburner action.\\n     */\\n    getCurrentAction(): BladeburnerCurAction;\\n  \\n    /**\\n     * Get the time to complete an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of seconds it takes to complete the specified action\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of milliseconds it takes to complete the specified action.\\n     */\\n    getActionTime(type: string, name: string): number;\\n  \\n    /**\\n     * Get estimate success chance of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated success chance for the specified action.\\n     * This chance is returned as a decimal value, NOT a percentage\\n     * (e.g. if you have an estimated success chance of 80%, then this function will return 0.80, NOT 80).\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Estimated success chance for the specified action.\\n     */\\n    getActionEstimatedSuccessChance(type: string, name: string): [number, number];\\n  \\n    /**\\n     * Get the reputation gain of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the average Bladeburner reputation gain for successfully\\n     * completing the specified action.\\n     * Note that this value is an ‘average’ and the real reputation gain may vary slightly from this value.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Optional action level at which to calculate the gain\\n     * @returns Average Bladeburner reputation gain for successfully completing the specified action.\\n     */\\n    getActionRepGain(type: string, name: string, level: number): number;\\n  \\n    /**\\n     * Get action count remaining.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the remaining count of the specified action.\\n     *\\n     * Note that this is meant to be used for Contracts and Operations.\\n     * This function will return ‘Infinity’ for actions such as Training and Field Analysis.\\n     * This function will return 1 for BlackOps not yet completed regardless of wether\\n     * the player has the required rank to attempt the mission or not.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Remaining count of the specified action.\\n     */\\n    getActionCountRemaining(type: string, name: string): number;\\n  \\n    /**\\n     * Get the maximum level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the maximum level for this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Maximum level of the specified action.\\n     */\\n    getActionMaxLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get the current level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the current level of this action.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Current level of the specified action.\\n     */\\n    getActionCurrentLevel(type: string, name: string): number;\\n  \\n    /**\\n     * Get wether an action is set to autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action is currently set to autolevel.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns True if the action is set to autolevel, and false otherwise.\\n     */\\n    getActionAutolevel(type: string, name: string): boolean;\\n  \\n    /**\\n     * Set an action autolevel.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Enable/disable autoleveling for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param autoLevel - Whether or not to autolevel this action\\n     */\\n    setActionAutolevel(type: string, name: string, autoLevel: boolean): void;\\n  \\n    /**\\n     * Set the level of an action.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the level for the specified action.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param level - Level to set this action to.\\n     */\\n    setActionLevel(type: string, name: string, level: number): void;\\n  \\n    /**\\n     * Get player bladeburner rank.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the player’s Bladeburner Rank.\\n     *\\n     * @returns Player’s Bladeburner Rank.\\n     */\\n    getRank(): number;\\n  \\n    /**\\n     * Get black op required rank.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Returns the rank required to complete this BlackOp.\\n     *\\n     * Returns -1 if an invalid action is specified.\\n     *\\n     * @param name - Name of BlackOp. Must be an exact match.\\n     * @returns Rank required to complete this BlackOp.\\n     */\\n    getBlackOpRank(name: string): number;\\n  \\n    /**\\n     * Get bladeburner skill points.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner skill points you have.\\n     *\\n     * @returns Number of Bladeburner skill points you have.\\n     */\\n    getSkillPoints(): number;\\n  \\n    /**\\n     * Get skill level.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns your level in the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Level in the specified skill.\\n     */\\n    getSkillLevel(name: string): number;\\n  \\n    /**\\n     * Get cost to upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * This function returns the number of skill points needed to upgrade the specified skill.\\n     *\\n     * The function returns -1 if an invalid skill name is passed in.\\n     *\\n     * @param skillName - Name of skill. Case-sensitive and must be an exact match\\n     * @returns Number of skill points needed to upgrade the specified skill.\\n     */\\n    getSkillUpgradeCost(name: string): number;\\n  \\n    /**\\n     * Upgrade skill.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to upgrade the specified Bladeburner skill.\\n     *\\n     * Returns true if the skill is successfully upgraded, and false otherwise.\\n     *\\n     * @param skillName - Name of skill to be upgraded. Case-sensitive and must be an exact match\\n     * @returns true if the skill is successfully upgraded, and false otherwise.\\n     */\\n    upgradeSkill(name: string): boolean;\\n  \\n    /**\\n     * Get team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the number of Bladeburner team members you have assigned to the specified action.\\n     *\\n     * Setting a team is only applicable for Operations and BlackOps. This function will return 0 for other action types.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @returns Number of Bladeburner team members that were assigned to the specified action.\\n     */\\n    getTeamSize(type: string, name: string): number;\\n  \\n    /**\\n     * Set team size.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Set the team size for the specified Bladeburner action.\\n     *\\n     * Returns the team size that was set, or -1 if the function failed.\\n     *\\n     * @param type - Type of action.\\n     * @param name - Name of action. Must be an exact match.\\n     * @param size - Number of team members to set. Will be converted using Math.round().\\n     * @returns Number of Bladeburner team members you assigned to the specified action.\\n     */\\n    setTeamSize(type: string, name: string, size: number): number;\\n  \\n    /**\\n     * Get estimated population in city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoids in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Estimated number of Synthoids in the specified city.\\n     */\\n    getCityEstimatedPopulation(name: string): number;\\n  \\n    /**\\n     * Get number of communities in a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the estimated number of Synthoid communities in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Number of Synthoids communities in the specified city.\\n     */\\n    getCityCommunities(name: string): number;\\n  \\n    /**\\n     * Get chaos of a city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chaos in the specified city,\\n     * or -1 if an invalid city was specified.\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns Chaos in the specified city.\\n     */\\n    getCityChaos(name: string): number;\\n  \\n    /**\\n     * Get current city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the city that the player is currently in (for Bladeburner).\\n     *\\n     * @returns City that the player is currently in (for Bladeburner).\\n     */\\n    getCity(): string;\\n  \\n    /**\\n     * Travel to another city in bladeburner.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to switch to the specified city (for Bladeburner only).\\n     *\\n     * Returns true if successful, and false otherwise\\n     *\\n     * @param cityName - Name of city. Case-sensitive\\n     * @returns true if successful, and false otherwise\\n     */\\n    switchCity(name: string): boolean;\\n  \\n    /**\\n     * Get bladeburner stamina.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Returns an array with two elements:\\n     * * [Current stamina, Max stamina]\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * function getStaminaPercentage() {\\n     *    var res = bladeburner.getStamina();\\n     *    return res[0] / res[1];\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * function getStaminaPercentage() {\\n     *    const [current, max] = ns.bladeburner.getStamina();\\n     *    return current / max;\\n     * }\\n     * ```\\n     * @returns Array containing current stamina and max stamina.\\n     */\\n    getStamina(): [number, number];\\n  \\n    /**\\n     * Join the bladeburner faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     * Attempts to join the Bladeburner faction.\\n     *\\n     * Returns true if you successfully join the Bladeburner faction, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner faction, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerFaction(): boolean;\\n  \\n    /**\\n     * Join the bladeburner division.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempts to join the Bladeburner division.\\n     *\\n     * Returns true if you successfully join the Bladeburner division, or if you are already a member.\\n     *\\n     * Returns false otherwise.\\n     *\\n     * @returns True if you successfully join the Bladeburner division, or if you are already a member, false otherwise.\\n     */\\n    joinBladeburnerDivision(): boolean;\\n  \\n    /**\\n     * Get bladeburner bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Bladeburner mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 5x the normal speed.\\n     * For example, if an action takes 30 seconds to complete but you’ve accumulated over\\n     * 30 seconds in bonus time, then the action will only take 6 seconds in real life to complete.\\n     *\\n     * @returns Amount of accumulated “bonus time” (milliseconds) for the Bladeburner mechanic.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Coding Contract API\\n   * @public\\n   */\\n  export interface CodingContract {\\n    /**\\n     * Attemps a coding contract.\\n     * @remarks\\n     * RAM cost: 10 GB\\n     *\\n     * Attempts to solve the Coding Contract with the provided solution.\\n     *\\n     * @param answer - Solution for the contract.\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns True if the solution was correct, false otherwise. If the returnReward option is configured, then the function will instead return a string. If the contract is successfully solved, the string will contain a description of the contract’s reward. Otherwise, it will be an empty string.\\n     */\\n    attempt(answer: string[] | number, filename: string, host?: string, opts?: CodingAttemptOptions): boolean | string;\\n  \\n    /**\\n     * Get the type of a coding contract.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns a name describing the type of problem posed by the Coding Contract.\\n     * (e.g. Find Largest Prime Factor, Total Ways to Sum, etc.)\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Name describing the type of problem posed by the Coding Contract.\\n     */\\n    getContractType(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the description.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the full text description for the problem posed by the Coding Contract.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns Contract’s text description.\\n     */\\n    getDescription(filename: string, host?: string): string;\\n  \\n    /**\\n     * Get the input data.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Get the data associated with the specific Coding Contract.\\n     * Note that this is not the same as the contract’s description.\\n     * This is just the data that the contract wants you to act on in order to solve\\n     *\\n     * @param filename - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns The specified contract’s data, data type depends on contract type.;\\n     */\\n    getData(filename: string, host?: string): any;\\n  \\n    /**\\n     * Get the number of attempt remaining.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the number of tries remaining on the contract before it self-destructs.\\n     *\\n     * @param fn - Filename of the contract.\\n     * @param host - Host of the server containing the contract. Optional. Defaults to current server if not provided.\\n     * @returns How many attempts are remaining for the contract;\\n     */\\n    getNumTriesRemaining(filename: string, host?: string): number;\\n  }\\n  \\n  /**\\n   * Gang API\\n   * @remarks\\n   * If you are not in BitNode-2, then you must have Source-File 2 in order to use this API.\\n   * @public\\n   */\\n  export interface Gang {\\n    /**\\n     * Create a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     *\\n     * Create a gang with the specified faction.\\n     * @returns True if the gang was created, false otherwise.\\n     */\\n    createGang(faction: string): boolean;\\n  \\n    /**\\n     * Check if you're in a gang.\\n     * @remarks\\n     * RAM cost: 1GB\\n     * @returns True if you're in a gang, false otherwise.\\n     */\\n    inGang(): boolean;\\n  \\n    /**\\n     * List all gang members.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the names of all Gang members\\n     *\\n     * @returns Names of all Gang members.\\n     */\\n    getMemberNames(): string[];\\n  \\n    /**\\n     * Get information about your gang.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get general information about the gang.\\n     *\\n     * @returns Object containing general information about the gang.\\n     */\\n    getGangInformation(): GangGenInfo;\\n  \\n    /**\\n     * Get information about the other gangs.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get territory and power information about all gangs.\\n     *\\n     * @returns Object containing territory and power information about all gangs.\\n     */\\n    getOtherGangInformation(): GangOtherInfo;\\n  \\n    /**\\n     * Get information about a specific gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get stat and equipment-related information about a Gang Member\\n     *\\n     * @param name - Name of member.\\n     * @returns Object containing stat and equipment-related information about a Gang Member.\\n     */\\n    getMemberInformation(name: string): GangMemberInfo;\\n  \\n    /**\\n     * Check if you can recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns boolean indicating whether a member can currently be recruited\\n     *\\n     * @returns True if a member can currently be recruited, false otherwise.\\n     */\\n    canRecruitMember(): boolean;\\n  \\n    /**\\n     * Recruit a new gang member.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempt to recruit a new gang member.\\n     *\\n     * Possible reasons for failure:\\n     * * Cannot currently recruit a new member\\n     * * There already exists a member with the specified name\\n     *\\n     * @param name - Name of member to recruit.\\n     * @returns True if the member was successfully recruited, false otherwise.\\n     */\\n    recruitMember(name: string): boolean;\\n  \\n    /**\\n     * List member task names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all valid tasks that Gang members can be assigned to.\\n     *\\n     * @returns All valid tasks that Gang members can be assigned to.\\n     */\\n    getTaskNames(): string[];\\n  \\n    /**\\n     * Set gang member to task.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Attempts to assign the specified Gang Member to the specified task.\\n     * If an invalid task is specified, the Gang member will be set to idle (“Unassigned”).\\n     *\\n     * @param memberName - Name of Gang member to assign.\\n     * @param taskName - Task to assign.\\n     * @returns True if the Gang Member was successfully assigned to the task, false otherwise.\\n     */\\n    setMemberTask(memberName: string, taskName: string): boolean;\\n  \\n    /**\\n     * Get stats of a task.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the stats of a gang task stats. This is typically used to evaluate which action should be executed next.\\n     *\\n     * @param name -  Name of the task.\\n     * @returns Detailed stats of a task.\\n     */\\n    getTaskStats(name: string): GangTaskStats;\\n  \\n    /**\\n     * List equipment names.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Get the name of all possible equipment/upgrades you can purchase for your Gang Members.\\n     * This includes Augmentations.\\n     *\\n     * @returns Names of all Equipments/Augmentations.\\n     */\\n    getEquipmentNames(): string[];\\n  \\n    /**\\n     * Get cost of equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the amount of money it takes to purchase a piece of Equipment or an Augmentation.\\n     * If an invalid Equipment/Augmentation is specified, this function will return Infinity.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Cost to purchase the specified Equipment/Augmentation (number). Infinity for invalid arguments\\n     */\\n    getEquipmentCost(equipName: string): number;\\n  \\n    /**\\n     * Get type of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment type.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns Type of the equipment.\\n     */\\n    getEquipmentType(equipName: string): string;\\n  \\n    /**\\n     * Get stats of an equipment.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the specified equipment stats.\\n     *\\n     * @param equipName - Name of equipment.\\n     * @returns A dictionary containing the stats of the equipment.\\n     */\\n    getEquipmentStats(equipName: string): EquipmentStats;\\n  \\n    /**\\n     * Purchase an equipment for a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Attempt to purchase the specified Equipment/Augmentation for the specified Gang member.\\n     *\\n     * @param memberName - Name of Gang member to purchase the equipment for.\\n     * @param equipName - Name of Equipment/Augmentation to purchase.\\n     * @returns True if the equipment was successfully purchased. False otherwise\\n     */\\n    purchaseEquipment(memberName: string, equipName: string): boolean;\\n  \\n    /**\\n     * Ascend a gang member.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Ascend the specified Gang Member.\\n     *\\n     * @param memberName - Name of member to ascend.\\n     * @returns Object with info about the ascension results. undefined if ascension did not occur.\\n     */\\n    ascendMember(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Get the result of an ascension without ascending.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Get the result of an ascension without ascending.\\n     *\\n     * @param memberName - Name of member.\\n     * @returns Object with info about the ascension results. undefined if ascension is impossible.\\n     */\\n    getAscensionResult(memberName: string): GangMemberAscension | undefined;\\n  \\n    /**\\n     * Enable/Disable territory warfare.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Set whether or not the gang should engage in territory warfare\\n     *\\n     * @param engage - Whether or not to engage in territory warfare.\\n     */\\n    setTerritoryWarfare(engage: boolean): void;\\n  \\n    /**\\n     * Get chance to win clash with other gang.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns the chance you have to win a clash with the specified gang. The chance is returned in decimal form, not percentage\\n     *\\n     * @param gangName - Target gang\\n     * @returns Chance you have to win a clash with the specified gang.\\n     */\\n    getChanceToWinClash(gangName: string): number;\\n  \\n    /**\\n     * Get bonus time.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns the amount of accumulated “bonus time” (seconds) for the Gang mechanic.\\n     *\\n     * “Bonus time” is accumulated when the game is offline or if the game is inactive in the browser.\\n     *\\n     * “Bonus time” makes the game progress faster, up to 10x the normal speed.\\n     *\\n     * @returns Bonus time for the Gang mechanic in milliseconds.\\n     */\\n    getBonusTime(): number;\\n  }\\n  \\n  /**\\n   * Sleeve API\\n   * @remarks\\n   * If you are not in BitNode-10, then you must have Source-File 10 in order to use this API.\\n   * @public\\n   */\\n  export interface Sleeve {\\n    /**\\n     * Get the number of sleeves you own.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the number of duplicate sleeves the player has.\\n     *\\n     * @returns number of duplicate sleeves the player has.\\n     */\\n    getNumSleeves(): number;\\n  \\n    /**\\n     * Get the stats of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a structure containing the stats of the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to get stats of.\\n     * @returns Object containing the stats of the sleeve.\\n     */\\n    getSleeveStats(sleeveNumber: number): SleeveSkills;\\n  \\n    /**\\n     * Get information about a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a struct containing tons of information about this sleeve\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve information.\\n     * @returns Object containing tons of information about this sleeve.\\n     */\\n    getInformation(sleeveNumber: number): SleeveInformation;\\n  \\n    /**\\n     * Get task of a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return the current task that the sleeve is performing. type is set to “Idle” if the sleeve isn’t doing anything.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve task from.\\n     * @returns Object containing information the current task that the sleeve is performing.\\n     */\\n    getTask(sleeveNumber: number): SleeveTask;\\n  \\n    /**\\n     * Set a sleeve to shock recovery.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start recovery.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToShockRecovery(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to synchronize.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start synchronizing.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToSynchronize(sleeveNumber: number): boolean;\\n  \\n    /**\\n     * Set a sleeve to commit crime.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * Returns false if an invalid action is specified.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start commiting crime.\\n     * @param name - Name of the crime. Must be an exact match.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToCommitCrime(sleeveNumber: number, name: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a faction.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this faction.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the faction.\\n     * @param factionName - Name of the faction to work for.\\n     * @param factionWorkType - Name of the action to perform for this faction.\\n     * @returns True if the sleeve started working on this faction, false otherwise.\\n     */\\n    setToFactionWork(sleeveNumber: number, factionName: string, factionWorkType: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to work for a company.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working or this company.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to work for the company.\\n     * @param companyName - Name of the company to work for.\\n     * @returns True if the sleeve started working on this company, false otherwise.\\n     */\\n    setToCompanyWork(sleeveNumber: number, companyName: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to take a class at a university.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not this action was set successfully.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to start taking class.\\n     * @param university - Name of the university to attend.\\n     * @param className - Name of the class to follow.\\n     * @returns True if this action was set successfully, false otherwise.\\n     */\\n    setToUniversityCourse(sleeveNumber: number, university: string, className: string): boolean;\\n  \\n    /**\\n     * Set a sleeve to workout at the gym.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve started working out.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to workout at the gym.\\n     * @param gymName - Name of the gym.\\n     * @param stat - Name of the stat to train.\\n     * @returns True if the sleeve started working out, false otherwise.\\n     */\\n    setToGymWorkout(sleeveNumber: number, gymName: string, stat: string): boolean;\\n  \\n    /**\\n     * Make a sleeve travel to another city.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a boolean indicating whether or not the sleeve reached destination.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to travel.\\n     * @param cityName - Name of the destination city.\\n     * @returns True if the sleeve reached destination, false otherwise.\\n     */\\n    travel(sleeveNumber: number, cityName: string): boolean;\\n  \\n    /**\\n     * Get augmentations installed on a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentation names that this sleeve has installed.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve augmentations from.\\n     * @returns List of augmentation names that this sleeve has installed.\\n     */\\n    getSleeveAugmentations(sleeveNumber: number): string[];\\n  \\n    /**\\n     * List purchasable augs for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return a list of augmentations that the player can buy for this sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to retrieve purchasable augmentations from.\\n     * @returns List of augmentations that the player can buy for this sleeve.\\n     */\\n    getSleevePurchasableAugs(sleeveNumber: number): AugmentPair[];\\n  \\n    /**\\n     * Purchase an aug for a sleeve.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Return true if the aug was purchased and installed on the sleeve.\\n     *\\n     * @param sleeveNumber - Index of the sleeve to buy an aug for.\\n     * @param augName - Name of the aug to buy. Must be an exact match.\\n     * @returns True if the aug was purchased and installed on the sleeve, false otherwise.\\n     */\\n    purchaseSleeveAug(sleeveNumber: number, augName: string): boolean;\\n  }\\n  \\n  /**\\n   * Skills formulas\\n   * @public\\n   */\\n  interface SkillsFormulas {\\n    /**\\n     * Calculate skill level.\\n     * @param exp - experience for that skill\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated skill level.\\n     */\\n    calculateSkill(exp: number, skillMult?: number): number;\\n    /**\\n     * Calculate exp for skill level.\\n     * @param skill - target skill level\\n     * @param skillMult - Multiplier for that skill, defaults to 1.\\n     * @returns The calculated exp required.\\n     */\\n    calculateExp(skill: number, skillMult?: number): number;\\n  }\\n  \\n  /**\\n   * Hacking formulas\\n   * @public\\n   */\\n  interface HackingFormulas {\\n    /**\\n     * Calculate hack chance.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack chance.\\n     */\\n    hackChance(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack exp for one thread.\\n     * @remarks\\n     * Multiply by thread to get total exp\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack exp.\\n     */\\n    hackExp(server: Server, player: Player): number;\\n    /**\\n     * Calculate hack percent for one thread.\\n     * @remarks\\n     * Multiply by thread to get total percent hacked.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack percent.\\n     */\\n    hackPercent(server: Server, player: Player): number;\\n    /**\\n     * Calculate the percent a server would grow.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param threads - Amount of thread.\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @param cores - Number of cores on the computer that will execute grow.\\n     * @returns The calculated grow percent.\\n     */\\n    growPercent(server: Server, threads: number, player: Player, cores?: number): number;\\n    /**\\n     * Calculate hack time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated hack time.\\n     */\\n    hackTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate grow time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated grow time.\\n     */\\n    growTime(server: Server, player: Player): number;\\n    /**\\n     * Calculate weaken time.\\n     * @param server - Server info from {@link NS.getServer | getServer}\\n     * @param player - Player info from {@link NS.getPlayer | getPlayer}\\n     * @returns The calculated weaken time.\\n     */\\n    weakenTime(server: Server, player: Player): number;\\n  }\\n  \\n  /**\\n   * Hacknet Node formulas\\n   * @public\\n   */\\n  interface HacknetNodesFormulas {\\n    /**\\n     * Calculate money gain rate.\\n     * @param level - level of the node.\\n     * @param ram - ram of the node.\\n     * @param cores - cores of the node.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated money gain rate.\\n     */\\n    moneyGainRate(level: number, ram: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet node cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate the cost of a hacknet node.\\n     * @param n - number of the hacknet node\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetNodeCost(n: number, mult: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet node constants used by the game.\\n     */\\n    constants(): number;\\n  }\\n  \\n  /**\\n   * Hacknet Server formulas\\n   * @public\\n   */\\n  interface HacknetServersFormulas {\\n    /**\\n     * Calculate hash gain rate.\\n     * @param level - level of the server.\\n     * @param ramUsed - ramUsed of the server.\\n     * @param maxRam - maxRam of the server.\\n     * @param cores - cores of the server.\\n     * @param mult - player production mult (default to 1)\\n     * @returns The calculated hash gain rate.\\n     */\\n    hashGainRate(level: number, ramUsed: number, maxRam: number, cores: number, mult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server level.\\n     * @param startingLevel - starting level\\n     * @param extraLevels - amount of level to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    levelUpgradeCost(startingLevel: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server ram.\\n     * @param startingRam - starting ram\\n     * @param extraLevels - amount of level of ram to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    ramUpgradeCost(startingRam: number, extraLevels?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cores.\\n     * @param startingCore - starting cores\\n     * @param extraCores - amount of cores to purchase (defaults to 1)\\n     * @param costMult - player cost reduction (default to 1)\\n     * @returns The calculated cost.\\n     */\\n    coreUpgradeCost(startingCore: number, extraCores?: number, costMult?: number): number;\\n    /**\\n     * Calculate cost of upgrading hacknet server cache.\\n     * @param startingCache - starting cache level\\n     * @param extraCache - amount of levels of cache to purchase (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    cacheUpgradeCost(startingCache: number, extraCache?: number): number;\\n    /**\\n     * Calculate hash cost of an upgrade.\\n     * @param upgName - name of the upgrade\\n     * @param level - level of the upgrade\\n     * @returns The calculated hash cost.\\n     */\\n    hashUpgradeCost(upgName: number, level: number): number;\\n    /**\\n     * Calculate the cost of a hacknet server.\\n     * @param n - number of the hacknet server\\n     * @param mult - player cost reduction (defaults to 1)\\n     * @returns The calculated cost.\\n     */\\n    hacknetServerCost(n: number, mult?: number): number;\\n    /**\\n     * All constants used by the game.\\n     * @returns An object with all hacknet server constants used by the game.\\n     */\\n    constants(): any;\\n  }\\n  \\n  /**\\n   * Gang formulas\\n   * @public\\n   */\\n  interface GangFormulas {\\n    /**\\n     * Calculate the wanted penalty.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @returns The calculated wanted penalty.\\n     */\\n    wantedPenalty(gang: GangGenInfo): number;\\n    /**\\n     * Calculate respect gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Gang info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Gang info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated respect gain.\\n     */\\n    respectGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate wanted gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated wanted gain.\\n     */\\n    wantedLevelGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n    /**\\n     * Calculate money gain per tick.\\n     * @param gang - Gang info from {@link Gang.getGangInformation | getGangInformation}\\n     * @param member - Member info from {@link Gang.getMemberInformation | getMemberInformation}\\n     * @param task - Task info from {@link Gang.getTaskStats | getTaskStats}\\n     * @returns The calculated money gain.\\n     */\\n    moneyGain(gang: GangGenInfo, member: GangMemberInfo, task: GangTaskStats): number;\\n  \\n    /**\\n     * Calculate ascension point gain.\\n     * @param exp - Experience point before ascension.\\n     * @returns The calculated ascension point gain.\\n     */\\n    ascensionPointsGain(exp: number): number;\\n  \\n    /**\\n     * Calculate ascension mult.\\n     * @param points - Amount of ascension points.\\n     * @returns The calculated ascension mult.\\n     */\\n    ascensionMultiplier(points: number): number;\\n  }\\n  \\n  /**\\n   * Formulas API\\n   * @remarks\\n   * You need Formulas.exe on your home computer to use this API.\\n   * @public\\n   */\\n  export interface Formulas {\\n    /** Skills formulas */\\n    skills: SkillsFormulas;\\n    /** Hacking formulas */\\n    hacking: HackingFormulas;\\n    /** Hacknet Nodes formulas */\\n    hacknetNodes: HacknetNodesFormulas;\\n    /** Hacknet Servers formulas */\\n    hacknetServers: HacknetServersFormulas;\\n    /** Gang formulas */\\n    gang: GangFormulas;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface Fragment {\\n    id: number;\\n    shape: boolean[][];\\n    type: number;\\n    power: number;\\n    limit: number;\\n  }\\n  \\n  /**\\n   * @public\\n   */\\n  export interface ActiveFragment {\\n    id: number;\\n    avgCharge: number;\\n    numCharge: number;\\n    rotation: number;\\n    x: number;\\n    y: number;\\n  }\\n  \\n  /**\\n   * Stanek's Gift API.\\n   * @public\\n   */\\n  interface Stanek {\\n    /**\\n     * Stanek's Gift width.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The width of the gift.\\n     */\\n    width(): number;\\n    /**\\n     * Stanek's Gift height.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @returns The height of the gift.\\n     */\\n    height(): number;\\n  \\n    /**\\n     * Charge a fragment, increasing its power.\\n     * @remarks\\n     * RAM cost: 0.4 GB\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @returns Promise that lasts until the charge action is over.\\n     */\\n    charge(rootX: number, rootY: number): Promise<void>;\\n  \\n    /**\\n     * List possible fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns List of possible fragments.\\n     */\\n    fragmentDefinitions(): Fragment[];\\n  \\n    /**\\n     * List of fragments in Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @returns List of active fragments placed on Stanek's Gift.\\n     */\\n    activeFragments(): ActiveFragment[];\\n  \\n    /**\\n     * Clear the board of all fragments.\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    clear(): void;\\n  \\n    /**\\n     * Check if fragment can be placed at specified location.\\n     * @remarks\\n     * RAM cost: cost: 0.5 GB\\n     *\\n     * @param rootX - rootX Root X against which to align the top left of the fragment.\\n     * @param rootY - rootY Root Y against which to align the top left of the fragment.\\n     * @param rotation - rotation A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - fragmentId ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    canPlace(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Place fragment on Stanek's Gift.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @param rotation - A number from 0 to 3, the mount of 90 degree turn to take.\\n     * @param fragmentId - ID of the fragment to place.\\n     * @returns true if the fragment can be placed at that position. false otherwise.\\n     */\\n    place(rootX: number, rootY: number, rotation: number, fragmentId: number): boolean;\\n    /**\\n     * Get placed fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 5 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    get(rootX: number, rootY: number): ActiveFragment | undefined;\\n  \\n    /**\\n     * Remove fragment at location.\\n     * @remarks\\n     * RAM cost: cost: 0.15 GB\\n     *\\n     * @param rootX - X against which to align the top left of the fragment.\\n     * @param rootY - Y against which to align the top left of the fragment.\\n     * @returns The fragment at [rootX, rootY], if any.\\n     */\\n    remove(rootX: number, rootY: number): boolean;\\n  }\\n  \\n  /**\\n   * User Interface API.\\n   * @public\\n   */\\n  interface UserInterface {\\n    /**\\n     * Get the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     *\\n     * @returns An object containing the theme's colors\\n     */\\n    getTheme(): UserInterfaceTheme;\\n  \\n    /**\\n     * Sets the current theme\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     * @example\\n     * Usage example (NS2)\\n     * ```ts\\n     * const theme = ns.ui.getTheme();\\n     * theme.primary = '#ff5500';\\n     * ns.ui.setTheme(theme);\\n     * ```\\n     */\\n    setTheme(newTheme: UserInterfaceTheme): void;\\n  \\n    /**\\n     * Resets the player's theme to the default values\\n     * @remarks\\n     * RAM cost: cost: 0 GB\\n     */\\n    resetTheme(): void;\\n  }\\n  \\n  /**\\n   * Collection of all functions passed to scripts\\n   * @public\\n   * @remarks\\n   * <b>Basic ns1 usage example:</b>\\n   * ```ts\\n   *  // Basic ns functions can be used directly\\n   *  getHostname();\\n   *  // Some related functions are gathered within a common namespace\\n   *  stock.getPrice();\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscript1.html| ns1 in-game docs}\\n   * <hr>\\n   * <b>Basic ns2 usage example:</b>\\n   * ```ts\\n   * export async function main(ns) {\\n   *  // Basic ns functions can be accessed on the ns object\\n   *  ns.getHostname();\\n   *  // Some related functions are gathered under a sub-property of the ns object\\n   *  ns.stock.getPrice();\\n   *  // Some functions need to be await ed\\n   *  await ns.hack('n00dles');\\n   * }\\n   * ```\\n   * {@link https://bitburner.readthedocs.io/en/latest/netscript/netscriptjs.html| ns2 in-game docs}\\n   * <hr>\\n   */\\n  export interface NS extends Singularity {\\n    /**\\n     * Namespace for hacknet functions.\\n     * @remarks RAM cost: 4 GB\\n     */\\n    readonly hacknet: Hacknet;\\n    /**\\n     *\\n     * Namespace for bladeburner functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly bladeburner: Bladeburner;\\n    /**\\n     *\\n     * Namespace for codingcontract functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly codingcontract: CodingContract;\\n    /**\\n     *\\n     * Namespace for gang functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly gang: Gang;\\n    /**\\n     *\\n     * Namespace for sleeve functions.\\n     * @remarks RAM cost: 0 GB\\n     */\\n    readonly sleeve: Sleeve;\\n    /**\\n     *\\n     * Namespace for stock functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly stock: TIX;\\n    /**\\n     *\\n     * Namespace for formulas functions.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    readonly formulas: Formulas;\\n    /**\\n     * Namespace for stanek functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly stanek: Stanek;\\n    /**\\n     * Namespace for corporation functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly corporation: Corporation;\\n  \\n    /**\\n     * Namespace for user interface functions.\\n     * RAM cost: 0 GB\\n     */\\n    readonly ui: UserInterface;\\n  \\n    /**\\n     * Arguments passed into the script.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Arguments passed into a script can be accessed using a normal\\n     * array using the [] operator (args[0], args[1], etc…).\\n     *\\n     * It is also possible to get the number of arguments that was passed into a script using: 'args.length'\\n     * WARNING: Do not try to modify the args array. This will break the game.\\n     */\\n    readonly args: (string | number | boolean)[];\\n  \\n    /**\\n     * Steal a servers money.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Function that is used to try and hack servers to steal money and gain hacking experience.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level when this function is called. In order to hack a server you must first gain root access to that server\\n     * and also have the required hacking level.\\n     *\\n     * A script can hack a server from anywhere. It does not need to be running on the same\\n     * server to hack that server. For example, you can create a script that hacks the `foodnstuff`\\n     * server and run that script on any server in the game.\\n     *\\n     * A successful `hack()` on a server will raise that server’s security level by 0.002.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var earnedMoney = hack(\\\"foodnstuff\\\");\\n     * earnedMoney = earnedMoney + hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let earnedMoney = await ns.hack(\\\"foodnstuff\\\");\\n     * earnedMoney += await ns.hack(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to hack\\n     * ```\\n     * @param host - Hostname of the target server to hack.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount of money stolen if the hack is successful, and zero otherwise.\\n     */\\n    hack(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Spoof money in a servers bank account, increasing the amount available.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to increase the amount of money available on a server.\\n     * The runtime for this command depends on your hacking level and the target server’s\\n     * security level. When `grow` completes, the money available on a target server will\\n     * be increased by a certain, fixed percentage. This percentage is determined by the\\n     * target server’s growth rate (which varies between servers) and security level. Generally,\\n     * higher-level servers have higher growth rates. The getServerGrowth() function can be used\\n     * to obtain a server’s growth rate.\\n     *\\n     * Like hack, `grow` can be called on any server, regardless of where the script is running.\\n     * The grow() command requires root access to the target server, but there is no required hacking\\n     * level to run the command. It also raises the security level of the target server by 0.004.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var availableMoney = getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\"));\\n     * currentMoney = currentMoney * (1 + grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let availableMoney = ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\"));\\n     * currentMoney *= (1 + await ns.grow(\\\"foodnstuff\\\", { threads: 5 })); // Only use 5 threads to grow\\n     * ```\\n     * @param host - Hostname of the target server to grow.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The number by which the money on the server was multiplied for the growth.\\n     */\\n    grow(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Reduce a server security level.\\n     * @remarks\\n     * RAM cost: 0.15 GB\\n     *\\n     * Use your hacking skills to attack a server’s security, lowering the server’s security level.\\n     * The runtime for this command depends on your hacking level and the target server’s security\\n     * level when this function is called. This function lowers the security level of the target server by 0.05.\\n     *\\n     * Like hack and grow, `weaken` can be called on any server, regardless of\\n     * where the script is running. This command requires root access to the target server, but\\n     * there is no required hacking level to run the command.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var currentSecurity = getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\");\\n     * currentSecurity = currentSecurity - weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * let currentSecurity = ns.getServerSecurityLevel(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\");\\n     * currentSecurity -= await ns.weaken(\\\"foodnstuff\\\", { threads: 5 }); // Only use 5 threads to weaken\\n     * ```\\n     * @param host - Hostname of the target server to weaken.\\n     * @param opts - Optional parameters for configuring function behavior.\\n     * @returns The amount by which the target server’s security level was decreased. This is equivalent to 0.05 multiplied by the number of script threads.\\n     */\\n    weaken(host: string, opts?: BasicHGWOptions): Promise<number>;\\n  \\n    /**\\n     * Predict the effect of weaken.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security decrease that would occur if a weaken with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @param cores - Optional. The number of cores of the server that would run weaken.\\n     * @returns The security decrease.\\n     */\\n    weakenAnalyze(threads: number, cores?: number): number;\\n  \\n    /**\\n     * Predict the effect of hack.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of script threads you need when running the hack command\\n     * to steal the specified amount of money from the target server.\\n     * If hackAmount is less than zero or greater than the amount of money available on the server,\\n     * then this function returns -1.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * //For example, let’s say the foodnstuff server has $10m and you run:\\n     * hackAnalyzeThreads(\\\"foodnstuff\\\", 1e6);\\n     * //If this function returns 50, this means that if your next hack call is run on a script with 50 threads, it will steal $1m from the foodnstuff server.\\n     * ```\\n     * @param host - Hostname of the target server to analyze.\\n     * @param hackAmount - Amount of money you want to hack from the server.\\n     * @returns The number of threads needed to hack the server for hackAmount money.\\n     */\\n    hackAnalyzeThreads(host: string, hackAmount: number): number;\\n  \\n    /**\\n     * Get the part of money stolen with a single thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the part of the specified server’s money you will steal with a single thread hack.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, assume the following returns 0.01:\\n     * var hackAmount = hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, assume the following returns 0.01:\\n     * const hackAmount = ns.hackAnalyze(\\\"foodnstuff\\\");\\n     * //This means that if hack the foodnstuff server using a single thread, then you will steal 1%, or 0.01 of its total money. If you hack using N threads, then you will steal N*0.01 times its total money.\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @returns The part of money you will steal from the target server with a single thread hack.\\n     */\\n    hackAnalyze(host: string): number;\\n  \\n    /**\\n     * Get the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a hack with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    hackAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Get the chance of successfully hacking a server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the chance you have of successfully hacking the specified server.\\n     *\\n     * This returned value is in decimal form, not percentage.\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns The chance you have of successfully hacking the target server.\\n     */\\n    hackAnalyzeChance(host: string): number;\\n  \\n    /**\\n     * Calculate the number of grow thread needed to grow a server by a certain multiplier.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * This function returns the number of “growths” needed in order to increase\\n     * the amount of money available on the specified server by the specified amount.\\n     * The specified amount is multiplicative and is in decimal form, not percentage.\\n     *\\n     * Warning: The value returned by this function isn’t necessarily a whole number.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * var growTimes = growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //For example, if you want to determine how many grow calls you need to double the amount of money on foodnstuff, you would use:\\n     * const growTimes = ns.growthAnalyze(\\\"foodnstuff\\\", 2);\\n     * //If this returns 100, then this means you need to call grow 100 times in order to double the money (or once with 100 threads).\\n     * ```\\n     * @param host - Hostname of the target server.\\n     * @param growthAmount - Multiplicative factor by which the server is grown. Decimal form..\\n     * @returns The amount of grow calls needed to grow the specified server by the specified amount\\n     */\\n    growthAnalyze(host: string, growthAmount: number, cores?: number): number;\\n  \\n    /**\\n     * Calculate the security increase for a number of thread.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns the security increase that would occur if a grow with this many threads happened.\\n     *\\n     * @param threads - Amount of threads that will be used.\\n     * @returns The security increase.\\n     */\\n    growthAnalyzeSecurity(threads: number): number;\\n  \\n    /**\\n     * Suspends the script for n milliseconds.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   tprint(i + 1);\\n     *   sleep(5000);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // This will count from 1 to 10 in your terminal, with one number every 5 seconds\\n     * for (var i=0; i<10; i++) {\\n     *   ns.tprint(i + 1);\\n     *   await ns.sleep(5000);\\n     * }\\n     * ```\\n     * @returns\\n     */\\n    sleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Suspends the script for n milliseconds. Doesn't block with concurrent calls.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param millis - Number of milliseconds to sleep.\\n     * @returns\\n     */\\n    asleep(millis: number): Promise<void>;\\n  \\n    /**\\n     * Prints one or move values or variables to the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    print(...args: any[]): void;\\n  \\n    /**\\n     * Prints one or more values or variables to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param args - Value(s) to be printed.\\n     */\\n    tprint(...args: any[]): void;\\n  \\n    /**\\n     * Prints a raw value or a variable to the Terminal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param format - format of the message\\n     * @param msg - Value to be printed.\\n     */\\n    tprintf(format: string, ...values: any[]): void;\\n  \\n    /**\\n     * Clears the script’s logs.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    clearLog(): void;\\n  \\n    /**\\n     * Disables logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Logging can be disabled for all functions by passing `ALL` as the argument.\\n     *\\n     * Note that this does not completely remove all logging functionality.\\n     * This only stops a function from logging when the function is successful.\\n     * If the function fails, it will still log the reason for failure.\\n     *\\n     * @param fn - Name of function for which to disable logging.\\n     */\\n    disableLog(fn: string): void;\\n  \\n    /**\\n     * Enable logging for a certain function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Re-enables logging for the given function. If `ALL` is passed into this\\n     * function as an argument, then it will revert the effects of disableLog(`ALL`).\\n     *\\n     * @param fn - Name of function for which to enable logging.\\n     */\\n    enableLog(fn: string): void;\\n  \\n    /**\\n     * Checks the status of the logging for the given function.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param fn - Name of function to check.\\n     * @returns Returns a boolean indicating whether or not logging is enabled for that function (or `ALL`)\\n     */\\n    isLogEnabled(fn: string): boolean;\\n  \\n    /**\\n     * Get all the logs of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Returns a script’s logs. The logs are returned as an array, where each line is an element in the array.\\n     * The most recently logged line is at the end of the array.\\n     * Note that there is a maximum number of lines that a script stores in its logs. This is configurable in the game’s options.\\n     * If the function is called with no arguments, it will return the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Get logs from foo.script on the current server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Open logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.getScriptLogs(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of script to get logs from.\\n     * @param host - Optional. Hostname of the server that the script is on.\\n     * @param args - Arguments to identify which scripts to get logs for.\\n     * @returns Returns an string array, where each line is an element in the array. The most recently logged line is at the end of the array.\\n     */\\n    getScriptLogs(fn?: string, host?: string, ...args: any[]): string[];\\n  \\n    /**\\n     * Open the tail window of a script.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Opens a script’s logs. This is functionally the same as the tail Terminal command.\\n     *\\n     * If the function is called with no arguments, it will open the current script’s logs.\\n     *\\n     * Otherwise, the fn, hostname/ip, and args… arguments can be used to get the logs from another script.\\n     * Remember that scripts are uniquely identified by both their names and arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Open logs from foo.script on the current server that was run with no args\\n     * ns.tail(\\\"foo.script\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with no args\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //Get logs from foo.script on the foodnstuff server that was run with the arguments [1, \\\"test\\\"]\\n     * ns.tail(\\\"foo.script\\\", \\\"foodnstuff\\\", 1, \\\"test\\\");\\n     * ```\\n     * @param fn - Optional. Filename of the script being tailed. If omitted, the current script is tailed.\\n     * @param host - Optional. Hostname of the script being tailed. Defaults to the server this script is running on. If args are specified, this is not optional.\\n     * @param args - Arguments for the script being tailed.\\n     */\\n    tail(fn?: string, host?: string, ...args: any[]): void;\\n  \\n    /**\\n     * Get the list of servers connected to a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array containing the hostnames of all servers that are one\\n     * node way from the specified target server. The hostnames in the returned\\n     * array are strings.\\n     *\\n     * @param host - Optional, Hostname of the server to scan, default to current server.\\n     * @returns Returns an string of hostnames.\\n     */\\n    scan(host?: string): string[];\\n  \\n    /**\\n     * Runs NUKE.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Running NUKE.exe on a target server gives you root access which means you can executes scripts on said server. NUKE.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.nuke(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    nuke(host: string): void;\\n  \\n    /**\\n     * Runs BruteSSH.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the BruteSSH.exe program on the target server. BruteSSH.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.brutessh(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    brutessh(host: string): void;\\n  \\n    /**\\n     * Runs FTPCrack.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the FTPCrack.exe program on the target server. FTPCrack.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.ftpcrack(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    ftpcrack(host: string): void;\\n  \\n    /**\\n     * Runs relaySMTP.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the relaySMTP.exe program on the target server. relaySMTP.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.relaysmtp(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    relaysmtp(host: string): void;\\n  \\n    /**\\n     * Runs HTTPWorm.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the HTTPWorm.exe program on the target server. HTTPWorm.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.httpworm(\\\"foodnstuff\\\");\\n     * ```\\n     * @param host - Hostname of the target server.\\n     */\\n    httpworm(host: string): void;\\n  \\n    /**\\n     * Runs SQLInject.exe on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Runs the SQLInject.exe program on the target server. SQLInject.exe must exist on your home computer.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.sqlinject(\\\"foodnstuff\\\");\\n     * ```\\n     * @remarks RAM cost: 0.05 GB\\n     * @param host - Hostname of the target server.\\n     */\\n    sqlinject(host: string): void;\\n  \\n    /**\\n     * Start another script on the current server.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Run a script as a separate process. This function can only be used to run scripts located on the\\n     * current server (the server running the script that calls this function). Requires a significant\\n     * amount of RAM to run this command.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the run command is to call it with just the script name. The following example will run ‘foo.script’ single-threaded with no arguments:\\n     * ns.run(\\\"foo.script\\\");\\n     *\\n     * //The following example will run ‘foo.script’ but with 5 threads instead of single-threaded:\\n     * ns.run(\\\"foo.script\\\", 5);\\n     *\\n     * //This next example will run ‘foo.script’ single-threaded, and will pass the string ‘foodnstuff’ into the script as an argument:\\n     * ns.run(\\\"foo.script\\\", 1, 'foodnstuff');\\n     * ```\\n     * @param script - Filename of script to run.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the second argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    run(script: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Start another script on any server.\\n     * @remarks\\n     * RAM cost: 1.3 GB\\n     *\\n     * Run a script as a separate process on a specified server. This is similar to the run function\\n     * except that it can be used to run a script on any server, instead of just the current server.\\n     *\\n     * If the script was successfully started, then this functions returns the PID of that script.\\n     * Otherwise, it returns 0.\\n     *\\n     * PID stands for Process ID. The PID is a unique identifier for each script.\\n     * The PID will always be a positive integer.\\n     *\\n     * Running this function with a numThreads argument of 0 will return 0 without running the script.\\n     * However, running this function with a negative numThreads argument will cause a runtime error.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The simplest way to use the exec command is to call it with just the script name and the target server. The following example will try to run generic-hack.script on the foodnstuff server:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following example will try to run the script generic-hack.script on the joesguns server with 10 threads:\\n     * ns.exec(\\\"generic-hack.script\\\", \\\"joesguns\\\", 10);\\n     *\\n     * //This last example will try to run the script foo.script on the foodnstuff server with 5 threads. It will also pass the number 1 and the string “test” in as arguments to the script:\\n     * ns.exec(\\\"foo.script\\\", \\\"foodnstuff\\\", 5, 1, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param host - Hostname of the `target server` on which to execute the script.\\n     * @param numThreads - Optional thread count for new script. Set to 1 by default. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run. Note that if any arguments are being passed into the new script, then the third argument numThreads must be filled in with a value.\\n     * @returns Returns the PID of a successfully started script, and 0 otherwise.\\n     */\\n    exec(script: string, host: string, numThreads?: number, ...args: Array<string | number | boolean>): number;\\n  \\n    /**\\n     * Terminate current script and start another in 10s.\\n     * @remarks\\n     * RAM cost: 2 GB\\n     *\\n     * Terminates the current script, and then after a delay of about 10 seconds it will execute the\\n     * newly-specified script. The purpose of this function is to execute a new script without being\\n     * constrained by the RAM usage of the current one. This function can only be used to run scripts\\n     * on the local server.\\n     *\\n     * Because this function immediately terminates the script, it does not have a return value.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will execute the script ‘foo.script’ with 10 threads and the arguments ‘foodnstuff’ and 90:\\n     * ns.spawn('foo.script', 10, 'foodnstuff', 90);\\n     * ```\\n     * @param script - Filename of script to execute.\\n     * @param numThreads - Number of threads to spawn new script with. Will be rounded to nearest integer.\\n     * @param args - Additional arguments to pass into the new script that is being run.\\n     */\\n    spawn(script: string, numThreads?: number, ...args: string[]): void;\\n  \\n    /**\\n     * Terminate another script.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills the script on the target server specified by the script’s name and arguments.\\n     * Remember that scripts are uniquely identified by both their name and arguments.\\n     * For example, if `foo.script` is run with the argument 1, then this is not the same as\\n     * `foo.script` run with the argument 2, even though they have the same code.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The following example will try to kill a script named foo.script on the foodnstuff server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with no arguments:\\n     * ns.kill(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The following will try to kill a script named foo.script on the current server that was ran with the arguments 1 and “foodnstuff”:\\n     * ns.kill(\\\"foo.script\\\", getHostname(), 1, \\\"foodnstuff\\\");\\n     * ```\\n     * @param script - Filename or pid of the script to kill\\n     * @param host - Hostname of the server on which to kill the script.\\n     * @param args - Arguments to identify which script to kill.\\n     * @returns True if the script is successfully killed, and false otherwise.\\n     */\\n    kill(script: number): boolean;\\n    kill(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Terminate all scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Kills all running scripts on the specified server. This function returns true\\n     * if any scripts were killed, and false otherwise. In other words, it will return\\n     * true if there are any scripts running on the target server.\\n     * If no host is defined, it will kill all scripts, where the script is running.\\n     *\\n     * @param host - IP or hostname of the server on which to kill all scripts.\\n     * @returns True if any scripts were killed, and false otherwise.\\n     */\\n    killall(host?: string): boolean;\\n  \\n    /**\\n     * Terminates the current script immediately.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     */\\n    exit(): void;\\n  \\n    /**\\n     * Copy file between servers.\\n     * @remarks\\n     * RAM cost: 0.6 GB\\n     *\\n     * Copies a script or literature (.lit) file(s) to another server. The files argument can be either a string\\n     * specifying a single file to copy, or an array of strings specifying multiple files to copy.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //Copies foo.lit from the helios server to the home computer:\\n     * await ns.scp(\\\"foo.lit\\\", \\\"helios\\\", \\\"home\\\");\\n     *\\n     * //Tries to copy three files from rothman-uni to home computer:\\n     * files = [\\\"foo1.lit\\\", \\\"foo2.script\\\", \\\"foo3.script\\\"];\\n     * await ns.scp(files, \\\"rothman-uni\\\", \\\"home\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * //ns2, copies files from home to a target server\\n     * const server = ns.args[0];\\n     * const files = [\\\"hack.js\\\",\\\"weaken.js\\\",\\\"grow.js\\\"];\\n     * await ns.scp(files, \\\"home\\\", server);\\n     * ```\\n     * @param files - Filename or an array of filenames of script/literature files to copy.\\n     * @param source - Host of the source server, which is the server from which the file will be copied. This argument is optional and if it’s omitted the source will be the current server.\\n     * @param destination - Host of the destination server, which is the server to which the file will be copied.\\n     * @returns True if the script/literature file is successfully copied over and false otherwise. If the files argument is an array then this function will return true if at least one of the files in the array is successfully copied.\\n     */\\n    scp(files: string | string[], source: string, destination: string): Promise<boolean>;\\n  \\n    /**\\n     * List files on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with the filenames of all files on the specified server\\n     * (as strings). The returned array is sorted in alphabetic order.\\n     *\\n     * @param host - Host of the target server.\\n     * @param grep - A substring to search for in the filename.\\n     * @returns Array with the filenames of all files on the specified server.\\n     */\\n    ls(host: string, grep?: string): string[];\\n  \\n    /**\\n     * List running scripts on a server.\\n     * @remarks\\n     * RAM cost: 0.2 GB\\n     *\\n     * Returns an array with general information about all scripts running on the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * const scripts = ps(\\\"home\\\");\\n     * for (let i = 0; i < scripts.length; ++i) {\\n     *     tprint(scripts[i].filename + ' ' + scripts[i].threads);\\n     *     tprint(scripts[i].args);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ps = ns.ps(\\\"home\\\");\\n     * for (script of ps) {\\n     *     ns.tprint(`${script.filename} ${ps[i].threads}`);\\n     *     ns.tprint(script.args);\\n     * }\\n     * ```\\n     * @param host - Host address of the target server. If not specified, it will be the current server’s IP by default.\\n     * @returns Array with general information about all scripts running on the specified target server.\\n     */\\n    ps(host?: string): ProcessInfo[];\\n  \\n    /**\\n     * Check if your have root access on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns a boolean indicating whether or not the player has root access to the specified target server.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * if (hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * if (ns.hasRootAccess(\\\"foodnstuff\\\") == false) {\\n     *    ns.nuke(\\\"foodnstuff\\\");\\n     * }\\n     * ```\\n     * @param host - Host of the target server\\n     * @returns True if player has root access to the specified target server, and false otherwise.\\n     */\\n    hasRootAccess(host: string): boolean;\\n  \\n    /**\\n     * Returns a string with the hostname of the server that the script is running on.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Hostname of the server that the script is on.\\n     */\\n    getHostname(): string;\\n  \\n    /**\\n     * Returns the player’s current hacking level.\\n     *\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     * @returns Player’s current hacking level\\n     */\\n    getHackingLevel(): number;\\n  \\n    /**\\n     * Get hacking related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacking related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHackingMultipliers();\\n     * print(mults.chance);\\n     * print(mults.growth);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {chance, growth} = ns.getHackingMultipliers();\\n     * print(chance);\\n     * print(growth);\\n     * ```\\n     * @returns Object containing the Player’s hacking related multipliers.\\n     */\\n    getHackingMultipliers(): HackingMultipliers;\\n  \\n    /**\\n     * Get hacknet related multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the Player’s hacknet related multipliers.\\n     * These multipliers are returned in fractional forms, not percentages\\n     * (e.g. 1.5 instead of 150%).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * // Example of how this can be used:\\n     * var mults = getHacknetMultipliers();\\n     * print(mults.production);\\n     * print(mults.purchaseCost);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * // Example of how this can be used:\\n     * const {production, purchaseCost} = ns.getHacknetMultipliers();\\n     * print(production);\\n     * print(purchaseCost);\\n     * ```\\n     * @returns Object containing the Player’s hacknet related multipliers.\\n     */\\n    getHacknetMultipliers(): HacknetMultipliers;\\n  \\n    /**\\n     * Returns a server object for the given server. Defaults to the running script's server if host is not specified.\\n     *\\n     * @remarks\\n     * RAM cost: 2 GB\\n     * @param host - Optional. Hostname for the requested server object.\\n     * @returns The requested server object.\\n     */\\n    getServer(host?: string): Server;\\n  \\n    /**\\n     * Get money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of money available on a server.\\n     * Running this function on the home computer will return the player’s money.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * getServerMoneyAvailable(\\\"home\\\"); //Returns player's money\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * ns.getServerMoneyAvailable(\\\"foodnstuff\\\");\\n     * ns.getServerMoneyAvailable(\\\"home\\\"); // Returns player's money\\n     * ```\\n     * @param host - Host of target server\\n     * @returns Amount of money available on the server.\\n     */\\n    getServerMoneyAvailable(host: string): number;\\n  \\n    /**\\n     * Get maximum money available on a server.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the maximum amount of money that can be available on a server.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Maximum amount of money available on the server.\\n     */\\n    getServerMaxMoney(host: string): number;\\n  \\n    /**\\n     * Get a server growth parameter.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the server’s instrinsic “growth parameter”. This growth\\n     * parameter is a number between 0 and 100 that represents how\\n     * quickly the server’s money grows. This parameter affects the\\n     * percentage by which the server’s money is increased when using the\\n     * grow function. A higher growth parameter will result in a\\n     * higher percentage increase from grow.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Parameter that affects the percentage by which the server’s money is increased when using the grow function.\\n     */\\n    getServerGrowth(host: string): number;\\n  \\n    /**\\n     * Get server security level.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the security level of the target server. A server’s security\\n     * level is denoted by a number, typically between 1 and 100\\n     * (but it can go above 100).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Security level of the target server.\\n     */\\n    getServerSecurityLevel(host: string): number;\\n  \\n    /**\\n     * Returns the minimum security level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns Minimum security level of the target server.\\n     */\\n    getServerMinSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated useless\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     * Returns the base security level of the target server. This is the security\\n     * level that the server starts out with. This is different than\\n     * getServerSecurityLevel because getServerSecurityLevel returns\\n     * the current security level of a server, which can constantly change due to\\n     * hack, grow, and weaken, calls on that server.\\n     * The base security level will stay the same until you reset by\\n     * installing an Augmentation(s).\\n     *\\n     * @param host - Host of target server.\\n     * @returns Base security level of the target server.\\n     */\\n    getServerBaseSecurityLevel(host: string): number;\\n  \\n    /**\\n     * @deprecated use getServerMaxRam / getServerUsedRam\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns an array with two elements that gives information about a server’s memory (RAM).\\n     * The first element in the array is the amount of RAM that the server has total (in GB).\\n     * The second element in the array is the amount of RAM that is currently being used on\\n     * the server (in GB).\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var serverRam = getServerRam(\\\"helios\\\");\\n     * var totalRam = serverRam[0];\\n     * var ramUsed = serverRam[1];\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const [totalRam, ramUsed] = ns.getServerRam(\\\"helios\\\");\\n     * ```\\n     * @param host - Host of target server.\\n     * @returns Array with total and used memory on the specified server.\\n     */\\n    getServerRam(host: string): [number, number];\\n  \\n    /**\\n     * Get the max RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns max ram\\n     */\\n    getServerMaxRam(host: string): number;\\n    /**\\n     * Get the used RAM on a server.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * @param host - Hostname of the target server.\\n     * @returns used ram\\n     */\\n    getServerUsedRam(host: string): number;\\n  \\n    /**\\n     * Returns the required hacking level of the target server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The required hacking level of the target server.\\n     */\\n    getServerRequiredHackingLevel(host: string): number;\\n  \\n    /**\\n     * Returns the number of open ports required to successfully run NUKE.exe on the specified server.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns The number of open ports required to successfully run NUKE.exe on the specified server.\\n     */\\n    getServerNumPortsRequired(host: string): number;\\n  \\n    /**\\n     * Returns a boolean denoting whether or not the specified server exists.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @param host - Host of target server.\\n     * @returns True if specified server exists, and false otherwise.\\n     */\\n    serverExists(host: string): boolean;\\n  \\n    /**\\n     * Check if a file exists.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified file exists on the target server.\\n     * The filename for scripts is case-sensitive, but for other types of files it is not.\\n     * For example, fileExists(“brutessh.exe”) will work fine, even though the actual program\\n     * is named 'BruteSSH.exe'.\\n     *\\n     * If the hostname/ip argument is omitted, then the function will search through the current\\n     * server (the server running the script that calls this function) for the file.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * // The function call will return true if the script named foo.script exists on the foodnstuff server, and false otherwise.\\n     * ns.fileExists(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * // The function call will return true if the current server contains the FTPCrack.exe program, and false otherwise.\\n     * ns.fileExists(\\\"ftpcrack.exe\\\");\\n     * ```\\n     * @param filename - Filename of file to check.\\n     * @param host - Host of target server. This is optional. If it is not specified then the function will use the current server as the target server.\\n     * @returns True if specified file exists, and false otherwise.\\n     */\\n    fileExists(filename: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if a script is running.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns a boolean indicating whether the specified script is running on the target server.\\n     * Remember that a script is uniquely identified by both its name and its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the foodnstuff server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is a script named foo.script with no arguments running on the current server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", ns.getHostname());\\n     *\\n     * //The function call will return true if there is a script named foo.script running with the arguments 1, 5, and “test” (in that order) on the joesguns server, and false otherwise:\\n     * ns.isRunning(\\\"foo.script\\\", \\\"joesguns\\\", 1, 5, \\\"test\\\");\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @param args - Arguments to specify/identify which scripts to search for.\\n     * @returns True if specified script is running on the target server, and false otherwise.\\n     */\\n    isRunning(script: string, host: string, ...args: string[]): boolean;\\n  \\n    /**\\n     * Get general info about a running script.\\n     * @remarks\\n     * RAM cost: 0.3 GB\\n     *\\n     * Running with no args returns curent script.\\n     *\\n     * @returns info about a running script\\n     */\\n    getRunningScript(filename?: string | number, hostname?: string, ...args: (string | number)[]): RunningScript;\\n  \\n    /**\\n     * Get cost of purchasing a server.\\n     * @remarks\\n     * RAM cost: 0.25 GB\\n     *\\n     * Returns the cost to purchase a server with the specified amount of ram.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * for (i = 1; i <= 20; i++) {\\n     *     tprint(i + \\\" -- \\\" + getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * for (i = 1; i <= 20; i++) {\\n     *     ns.tprint(i + \\\" -- \\\" + ns.getPurchasedServerCost(Math.pow(2, i)));\\n     * }\\n     * ```\\n     * @param ram - Amount of RAM of a potential purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The cost to purchase a server with the specified amount of ram.\\n     */\\n    getPurchasedServerCost(ram: number): number;\\n  \\n    /**\\n     * Purchase a server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Purchased a server with the specified hostname and amount of RAM.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string\\n     * and have whitespace removed. Anything that resolves to an empty string will cause\\n     * the function to fail. If there is already a server with the specified hostname,\\n     * then the function will automatically append a number at the end of the hostname\\n     * argument value until it finds a unique hostname. For example, if the script calls\\n     * `purchaseServer(“foo”, 4)` but a server named “foo” already exists, the it will\\n     * automatically change the hostname to `foo-0`. If there is already a server with the\\n     * hostname `foo-0`, then it will change the hostname to `foo-1`, and so on.\\n     *\\n     * Note that there is a maximum limit to the amount of servers you can purchase.\\n     *\\n     * Returns the hostname of the newly purchased server as a string. If the function\\n     * fails to purchase a server, then it will return an empty string. The function will\\n     * fail if the arguments passed in are invalid, if the player does not have enough\\n     * money to purchase the specified server, or if the player has exceeded the maximum\\n     * amount of servers.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var ram = 64;\\n     * var prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const ram = 64;\\n     * const prefix = \\\"pserv-\\\";\\n     * for (i = 0; i < 5; ++i) {\\n     *    ns.purchaseServer(prefix + i, ram);\\n     * }\\n     * ```\\n     * @param hostname - Host of the purchased server.\\n     * @param ram - Amount of RAM of the purchased server. Must be a power of 2 (2, 4, 8, 16, etc.). Maximum value of 1048576 (2^20).\\n     * @returns The hostname of the newly purchased server.\\n     */\\n    purchaseServer(hostname: string, ram: number): string;\\n  \\n    /**\\n     * Delete a purchased server.\\n     * @remarks\\n     * 2.25 GB\\n     *\\n     * Deletes one of your purchased servers, which is specified by its hostname.\\n     *\\n     * The hostname argument can be any data type, but it will be converted to a string.\\n     * Whitespace is automatically removed from the string. This function will not delete a\\n     * server that still has scripts running on it.\\n     *\\n     * @param host - Host of the server to delete.\\n     * @returns True if successful, and false otherwise.\\n     */\\n    deleteServer(host: string): boolean;\\n  \\n    /**\\n     * Returns an array with the hostnames of all of the servers you have purchased.\\n     *\\n     * @remarks 2.25 GB\\n     * @returns Returns an array with the hostnames of all of the servers you have purchased.\\n     */\\n    getPurchasedServers(): string[];\\n  \\n    /**\\n     * Returns the maximum number of servers you can purchase.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum number of servers you can purchase.\\n     */\\n    getPurchasedServerLimit(): number;\\n  \\n    /**\\n     * Returns the maximum RAM that a purchased server can have.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Returns the maximum RAM that a purchased server can have.\\n     */\\n    getPurchasedServerMaxRam(): number;\\n  \\n    /**\\n     * Write data to a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function can be used to either write data to a text file (.txt).\\n     *\\n     * This function will write data to that text file. If the specified text file does not exist,\\n     * then it will be created. The third argument mode, defines how the data will be written to\\n     * the text file. If *mode is set to “w”, then the data is written in “write” mode which means\\n     * that it will overwrite all existing data on the text file. If mode is set to any other value\\n     * then the data will be written in “append” mode which means that the data will be added at the\\n     * end of the text file.\\n     *\\n     * @param handle - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @param mode - Defines the write mode. Only valid when writing to text files.\\n     */\\n    write(handle: string, data?: string[] | number | string, mode?: \\\"w\\\" | \\\"a\\\"): Promise<void>;\\n  \\n    /**\\n     * Attempt to write to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Attempts to write data to the specified Netscript Port.\\n     * If the port is full, the data will not be written.\\n     * Otherwise, the data will be written normally.\\n     *\\n     * @param port - Port or text file that will be written to.\\n     * @param data - Data to write.\\n     * @returns True if the data is successfully written to the port, and false otherwise.\\n     */\\n    tryWritePort(port: number, data: string[] | number): Promise<boolean>;\\n  \\n    /**\\n     * Read content of a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to read data from a port or from a text file (.txt).\\n     *\\n     * This function will return the data in the specified text\\n     * file. If the text file does not exist, an empty string will be returned.\\n     *\\n     * @param handle - Port or text file to read from.\\n     * @returns Data in the specified text file or port.\\n     */\\n    read(handle: string): any;\\n  \\n    /**\\n     * Get a copy of the data from a port without popping it.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * This function is used to peek at the data from a port. It returns the\\n     * first element in the specified port without removing that element. If\\n     * the port is empty, the string “NULL PORT DATA” will be returned.\\n     *\\n     * @param port - Port to peek. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    peek(port: number): any;\\n  \\n    /**\\n     * Clear data from a file.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Delete all data from that text file.\\n     *\\n     * @param handle - Text file to clear.\\n     */\\n    clear(handle: string): void;\\n  \\n    /**\\n     * Clear data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Deleta all data from the underlying queue.\\n     *\\n     * @param handle - Port to clear.\\n     */\\n    clearPort(handle: number): void;\\n  \\n    /**\\n     * Write data to a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Write data to that netscript port.\\n     * @returns The data popped off the queue if it was full.\\n     */\\n    writePort(port: number, data: string | number): Promise<any>;\\n    /**\\n     * Read data from a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Read data from that port. A port is a serialized queue.\\n     * This function will remove the first element from that queue and return it.\\n     * If the queue is empty, then the string “NULL PORT DATA” will be returned.\\n     * @returns the data read.\\n     */\\n    readPort(port: number): any;\\n  \\n    /**\\n     * Get all data on a port.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Get a handle to a Netscript Port.\\n     *\\n     * WARNING: Port Handles only work in NetscriptJS (Netscript 2.0). They will not work in Netscript 1.0.\\n     *\\n     * @see https://bitburner.readthedocs.io/en/latest/netscript/netscriptmisc.html#netscript-ports\\n     * @param port - Port number. Must be an integer between 1 and 20.\\n     * @returns Data in the specified port.\\n     */\\n    getPortHandle(port: number): any[];\\n  \\n    /**\\n     * Delete a file.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Removes the specified file from the current server. This function works for every file\\n     * type except message (.msg) files.\\n     *\\n     * @param name - Filename of file to remove. Must include the extension.\\n     * @param host - Host Address of the server on which to delete the file. Optional. Defaults to current server.\\n     * @returns True if it successfully deletes the file, and false otherwise.\\n     */\\n    rm(name: string, host?: string): boolean;\\n  \\n    /**\\n     * Check if any script with a filename is running.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Returns a boolean indicating whether any instance of the specified script is running\\n     * on the target server, regardless of its arguments.\\n     *\\n     * This is different than the isRunning function because it does not try to\\n     * identify a specific instance of a running script by its arguments.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * scriptRunning(\\\"foo.script\\\", getHostname());\\n     * ```\\n     * * @example\\n     * ```ts\\n     * // NS2:\\n     * //The function call will return true if there is any script named foo.script running on the foodnstuff server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", \\\"foodnstuff\\\");\\n     *\\n     * //The function call will return true if there is any script named “foo.script” running on the current server, and false otherwise:\\n     * ns.scriptRunning(\\\"foo.script\\\", ns.getHostname());\\n     * ```\\n     * @param script - Filename of script to check. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns True if the specified script is running, and false otherwise.\\n     */\\n    scriptRunning(script: string, host: string): boolean;\\n  \\n    /**\\n     * Kill all scripts with a filename.\\n     * @remarks\\n     * RAM cost: 1 GB\\n     *\\n     * Kills all scripts with the specified filename on the target server specified by hostname,\\n     * regardless of arguments.\\n     *\\n     * @param script - Filename of script to kill. This is case-sensitive.\\n     * @param host - Host of target server.\\n     * @returns true if one or more scripts were successfully killed, and false if none were.\\n     */\\n    scriptKill(script: string, host: string): boolean;\\n  \\n    /**\\n     * Returns the current script name.\\n     *\\n     * @remarks RAM cost: 0 GB\\n     * @returns Current script name.\\n     */\\n    getScriptName(): string;\\n  \\n    /**\\n     * Get the ram cost of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of RAM required to run the specified script on the target server.\\n     * Returns 0 if the script does not exist.\\n     *\\n     * @param script - Filename of script. This is case-sensitive.\\n     * @param host - Host of target server the script is located on. This is optional, If it is not specified then the function will se the current server as the target server.\\n     * @returns Amount of RAM required to run the specified script on the target server, and 0 if the script does not exist.\\n     */\\n    getScriptRam(script: string, host?: string): number;\\n  \\n    /**\\n     * Get the execution time of a hack() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *When `hack` completes an amount of money is stolen depending on the player's skills.\\n     * Returns the amount of time in milliseconds it takes to execute the hack Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the hack time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the hack Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getHackTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a grow() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the grow Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the grow time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the grow Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getGrowTime(host: string): number;\\n  \\n    /**\\n     * Get the execution time of a weaken() call.\\n     * @remarks\\n     * RAM cost: 0.05 GB\\n     *\\n     * Returns the amount of time in milliseconds it takes to execute the weaken Netscript function on the target server.\\n     * The function takes in an optional hackLvl parameter that can be specified to see what the weaken time would be at different hacking levels.\\n     * The required time is increased by the security level of the target server and decreased by the player's hacking level.\\n     *\\n     * @param host - Host of target server.\\n     * @returns Returns the amount of time in milliseconds it takes to execute the weaken Netscript function. Returns Infinity if called on a Hacknet Server.\\n     */\\n    getWeakenTime(host: string): number;\\n  \\n    /**\\n     * Get the income of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of income the specified script generates while online\\n     * (when the game is open, does not apply for offline income). Remember that\\n     * a script is uniquely identified by both its name and its arguments. So for\\n     * example if you ran a script with the arguments “foodnstuff” and “5” then\\n     * in order to use this function to get that script’s income you must specify\\n     * those same arguments in the same order in this function call.\\n     *\\n     * This function can also be called with no arguments.\\n     * If called with no arguments, then this function will return an array of two values.\\n     * The first value is the total income (dollar / second) of all of your active scripts\\n     * (scripts that are currently running on any server).\\n     * The second value is the total income (dollar / second) that you’ve earned from scripts\\n     * since you last installed Augmentations.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of income the specified script generates while online.\\n     */\\n    getScriptIncome(): [number, number];\\n    getScriptIncome(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Get the exp gain of a script.\\n     * @remarks\\n     * RAM cost: 0.1 GB\\n     *\\n     * Returns the amount of hacking experience the specified script generates while online\\n     * (when the game is open, does not apply for offline experience gains). Remember that a\\n     * script is uniquely identified by both its name and its arguments.\\n     *\\n     * This function can also return the total experience gain rate of all of your active\\n     * scripts by running the function with no arguments.\\n     *\\n     * @param script - Filename of script.\\n     * @param host - Server on which script is running.\\n     * @param args - Arguments that the script is running with.\\n     * @returns Amount of hacking experience the specified script generates while online.\\n     */\\n    getScriptExpGain(): number;\\n    getScriptExpGain(script: string, host: string, ...args: string[]): number;\\n  \\n    /**\\n     * Returns the amount of time in milliseconds that have passed since you last installed Augmentations.\\n     *\\n     * @remarks RAM cost: 0.05 GB\\n     * @returns Time in milliseconds that have passed since you last installed Augmentations.\\n     */\\n    getTimeSinceLastAug(): number;\\n  \\n    /**\\n     * Format a string.\\n     *\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    sprintf(format: string, ...args: string[]): string;\\n  \\n    /**\\n     * Format a string with an array of arguments.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * see: https://github.com/alexei/sprintf.js\\n     * @param format - String to format.\\n     * @param args - Formating arguments.\\n     * @returns Formated text.\\n     */\\n    vsprintf(format: string, args: string[]): string;\\n  \\n    /**\\n     * Format a number\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Converts a number into a string with the specified formatter.\\n     * This uses the numeraljs library, so the formatters must be compatible with that.\\n     * This is the same function that the game itself uses to display numbers.\\n     *\\n     * see: http://numeraljs.com/\\n     * @param n - Number to format.\\n     * @param format - Formatter.\\n     * @returns Formated number.\\n     */\\n    nFormat(n: number, format: string): string;\\n  \\n    /**\\n     * Format time to readable string\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * @param milliseconds - Number of millisecond to format.\\n     * @param milliPrecision - Format time with subsecond precision, defaults to false.\\n     * @returns The formatted time.\\n     */\\n    tFormat(milliseconds: number, milliPrecision?: boolean): string;\\n  \\n    /**\\n     * Prompt the player with a Yes/No modal.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Prompts the player with a dialog box with two options: “Yes” and “No”.\\n     * This function will return true if the player click “Yes” and false if\\n     * the player clicks “No”. The script’s execution is halted until the player\\n     * selects one of the options.\\n     *\\n     * @param txt - Text to appear in the prompt dialog box.\\n     * @returns True if the player click “Yes” and false if the player clicks “No”.\\n     */\\n    prompt(txt: string): Promise<boolean>;\\n  \\n    /**\\n     * Open up a message box.\\n     * @param msg - Message to alert.\\n     */\\n    alert(msg: any): void;\\n  \\n    /**\\n     * Queue a toast (bottom-right notification).\\n     * @param msg - Message in the toast.\\n     * @param variant - Type of toast, must be one of success, info, warning, error. Defaults to success.\\n     * @param duration - Duration of toast in ms. Can also be `null` to create a persistent toast. Defaults to 2000\\n     */\\n    toast(msg: any, variant?: string, duration?: number | null): void;\\n  \\n    /**\\n     * Download a file from the internet.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Retrieves data from a URL and downloads it to a file on the specified server.\\n     * The data can only be downloaded to a script (.script, .ns, .js) or a text file (.txt).\\n     * If the file already exists, it will be overwritten by this command.\\n     * Note that it will not be possible to download data from many websites because they\\n     * do not allow cross-origin resource sharing (CORS).\\n     *\\n     * IMPORTANT: This is an asynchronous function that returns a Promise.\\n     * The Promise’s resolved value will be a boolean indicating whether or not the data was\\n     * successfully retrieved from the URL. Because the function is async and returns a Promise,\\n     * it is recommended you use wget in NetscriptJS (Netscript 2.0).\\n     *\\n     * In NetscriptJS, you must preface any call to wget with the await keyword (like you would hack or sleep).\\n     * wget will still work in Netscript 1.0, but the functions execution will not be synchronous\\n     * (i.e. it may not execute when you expect/want it to).\\n     * Furthermore, since Promises are not supported in ES5,\\n     * you will not be able to process the returned value of wget in Netscript 1.0.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * await ns.wget(\\\"https://raw.githubusercontent.com/danielyxie/bitburner/master/README.md\\\", \\\"game_readme.txt\\\");\\n     * ```\\n     * @param url - URL to pull data from.\\n     * @param target - Filename to write data to. Must be script or text file.\\n     * @param host - Optional hostname/ip of server for target file.\\n     * @returns True if the data was successfully retrieved from the URL, false otherwise.\\n     */\\n    wget(url: string, target: string, host?: string): Promise<boolean>;\\n  \\n    /**\\n     * Returns the amount of Faction favor required to be able to donate to a faction.\\n     *\\n     * @remarks RAM cost: 0.1 GB\\n     * @returns Amount of Faction favor required to be able to donate to a faction.\\n     */\\n    getFavorToDonate(): number;\\n  \\n    /**\\n     * Get the current Bitnode multipliers.\\n     * @remarks\\n     * RAM cost: 4 GB\\n     *\\n     * Returns an object containing the current BitNode multipliers.\\n     * This function requires you to be in Bitnode 5 or have Source-File 5 in order to run.\\n     * The multipliers are returned in decimal forms (e.g. 1.5 instead of 150%).\\n     * The multipliers represent the difference between the current BitNode and\\n     * the original BitNode (BitNode-1).\\n     *\\n     * For example, if the CrimeMoney multiplier has a value of 0.1, then that means\\n     * that committing crimes in the current BitNode will only give 10% of the money\\n     * you would have received in BitNode-1.\\n     *\\n     * @example\\n     * ```ts\\n     * // NS1:\\n     * var mults = getBitNodeMultipliers();\\n     * print(mults.ServerMaxMoney);\\n     * print(mults.HackExpGain);\\n     * ```\\n     * @example\\n     * ```ts\\n     * // NS2:\\n     * const {ServerMaxMoney, HackExpGain} = ns.getBitNodeMultipliers();\\n     * print(ServerMaxMoney);\\n     * print(HackExpGain);\\n     * ```\\n     * @returns Object containing the current BitNode multipliers.\\n     */\\n    getBitNodeMultipliers(): BitNodeMultipliers;\\n  \\n    /**\\n     * Get a list of acquired Source-Files.\\n     * @remarks\\n     * RAM cost: 5 GB\\n     *\\n     * Returns an array of source files\\n     *\\n     * @returns Array containing an object with number and level of the source file.\\n     */\\n    getOwnedSourceFiles(): SourceFileLvl[];\\n  \\n    /**\\n     * Get information about the player.\\n     * @remarks\\n     * RAM cost: 0.5 GB\\n     *\\n     * Returns an object with information on the current player.\\n     *\\n     * @returns Player info\\n     */\\n    getPlayer(): Player;\\n  \\n    /**\\n     * Add callback function when the script dies\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * NS2 exclusive\\n     *\\n     * Add callback to be executed when the script dies.\\n     */\\n    atExit(f: () => void): void;\\n  \\n    /**\\n     * Parse command line flags.\\n     * @remarks\\n     * RAM cost: 0 GB\\n     *\\n     * Allows unix like flag parsing.\\n     * @example\\n     * ```ts\\n     * // example.script\\n     * var data = flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     * ]);\\n     * tprint(data);\\n     *\\n     * // example.ns\\n     * export async function main(ns) {\\n     *   const data = ns.flags([\\n     *     ['delay', 0], // a default number means this flag is a number\\n     *     ['server', 'foodnstuff'], //  a default string means this flag is a string\\n     *     ['exclude', []], // a default array means this flag is a default array of string\\n     *     ['help', false], // a default boolean means this flag is a boolean\\n     *   ]);\\n     *   ns.tprint(data);\\n     * }\\n     *\\n     * // [home ~/]> run example.script\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false}\\n     * // [home ~/]> run example.script --delay 3000\\n     * // {\\\"_\\\":[],\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi\\n     * // {\\\"_\\\":[],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"exclude\\\":[],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\"}\\n     * // [home ~/]> run example.script --delay 3000 --server harakiri-sushi hello world --exclude a --exclude b\\n     * // {\\\"_\\\":[\\\"hello\\\",\\\"world\\\"],\\\"help\\\":false,\\\"delay\\\":3000,\\\"server\\\":\\\"harakiri-sushi\\\",\\\"exclude\\\":[\\\"a\\\",\\\"b\\\"]}\\n     * // [home ~/]> run example.script --help\\n     * // {\\\"_\\\":[],\\\"delay\\\":0,\\\"server\\\":\\\"foodnstuff\\\",\\\"exclude\\\":[],\\\"help\\\":true}\\n     * ```\\n     */\\n    flags(schema: [string, string | number | boolean | string[]][]): any;\\n  }\\n  \\n  /**\\n   * Corporation Office API\\n   * @remarks\\n   * Requires the Office API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface OfficeAPI {\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - name of the employee\\n     * @param job - Name of the job.\\n     * @returns A promise that is fulfilled when the assignment is complete.\\n     */\\n    assignJob(divisionName: string, cityName: string, employeeName: string, job: string): Promise<void>;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns The newly hired employee, if any\\n     */\\n    hireEmployee(divisionName: string, cityName: string): Employee | undefined;\\n    /**\\n     * Upgrade office size.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param size - Amount of positions to open\\n     */\\n    upgradeOfficeSize(divisionName: string, cityName: string, size: number): void;\\n    /**\\n     * Assign an employee to a job.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param costPerEmployee - Amount to spend per employee.\\n     * @returns Amount of happiness increased.\\n     */\\n    throwParty(divisionName: string, cityName: string, costPerEmployee: number): Promise<number>;\\n    /**\\n     * Buy coffee for your employees\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns A promise that is fulfilled when the coffee is served.\\n     */\\n    buyCoffee(divisionName: string, cityName: string): Promise<void>;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     */\\n    hireAdVert(divisionName: string): void;\\n    /**\\n     * Hire AdVert.\\n     * @param divisionName - Name of the division\\n     * @param researchName - Name of the research\\n     */\\n    research(divisionName: string, researchName: string): void;\\n    /**\\n     * Get data about an office\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns Office data\\n     */\\n    getOffice(divisionName: string, cityName: string): Office;\\n    /**\\n     * Get data about an employee\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param employeeName - Name of the employee\\n     * @returns Employee data\\n     */\\n    getEmployee(divisionName: string, cityName: string, employeeName: string): Employee;\\n  }\\n  \\n  /**\\n   * Corporation Warehouse API\\n   * @remarks\\n   * Requires the Warehouse API upgrade from your corporation.\\n   * @public\\n   */\\n  export interface WarehouseAPI {\\n    /**\\n     * Set material sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     */\\n    sellMaterial(divisionName: string, cityName: string, materialName: string, amt: string, price: string): void;\\n    /**\\n     * Set product sell data.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param amt - Amount to sell, can be \\\"MAX\\\"\\n     * @param price - Price to sell, can be \\\"MP\\\"\\n     * @param all - Sell in all city\\n     */\\n    sellProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      amt: string,\\n      price: string,\\n      all: boolean,\\n    ): void;\\n    /**\\n     * Discontinue a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     */\\n    discontinueProduct(divisionName: string, productName: string): void;\\n    /**\\n     * Set smart supply\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param enabled - smart supply enabled\\n     */\\n    setSmartSupply(divisionName: string, cityName: string, enabled: boolean): void;\\n    /**\\n     * Set material buy data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to buy\\n     */\\n    buyMaterial(divisionName: string, cityName: string, materialName: string, amt: number): void;\\n    /**\\n     * Get warehouse data\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @returns warehouse data\\n     */\\n    getWarehouse(divisionName: string, cityName: string): Warehouse;\\n    /**\\n     * Get product data\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @returns product data\\n     */\\n    getProduct(divisionName: string, productName: string): Product;\\n    /**\\n     * Get material data\\n     * @param divisionName - Name of the division\\n     * @param materialName - Name of the material\\n     * @returns material data\\n     */\\n    getMaterial(divisionName: string, cityName: string, materialName: string): Material;\\n    /**\\n     * Set market TA 1 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA1(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a material.\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param materialName - Name of the material\\n     * @param on - market ta enabled\\n     */\\n    setMaterialMarketTA2(divisionName: string, cityName: string, materialName: string, on: boolean): void;\\n    /**\\n     * Set market TA 1 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA1(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set market TA 2 for a product.\\n     * @param divisionName - Name of the division\\n     * @param productName - Name of the product\\n     * @param on - market ta enabled\\n     */\\n    setProductMarketTA2(divisionName: string, productName: string, on: boolean): void;\\n    /**\\n     * Set material export data\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    exportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Cancel material export\\n     * @param sourceDivision - Source division\\n     * @param sourceCity - Source city\\n     * @param targetDivision - Target division\\n     * @param targetCity - Target city\\n     * @param materialName - Name of the material\\n     * @param amt - Amount of material to export.\\n     */\\n    cancelExportMaterial(\\n      sourceDivision: string,\\n      sourceCity: string,\\n      targetDivision: string,\\n      targetCity: string,\\n      materialName: string,\\n      amt: number,\\n    ): void;\\n    /**\\n     * Purchase warehouse for a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    purchaseWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Upgrade warehouse\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    upgradeWarehouse(divisionName: string, cityName: string): void;\\n    /**\\n     * Create a new product\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     * @param productName - Name of the product\\n     * @param designInvest - Amount to invest for the design of the product.\\n     * @param marketingInvest - Amount to invest for the marketing of the product.\\n     */\\n    makeProduct(\\n      divisionName: string,\\n      cityName: string,\\n      productName: string,\\n      designInvest: number,\\n      marketingInvest: number,\\n    ): void;\\n  }\\n  \\n  /**\\n   * Corporation API\\n   * @public\\n   */\\n  export interface Corporation extends WarehouseAPI, OfficeAPI {\\n    /**\\n     * Get corporation data\\n     * @returns Corporation data\\n     */\\n    getCorporation(): CorporationInfo;\\n    /**\\n     * Get division data\\n     * @param divisionName - Name of the division\\n     * @returns Division data\\n     */\\n    getDivision(divisionName: string): Division;\\n    /**\\n     * Expand to a new industry\\n     * @param industryType - Name of the industry\\n     * @param divisionName - Name of the division\\n     */\\n    expandIndustry(industryType: string, divisionName: string): void;\\n    /**\\n     * Expand to a new city\\n     * @param divisionName - Name of the division\\n     * @param cityName - Name of the city\\n     */\\n    expandCity(divisionName: string, cityName: string): void;\\n    /**\\n     * Unlock an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    unlockUpgrade(upgradeName: string): void;\\n    /**\\n     * Level an upgrade.\\n     * @param upgradeName - Name of the upgrade\\n     */\\n    levelUpgrade(upgradeName: string): void;\\n    /**\\n     * Issue dividends\\n     * @param percent - Percent of profit to issue as dividends.\\n     */\\n    issueDividends(percent: number): void;\\n  }\\n  \\n  /**\\n   * General info about a corporation\\n   * @public\\n   */\\n  interface CorporationInfo {\\n    /** Name of the corporation */\\n    name: string;\\n    /** Funds available */\\n    funds: number;\\n    /** Revenue per second this cycle */\\n    revenue: number;\\n    /** Expenses per second this cycle */\\n    expenses: number;\\n    /** Indicating if the company is public */\\n    public: boolean;\\n    /** Total number of shares issues by this corporation */\\n    totalShares: number;\\n    /** Amount of share owned */\\n    numShares: number;\\n    /** Cooldown until shares can be sold again */\\n    shareSaleCooldown: number;\\n    /** Amount of shares issued */\\n    issuedShares: number;\\n    /** Price of the shares */\\n    sharePrice: number;\\n    /** State of the corporation. Possible states are START, PURCHASE, PRODUCTION, SALE, EXPORT. */\\n    state: string;\\n  }\\n  \\n  /**\\n   * Employee in an office\\n   * @public\\n   */\\n  interface Employee {\\n    /** Name of the employee */\\n    name: string;\\n    /** Morale */\\n    mor: number;\\n    /** Happiness */\\n    hap: number;\\n    /** Energy */\\n    ene: number;\\n    int: number;\\n    cha: number;\\n    exp: number;\\n    cre: number;\\n    eff: number;\\n    /** Salary */\\n    sal: number;\\n    /** City */\\n    loc: string;\\n    /** Current job */\\n    pos: string;\\n  }\\n  \\n  /**\\n   * Product in a warehouse\\n   * @public\\n   */\\n  interface Product {\\n    /** Name of the product */\\n    name: string;\\n    /** Demand for the product */\\n    dmd: number;\\n    /** Competition for the product */\\n    cmp: number;\\n    /** Production cost */\\n    pCost: number;\\n    /** Sell cost, can be \\\"MP+5\\\" */\\n    sCost: string | number;\\n  }\\n  \\n  /**\\n   * Material in a warehouse\\n   * @public\\n   */\\n  interface Material {\\n    /** Name of the material */\\n    name: string;\\n    /** Amount of material  */\\n    qty: number;\\n    /** Quality of the material */\\n    qlt: number;\\n  }\\n  \\n  /**\\n   * Warehouse for a division in a city\\n   * @public\\n   */\\n  interface Warehouse {\\n    /** Amount of size upgrade bought */\\n    level: number;\\n    /** City in which the warehouse is located */\\n    loc: string;\\n    /** Total space in the warehouse */\\n    size: number;\\n    /** Used space in the warehouse */\\n    sizeUsed: number;\\n  }\\n  \\n  /**\\n   * Office for a division in a city.\\n   * @public\\n   */\\n  interface Office {\\n    /** City of the office */\\n    loc: string;\\n    /** Maximum number of employee */\\n    size: number;\\n    /** Minimum amount of energy of the employees */\\n    minEne: number;\\n    /** Maximum amount of energy of the employees */\\n    maxEne: number;\\n    /** Minimum happiness of the employees */\\n    minHap: number;\\n    /** Maximum happiness of the employees */\\n    maxHap: number;\\n    /** Maximum morale of the employees */\\n    maxMor: number;\\n    /** Name of all the employees */\\n    employees: string[];\\n    /** Positions of the employees */\\n    employeeProd: EmployeeJobs;\\n  }\\n  \\n  /**\\n   * Object representing the number of employee in each job.\\n   * @public\\n   */\\n  interface EmployeeJobs {\\n    Operations: number;\\n    Engineer: number;\\n    Business: number;\\n    Management: number;\\n    \\\"Research & Development\\\": number;\\n    Training: number;\\n    Unassigned: number;\\n  }\\n  \\n  /**\\n   * Corporation division\\n   * @public\\n   */\\n  interface Division {\\n    /** Name of the division */\\n    name: string;\\n    /** Type of division, like Aggriculture */\\n    type: string;\\n    /** Awareness of the division */\\n    awareness: number;\\n    /** Popularity of the division */\\n    popularity: number;\\n    /** Production multiplier */\\n    prodMult: number;\\n    /** Amount of research in that division */\\n    research: number;\\n    /** Revenue last cycle */\\n    lastCycleRevenue: number;\\n    /** Expenses last cycle */\\n    lastCycleExpenses: number;\\n    /** Revenue this cycle */\\n    thisCycleRevenue: number;\\n    /** Expenses this cycle */\\n    thisCycleExpenses: number;\\n    /** All research bought */\\n    upgrades: number[];\\n    /** Cities in which this division has expanded */\\n    cities: string[];\\n  }\\n  \\n  /**\\n   * Interface Theme\\n   * @internal\\n   */\\n  interface UserInterfaceTheme {\\n    [key: string]: string | undefined;\\n    primarylight: string;\\n    primary: string;\\n    primarydark: string;\\n    successlight: string;\\n    success: string;\\n    successdark: string;\\n    errorlight: string;\\n    error: string;\\n    errordark: string;\\n    secondarylight: string;\\n    secondary: string;\\n    secondarydark: string;\\n    warninglight: string;\\n    warning: string;\\n    warningdark: string;\\n    infolight: string;\\n    info: string;\\n    infodark: string;\\n    welllight: string;\\n    well: string;\\n    white: string;\\n    black: string;\\n    hp: string;\\n    money: string;\\n    hack: string;\\n    combat: string;\\n    cha: string;\\n    int: string;\\n    rep: string;\\n    disabled: string;\\n    backgroundprimary: string;\\n    backgroundsecondary: string;\\n    button: string;\\n  }\",\"filename\":\"/types/NetscriptDefinitions.d.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"4b76b2f549749e8bb971f716b234063dc0844d2789841eee83b1b326816e1c03\",\"moduleSequenceNumber\":315}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** This is just an arbitrary identifier to signal that this script has finished redeployment */\\r\\nexport const DeployKey = \\\"6uTdsrmCVG8^Bee*^UB46myYQya&4Qc#\\\";\\r\\n/** There is no way to get how this script is called, therefore it's hardcoded here */\\r\\nexport const ScriptName = \\\"init.js\\\";\\r\\nexport const DeploymenScriptFolder = \\\"/deployment/\\\";\\r\\nexport const HomeHost = \\\"home\\\";\\r\\nexport const SelfUpdateFile = \\\"self-update.js\\\";\\r\\nexport const RedeployFile = \\\"redeploy.js\\\";\\r\\nexport const SelfUpdateLocation = `${DeploymenScriptFolder}${SelfUpdateFile}`;\\r\\nexport const RedeployLocation = `${DeploymenScriptFolder}${RedeployFile}`;\\r\\n/**\\r\\n * The idea here is to wget once, then deploy onto home and run this script, automatically updating itself\\r\\n * @param {NS} ns\\r\\n */\\r\\nexport async function main(ns) {\\r\\n    ns.ps().filter(x => x.filename !== ns.getScriptName()).forEach(x => ns.kill(x.pid));\\r\\n    const pid = ns.exec(SelfUpdateLocation, HomeHost, 1, ...ns.args);\\r\\n    if (pid === 0) {\\r\\n        ns.tprint(`## FAILED to spawn self-updater, start manually with: run ${SelfUpdateLocation} -t 1`);\\r\\n        return;\\r\\n    }\\r\\n    else {\\r\\n        ns.tprint(`## Spawned self updater, PID: [${pid}]`);\\r\\n    }\\r\\n}\\r\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImluaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsZ0dBQWdHO0FBQ2hHLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxrQ0FBa0MsQ0FBQTtBQUUzRCxzRkFBc0Y7QUFDdEYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxjQUFjLENBQUM7QUFDcEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUMvQixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUUxQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLHFCQUFxQixHQUFHLGNBQWMsRUFBRSxDQUFBO0FBQzdFLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcscUJBQXFCLEdBQUcsWUFBWSxFQUFFLENBQUE7QUFFekU7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUM3QixFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQ25GLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxJQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUU7UUFDVixFQUFFLENBQUMsTUFBTSxDQUFDLDZEQUE2RCxrQkFBa0IsT0FBTyxDQUFDLENBQUM7UUFDbEcsT0FBTztLQUNWO1NBQU07UUFDSCxFQUFFLENBQUMsTUFBTSxDQUFDLGtDQUFrQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZEO0FBRUwsQ0FBQyJ9\",\"filename\":\"init.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.6,\"server\":\"home\",\"_hash\":\"4088c86950e33baa5248ef455a82a522914000a008905faefe69972bb3deec44\",\"moduleSequenceNumber\":316,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"kill\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n * @typedef {import('./types/NetscriptDefinitions').Player} Player\\n */\\n\\n\\nimport { formatMoney } from './formatting.js';\\nimport { numAvailableExploits, isExploitAvailable, runExploit, exploits } from './exploits.js';\\n\\n/**\\n * @class\\n * @constructor\\n * @public\\n */\\nexport class Zombie {\\n\\t/**\\n\\t * @param {Server} server\\n\\t * @param {NS} ns\\n\\t * @param {string} parentHostname\\n\\t * @param {number} depth\\n\\t */\\n\\tconstructor(server, ns, parentHostname = undefined, depth = 0) {\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.hostname = server.hostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.growth = Math.min(server.serverGrowth, 100);\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.memory = server.maxRam;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.level = server.requiredHackingSkill;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.ports = server.numOpenPortsRequired;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxMoney = server.moneyMax;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.security = server.minDifficulty;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.money = formatMoney(this.maxMoney);\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.faction = server.organizationName;\\n\\t\\t/**\\n\\t\\t * @type {string}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.parent = parentHostname;\\n\\t\\t/**\\n\\t\\t * @type {number}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.depth = depth;\\n\\t\\t/**\\n\\t\\t * @type {boolean}\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.setup = false;\\n\\t\\tthis.updateStats(ns);\\n\\t}\\n\\n\\t/**\\n\\t * Updates cached computed statistics with latest live information\\n\\t * @param {NS} ns\\n\\t */\\n\\tupdateStats(ns) {\\n\\t\\tconst player = ns.getPlayer();\\n\\t\\tthis.server = ns.getServer(this.hostname);\\n\\t\\tthis.hackEffect = calculateMaxMoneyHacked(this.server, player);\\n\\t\\tthis.effect = (this.hackEffect * 100).toFixed(2);\\n\\t\\tthis.hackThreads = Math.floor(35.82 / (this.hackEffect * 100)); // 35.82% per hack will give 30% final funds after 4 hacks\\n\\t\\t/**\\n\\t\\t * maximum number of threads that should be used to target this server for naive loops\\n\\t\\t * @property\\n\\t\\t * @public\\n\\t\\t */\\n\\t\\tthis.maxTargetingThreads = (this.hackThreads * 25); // maximum number of threads that can target the server for naive hack loops\\n\\t\\tthis.hackChance = calculateMaxHackingChance(this.server, player);\\n\\t\\tthis.chance = (this.hackChance * 100).toFixed(0);\\n\\t\\tthis.usedMemory = this.server.ramUsed;\\n\\t\\tthis.availableMemory = this.memory - this.usedMemory;\\n\\t\\tthis.root = this.server.hasAdminRights;\\n\\t\\tthis.contracts = ns.ls(this.hostname, \\\".cct\\\").length;\\n\\t\\tthis.weakenTime = calculateMinWeakenTime(this.server, player);\\n\\t\\tthis.availableMoney = this.server.moneyAvailable;\\n\\t\\tthis.weak = this.weakenTime.toFixed(0);\\n\\t\\tthis.currentSecurity = this.server.hackDifficulty;\\n\\t\\tthis.shouldCrack = this.root ? \\\"done\\\" : (this.level <= ns.getHackingLevel() && this.ports <= numAvailableExploits(ns)) ? \\\"true\\\" : \\\"false\\\";\\n\\t\\tthis.backdoor = this.server.backdoorInstalled;\\n\\t\\tthis.xps = (calculateXp(this.server, player) / this.weakenTime).toFixed(2);\\n\\t\\treturn this;\\n\\t}\\n\\n\\t/**\\n\\t * (maxMoney ^ 1.25) * hackChance * hackEffect * (growth ^ 1.1)\\n\\t */\\n\\tget currentRating() {\\n\\t\\treturn (Math.pow(this.maxMoney, 1.25) * this.hackEffect * Math.pow(Math.min(this.growth, 100), 1.1) / this.weakenTime) / 1e3;\\n\\t}\\n\\n\\tget rating() {\\n\\t\\treturn formatMoney(this.currentRating / 1e3);\\n\\t}\\n\\n\\tget shouldGrow() {\\n\\t\\treturn this.availableMoney < this.maxMoney;\\n\\t}\\n\\n\\tget maxRunningThreads() {\\n\\t\\tlet maxThreads = Math.floor(this.memory / 1.75);\\n\\t\\treturn this.hostname === \\\"home\\\" ? Math.floor(maxThreads * .8) : maxThreads;\\n\\t}\\n\\n\\tisAtMinSecurity() {\\n\\t\\treturn this.currentSecurity === this.security;\\n\\t}\\n\\n\\tisAtMaxMoney() {\\n\\t\\treturn this.maxMoney === this.availableMoney;\\n\\t}\\n\\n\\t/**\\n\\t * @param {string} scriptName\\n\\t */\\n\\tisScriptRunning(ns, scriptName) {\\n\\t\\treturn ns.scriptRunning(scriptName, this.hostname);\\n\\t}\\n\\n\\t/**\\n\\t * @param {Zombie} target\\n\\t * @param {string} scriptName\\n\\t */\\n\\tgetRunningScriptLogs(ns, target, scriptName) {\\n\\t\\tlet script = ns.getRunningScript(scriptName, this.hostname, target.hostname);\\n\\t\\treturn script ? script.logs : [];\\n\\t}\\n\\n\\t/**\\n\\t * @param {string[]} files \\n\\t */\\n\\tasync uploadFiles(ns, files) {\\n\\t\\tawait ns.scp(files, this.hostname);\\n\\t}\\n\\n\\t/**\\n\\t * @param {ns}\\n\\t * @param {Zombie} zombie \\n\\t */\\n\\tgetRoot(ns) {\\n\\t\\texploits.filter(exploit => isExploitAvailable(ns, exploit))\\n\\t\\t\\t.map(exploit => exploit.substring(0, exploit.indexOf(\\\".\\\")))\\n\\t\\t\\t.forEach(exploit => runExploit(ns, exploit, this.hostname));\\n\\t\\tns.nuke(this.hostname);\\n\\t\\tthis.updateStats(ns);\\n\\t\\tns.print(\\\"Rooted server: \\\" + this.hostname);\\n\\t\\tns.tprintf(\\\"SUCCESS | Rooted server: %s\\\", this.hostname);\\n\\t}\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateXp(server, player) {\\n\\tif (server.baseDifficulty == null) {\\n\\t\\tserver.baseDifficulty = server.hackDifficulty;\\n\\t}\\n\\treturn 3 + (server.baseDifficulty * player.hacking_exp_mult * .03);\\n}\\n\\n/**\\n * @param {Server} server\\n * @param {Player} player\\n */\\nfunction calculateMinWeakenTime(server, player) {\\n\\tconst difficultyMult = server.requiredHackingSkill * server.minDifficulty;\\n\\n\\tconst baseSkill = 50;\\n\\tlet skillFactor = 2.5 * difficultyMult + 500;\\n\\n\\tskillFactor /= player.hacking + baseSkill;\\n\\n\\tconst weakenTimeMultiplier = 20;\\n\\treturn (weakenTimeMultiplier * skillFactor) /\\n\\t\\t(player.hacking_speed_mult * calculateIntelligenceBonus(player.intelligence, 1));\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxHackingChance(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = 1.75 * player.hacking;\\n\\tconst skillChance = (skillMult - server.requiredHackingSkill) / skillMult;\\n\\tconst chance = skillChance * difficultyMult * player.hacking_chance_mult * calculateIntelligenceBonus(player.intelligence, 1);\\n\\treturn Math.min(Math.max(chance, 0), 1);\\n}\\n\\nfunction calculateIntelligenceBonus(intelligence, weight = 1) {\\n\\treturn 1 + (weight * Math.pow(intelligence, 0.8)) / 600;\\n}\\n\\n/**\\n * \\n * @param {Server} server \\n * @param {Player} player \\n * @returns \\n */\\nfunction calculateMaxMoneyHacked(server, player) {\\n\\tconst difficultyMult = (100 - server.minDifficulty) / 100;\\n\\tconst skillMult = (player.hacking - (server.requiredHackingSkill - 1)) / player.hacking;\\n\\tconst percentMoneyHacked = (difficultyMult * skillMult * player.hacking_money_mult) / 240;\\n\\treturn Math.min(Math.max(percentMoneyHacked, 0), 1);\\n}\\n\\n/**\\n * Compares two Zombie objects\\n * @param {Zombie} a\\n * @param {Zombie} b\\n * @param {string} field\\n */\\nexport function compareZombie(a, b, field, asc = false) {\\n\\t// Swap order if we're sorting in ascending order\\n\\tif (asc) {\\n\\t\\t[a, b] = [b, a];\\n\\t}\\n\\t// for formatted fields, use the base field to sort off\\n\\tswitch (field) {\\n\\t\\tcase \\\"rating\\\":\\n\\t\\t\\tfield = \\\"currentRating\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"effect\\\":\\n\\t\\t\\tfield = \\\"hackEffect\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"weak\\\":\\n\\t\\t\\tfield = \\\"weakenTime\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"chance\\\":\\n\\t\\t\\tfield = \\\"hackChance\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"threads\\\":\\n\\t\\t\\tfield = \\\"maxTargetingThreads\\\";\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t}\\n\\tswitch (field) {\\n\\t\\tcase \\\"hostname\\\":\\n\\t\\tcase \\\"parent\\\":\\n\\t\\tcase \\\"faction\\\":\\n\\t\\tcase \\\"canRoot\\\":\\n\\t\\t\\treturn a.hostname.localeCompare(b.hostname);\\n\\t\\tcase \\\"nuke\\\":\\n\\t\\tcase \\\"root\\\":\\n\\t\\t\\treturn a[field] === b[field] ? 0 : a[field] ? -1 : 1;\\n\\t\\tdefault:\\n\\t\\t\\treturn b[field] - a[field];\\n\\t}\\n}\",\"filename\":\"zombie.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.65,\"server\":\"home\",\"_hash\":\"c451771ad3038548ab608ca0e137ebfc883bc858770600bfc72b76493e8b7b7e\",\"moduleSequenceNumber\":317,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\\\"use strict\\\";\\nimport { exploits, isExploitAvailable, runExploit } from './exploits.js';\\n\\n/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n/**\\n * Performs a search from \\\"home\\\" server walking the tree up to the given depth, or all servers\\n * if no depth is given\\n * @param {{ns: NS, \\n * depth: number, \\n * type: string, \\n * host: string\\n * }} options\\n * @return {{depth: number, server: Server, parent: string}[]} list of all servers up to the given depth\\n */\\nexport function findServers(options) {\\n\\n\\tlet q = [ { server: options.ns.getServer(\\\"home\\\"), depth: 0 }];\\n\\tlet found = [];\\n\\twhile(q.length > 0) {\\n\\t\\tconst nextItem = q.shift();\\n\\t\\tif (nextItem.depth >= options.depth && options.depth > 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\t\\n\\t\\tlet children = getNonParentNeighbors(options.ns, nextItem.parent, nextItem.server.hostname, nextItem.depth + 1);\\n\\t\\tfor (const child of children) {\\n\\t\\t\\tif (found.indexOf(child.server.hostname) === -1) {\\n\\t\\t\\t\\tif (options.type === \\\"bfs\\\") {\\n\\t\\t\\t\\t\\tq.push(child);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tq.unshift(child);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfound.push(child);\\n\\t\\t\\t\\t// If we've specified to find a specific server exit when we've found it \\n\\t\\t\\t\\tif (options.host === child.server.hostname) {\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn found;\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} parent The parent node\\n * @param {string} server The server to scan\\n * @param {number} depth How deep in the tree the server is\\n * @return {{depth: number, server: Server, parent: string}[]} - Array of all non-parent neighbor nodes\\n */\\n function getNonParentNeighbors(ns, parent, server, depth) {\\n\\treturn ns.scan(server)\\n\\t\\t.filter(child => child !== parent)\\n\\t\\t.map(child => {return { server: ns.getServer(child), parent: server, depth: depth}});\\n}\\n\\n/**\\n * Note: requires access to Singularity (Source File 4 - level 1)\\n * @param {string} server \\n */\\nexport async function installBackdoor(ns, server) {\\n\\tlet files = ns.getOwnedSourceFiles().filter(file => file.n === 4);\\n\\tif (!files || files[0].lvl < 1) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\t// if the server can't be rooted don't do anything\\n\\tif (!server.root) {\\n\\t\\treturn Promise.resolve(false);\\n\\t}\\n\\tlet chain = getConnectionChain(server);\\n\\t// If a connection can't be established don't try anything\\n\\tif (!chain) return false;\\n\\n\\tfor (hostname of chain) {\\n\\t\\tif (!ns.connect(hostname)) {\\n\\t\\t\\treturn Promise.resolve(false);\\n\\t\\t}\\n\\t}\\n\\tawait ns.installBackdoor();\\n\\tns.connect(\\\"home\\\");\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server \\n * @return {string[]} array of server hostnames\\n */\\nexport function getConnectionChain(ns, server) {\\n\\tlet allServers = {};\\n\\tfindServers({ns: ns, depth: -1, host: server, type: \\\"dfs\\\"})\\n\\t\\t.forEach(obj => allServers[obj.server.hostname] = obj);\\n\\t\\n\\t// ns.tprintf(\\\"%j\\\", allServers);\\n\\t// .reduce((obj, cur) => Object.defineProperty(obj, cur.server.hostname, { value: cur, writeable: true, enumerable: true } ), {});\\n\\n\\t// if the key doesn't exist the hostname isn't valid so we can't walk the connection chain backwards\\n\\tif (!allServers[server]) return;\\n\\n\\tlet chain = [ allServers[server] ];\\n\\tlet found = false;\\n\\twhile (!found) {\\n\\t\\tconst next = allServers[chain[0].parent];\\n\\t\\tif (typeof(next) === 'undefined') {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (next.parent === \\\"home\\\") {\\n\\t\\t\\tfound = true;\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tchain.unshift(next);\\n\\t}\\n\\treturn found ? chain.map(current => current.server.hostname) : [];\\n}\",\"filename\":\"util.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":72.8,\"server\":\"home\",\"_hash\":\"2a5ed0b04f51c1607b925b76b4bef13feadd0034033460cb622d4f6b6c20f244\",\"moduleSequenceNumber\":318,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"installBackdoor\",\"cost\":32}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @param {number} money Amount to format\\n * @return {string} formatted amount\\n */\\n export function formatMoney(money, digits = true) {\\n\\tconst signs = [\\n\\t\\t{ val: 1, sign: \\\"\\\", digs: 0 },\\n\\t\\t{ val: 1e3, sign: \\\"K\\\", digs: 1 },\\n\\t\\t{ val: 1e6, sign: \\\"M\\\", digs: 1 },\\n\\t\\t{ val: 1e9, sign: \\\"B\\\", digs: 1 },\\n\\t\\t{ val: 1e12, sign: \\\"T\\\", digs: 1 },\\n\\t\\t{ val: 1e15, sign: \\\"Q\\\", digs: 1 }\\n\\t]\\n\\tfor (const sign of signs.reverse()) {\\n\\t\\tif(money >= sign.val) {\\n\\t\\t\\treturn (money / sign.val).toFixed(sign.digs) + sign.sign;\\n\\t\\t}\\n\\t}\\n\\treturn money === 0 ? money.toFixed(0) : money.toFixed(2);\\n}\",\"filename\":\"formatting.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"ea932da14af34add7de199a3633a53c1e0e0f8371e0e43014ad4268af571bc59\",\"moduleSequenceNumber\":319,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { Logger } from './log.js';\\nimport { findServers } from './util.js';\\nimport { compareZombie, Zombie } from './zombie.js';\\nimport { numAvailableExploits } from './exploits.js';\\n\\nlet _serverLogger;\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\t_serverLogger = new Logger(ns, false);\\n\\tlet HEADER_LENGTHS = {\\n\\t\\thostname: 18, depth: 3, contracts: 2, level: 4, shouldCrack: 5, root: 5, backdoor: 5, ports: 2, \\n\\t\\tmoney: 7, growth: 3, effect: 5, weak: 5, chance: 4, rating: 6, xps: 5, security: 4, parent: 18, faction: 0, maxTargetingThreads: 4\\n\\t};\\n\\n\\tlet SERVER_HEADER = {\\n\\t\\thostname: \\\"Server Name\\\", depth: \\\"Dep\\\", contracts: \\\"Cx\\\", level: \\\"LvL\\\", shouldCrack: \\\"Nuke\\\", root: \\\"Root\\\", backdoor: \\\"Back\\\", ports: \\\"P\\\", weak: \\\"Weak\\\",\\n\\t\\tmoney: \\\"Money\\\", growth: \\\"Gro\\\", effect: \\\"Eff\\\", chance: \\\"Chnc\\\", rating: \\\"Rate\\\", xps: \\\"XPS\\\", security: \\\"Sec\\\", parent: \\\"Parent\\\", faction: \\\"Faction\\\", maxTargetingThreads: \\\"Thrd\\\"\\n\\t};\\n\\n\\tlet [depth, sort] = ns.args;\\n\\tif (!depth || isNaN(depth)) {\\n\\t\\tdepth = -1;\\n\\t}\\n\\tif (!sort) {\\n\\t\\tsort = \\\"rating\\\";\\n\\t}\\n\\tlet asc = false;\\n\\tif (sort.endsWith(\\\"-\\\")) {\\n\\t\\tasc = true;\\n\\t\\tsort = sort.substring(0, sort.indexOf(\\\"-\\\"));\\n\\t}\\n\\t_serverLogger.info(\\\"Available Exploits: %s\\\", numAvailableExploits(ns));\\n\\t_serverLogger.info(\\\"Starting scan with depth %i\\\", depth);\\n\\n\\tSERVER_HEADER[sort] = (asc ? \\\"-\\\" : \\\"+\\\") + SERVER_HEADER[sort] + (asc ? \\\"-\\\" : \\\"+\\\");\\n\\tHEADER_LENGTHS[sort] += 2;\\n\\tconst INFO_FORMAT = \\\"%(hostname)-\\\" + HEADER_LENGTHS.hostname \\n\\t+ \\\"s | %(depth)\\\" + HEADER_LENGTHS.depth\\n\\t+ \\\"s | %(contracts)\\\" + HEADER_LENGTHS.contracts \\n\\t+ \\\"s | %(level)\\\" + HEADER_LENGTHS.level \\n\\t+ \\\"s | %(shouldCrack)\\\" + HEADER_LENGTHS.shouldCrack\\n\\t+ \\\"s | %(root)\\\" + HEADER_LENGTHS.root\\n\\t+ \\\"s | %(backdoor)\\\" + HEADER_LENGTHS.backdoor\\n\\t+ \\\"s | %(ports)\\\" + HEADER_LENGTHS.ports\\n\\t+ \\\"s | %(money)\\\" + HEADER_LENGTHS.money\\n\\t+ \\\"s | %(growth)\\\" + HEADER_LENGTHS.growth\\n\\t+ \\\"s | %(effect)\\\" + HEADER_LENGTHS.effect\\n\\t+ \\\"s | %(maxTargetingThreads)\\\" + HEADER_LENGTHS.maxTargetingThreads\\n\\t+ \\\"s | %(weak)\\\" + HEADER_LENGTHS.weak\\n\\t+ \\\"s | %(chance)\\\" + HEADER_LENGTHS.chance\\n\\t+ \\\"s | %(rating)\\\" + HEADER_LENGTHS.rating\\n\\t+ \\\"s | %(xps)\\\" + HEADER_LENGTHS.xps\\n\\t+ \\\"s | %(security)\\\" + HEADER_LENGTHS.security\\n\\t+ \\\"s | %(parent)\\\" + HEADER_LENGTHS.parent\\n\\t+ \\\"s\\\" // | %(faction)s\\\";\\n\\n\\tconst servers = findServers({ns: ns, depth: depth, type: \\\"bfs\\\"})\\n\\t\\t.filter(current => !current.server.hostname.startsWith(\\\"zombie\\\"))\\n\\t\\t.map(current => new Zombie(current.server, ns, current.parent, current.depth))\\n\\t\\t.sort((a, b) => compareZombie(a, b, sort, asc));\\n\\t_serverLogger.success(\\\"Found %i Servers: \\\", servers.length);\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\n\\n\\tfor (const zombie of servers) {\\n\\t\\tawait downloadTextFiles(ns, zombie.hostname)\\n\\t\\t\\t.then(() => _serverLogger.info(INFO_FORMAT, zombie));\\n\\t}\\n\\t_serverLogger.success(INFO_FORMAT, SERVER_HEADER);\\t\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n */\\nexport async function downloadTextFiles(ns, server) {\\n\\tconst files = ns.ls(server)\\n\\t\\t.filter(fileName => !fileName.endsWith(\\\".js\\\") && fileName !== \\\"A-Green-Tomorrow.lit\\\" && !ns.fileExists(fileName, \\\"home\\\"))\\n\\t\\t.filter(fileName => fileName.endsWith(\\\".txt\\\") || fileName.endsWith(\\\".lit\\\"));\\n\\tif (files.length == 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\t_serverLogger.warn(\\\"Found files to download: \\\" + files);\\n\\tawait ns.scp(files, server, \\\"home\\\");\\n}\",\"filename\":\"serverinfo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///7847c457-60a2-451c-9352-9f5ae59dd3ec\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///7847c457-60a2-451c-9352-9f5ae59dd3ec\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///9d42e7d6-a62e-41d1-a3be-e5629fe7e9ba\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///74b08cd8-ed6f-40e8-941e-8ca4c916a864\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///7847c457-60a2-451c-9352-9f5ae59dd3ec\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///f031d142-4cdb-481a-8bb0-f1b5ac642121\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///5845af5d-ad01-45c1-acfd-7fd37b62555f\"},{\"filename\":\"serverinfo.js\",\"url\":\"blob:file:///b0d35c35-00d4-4525-a2b9-a8f1eab9fe53\"}],\"ramUsage\":6.85,\"server\":\"home\",\"_hash\":\"ac5ceac2f001c80991ce43bdca68d57d62cc12a3ce46ca6e5a97d38ceb73b26c\",\"moduleSequenceNumber\":320,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n/**\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\n}\",\"filename\":\"augmentinfo.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"37bc85d3d380af949270c66774c3ac05871b964a503bde7bd341b7bc7621aa3c\",\"moduleSequenceNumber\":321,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nexport const exploits = [\\\"brutessh.exe\\\", \\\"ftpcrack.exe\\\", \\\"relaysmtp.exe\\\", \\\"httpworm.exe\\\", \\\"sqlinject.exe\\\"];\\n\\n/**\\n * Counts the number of exploits that are currently unlocked\\n * @param {NS} ns \\n */\\nexport function numAvailableExploits(ns) {\\n    let total = 0;\\n    for (const exploit of exploits) {\\n        if (isExploitAvailable(ns, exploit)) {\\n            total++;\\n        }\\n    }\\n\\treturn total;\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploit \\n * @returns \\n */\\n export function isExploitAvailable(ns, exploit) {\\n\\treturn ns.fileExists(exploit);\\n}\\n\\n/**\\n * \\n * @param {NS} ns \\n * @param {string} exploitName\\n * @param {string} hostname\\n */\\nexport function runExploit(ns, exploitName, hostname) {\\n    switch(exploitName.toLocaleLowerCase()) {\\n        case \\\"ftpcrack\\\":\\n            return ns.ftpcrack(hostname);\\n        case \\\"relaysmtp\\\": \\n            return ns.relaysmtp(hostname);\\n        case \\\"httpworm\\\":\\n            return ns.httpworm(hostname);\\n        case \\\"sqlinject\\\":\\n            return ns.sqlinject(hostname);\\n        case \\\"brutessh\\\":\\n            return ns.brutessh(hostname);\\n        default:\\n\\n    }\\n}\",\"filename\":\"exploits.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.95,\"server\":\"home\",\"_hash\":\"0de65fbf6ee34ce155221e4b6778ef0c38fafb121b10557d115188c3a40ad3a7\",\"moduleSequenceNumber\":322,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [threads] = ns.args;\\n\\tconst target = \\\"harakiri-sushi\\\";\\n\\tns.print(\\\"Starting up hack against harakiri-sushi\\\");\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 80_000_000;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tns.exec(\\\"weaken.js\\\", threads, target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tns.exec(\\\"grow.js\\\", threads, target);\\n\\t\\t} else {\\n\\t\\t\\tns.exec(\\\"hack.js\\\", threads, target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-harakiri.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.1,\"server\":\"home\",\"_hash\":\"45231ae9c32afc4913e36049a208ae60f0e90391fce4e6935b0e2d932bbabd68\",\"moduleSequenceNumber\":323,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\n import * as log from \\\"./log.js\\\";\\n\\n/** \\t\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\t// initialize our logging system\\n\\tlog.initialize(ns);\\n    ns.disableLog(\\\"sleep\\\");\\n\\n\\t// run the main script\\n\\twhile(true) {\\n        let script = ns.getRunningScript(\\\"control.js\\\");\\n        if (!script) {\\n            log.warn(\\\"Restarting control.js\\\");\\n            ns.run(\\\"control.js\\\");\\n        } else {\\n            ns.print(\\\"control.js still running\\\");\\n        }\\n        await ns.sleep(1000);\\n    }\\n}\",\"filename\":\"watcher.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///cbdf7469-bc7c-42a6-96c8-90cbd0e2382e\"},{\"filename\":\"watcher.js\",\"url\":\"blob:file:///29301dcb-0c8e-4961-9b80-2b15ddb1e36e\"}],\"ramUsage\":2.9,\"server\":\"home\",\"_hash\":\"6e0513b3d6caeaf16dfe91b8efb5e837b729ba36148d833a1fb008a83df5fe94\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"run\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers } from \\\"infodump.js\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlet servers = findServers(ns, -1).filter(server => shouldStartHack(server, ns));\\n\\n\\twhile (servers.length > 0) {\\n\\t\\tawait startHack(ns, servers.shift());\\n\\t}\\n}\\n\\n/**\\n * @param {string} server\\n * @param {NS} ns\\n * @return if this server should be exploited\\n */\\nfunction shouldStartHack(server, ns) {\\n\\treturn ns.hasRootAccess(server);\\n}\\n\\n/**\\n * @param {NS} ns\\n * @param {string} server\\n * @returns pid\\n **/\\nasync function startHack(ns, server) {\\n\\tawait ns.scp(\\\"simple-hack.js\\\", server);\\n\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(server)) / 2.2);\\n\\tif (numThreads <= 0) {\\n\\t\\treturn Promise.resolve();\\n\\t}\\n\\tns.tprint(server + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(server);\\n\\tns.exec('simple-hack.js', server, numThreads);\\n\\treturn Promise.resolve();\\n}\",\"filename\":\"/old/start-hacks.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":0,\"server\":\"home\",\"_hash\":\"d77c59122aeb0c9fb4084b9ba23d66ed241a542bd3bf5c061481854ba010b645\",\"moduleSequenceNumber\":325}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst target = \\\"max-hardware\\\";\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = 10;\\n\\tconst minMoney = 200_000_000;\\n\\twhile (true) {\\n\\t\\t// Ratios: 7 weaken, 36 hack, 57 grow\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\t// reduces security by threads * 0.05\\n\\t\\t\\t// takes 60 seconds to run\\n\\t\\t\\t// .000_83/sec\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\t// Raises security by threads * .004\\n\\t\\t\\t// takes 45 seconds to run\\n\\t\\t\\t// .000_088/sec (19 grows per 2 weaken)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\t// raises security by threads * .002\\n\\t\\t\\t// takes 15 seconds to run\\n\\t\\t\\t// .000_13/sec (12 hacks per 2 weaken)\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/simple-hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.2,\"server\":\"home\",\"_hash\":\"6b0a2d084cf161df1c49615cbb2e11586591e7f7a3a43ae87b000d842359b45a\",\"moduleSequenceNumber\":326,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.print(\\\"No target host given\\\");\\n\\t\\texit;\\n\\t}\\n\\tconst target = ns.args[0];\\n\\tns.print(\\\"Starting up hack against: \\\" + target);\\n\\tconst maxSecurity = ns.getServerMinSecurityLevel(target) + 5;\\n\\tconst minMoney = ns.getServerMaxMoney(target) * .75;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > maxSecurity) {\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\t} else if (ns.getServerMoneyAvailable(target) < minMoney) {\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\t} else {\\n\\t\\t\\tawait ns.hack(target);\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"/old/hack-target.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"_hash\":\"09f67151de054766890602ddad2ca7124dc66bd2f49d4c525454f2764c58bc32\",\"moduleSequenceNumber\":327,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('../types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tif (!ns.args[0]) {\\n\\t\\tns.tprintf(\\\"ERROR| %s\\\", \\\"Missing arguments, check for runHost\\\");\\n\\t\\texit;\\n\\t}\\n\\tlet eTarget = ns.args[0];\\n\\tawait ns.scp(\\\"simple-hack.js\\\", eTarget);\\n\\t// const memNeeded = Math.max(ns.getScriptRam(\\\"weaken.js\\\"), ns.getScriptRam(\\\"hack.js\\\"), ns.getScriptRam(\\\"grow.js\\\"));\\n\\t// const controlMem = ns.getScriptRam(\\\"hack-harakiri.js\\\");\\n\\t// const minMemNeeded = controlMem + memNeeded;\\n\\t// if (ns.getServerMaxRam(eTarget) < minMemNeeded) {\\n\\t// \\tns.tprint(\\\"Server does not have enough memory to run hack control locally\\\");\\n\\t// \\texit;\\n\\t// }\\n\\tlet numThreads = Math.floor((ns.getServerMaxRam(eTarget)) / 2.2);\\n\\tns.tprint(eTarget + \\\" will have \\\" + numThreads + \\\" worker threads\\\");\\n\\t// kill anything running on the remote system then start up the new script\\n\\tns.killall(eTarget);\\n\\tns.exec('simple-hack.js', eTarget, numThreads);\\n}\",\"filename\":\"/old/remote-exec.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.05,\"server\":\"home\",\"_hash\":\"7d4f447ed51a5dd10455e91ae653c6a090fad6e8c962a989feb3af473697478c\",\"moduleSequenceNumber\":328,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('../types/NetscriptDefinitions').NS} NS\\n */\\nimport { findServers, getRootForServer } from \\\"../util.js\\\";\\nimport * as log from \\\"../log\\\";\\nimport { Zombie } from \\\"../zombie\\\";\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n\\tlog.initialize(ns);\\n\\tlet servers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\t// TODO: connect to each server in the tree and backdoor it\\n\\t// servers.filter(server => ns.hasRootAccess(server))\\n\\t// \\t.forEach(server => checkBackDoor(server, ns));\\n\\tlet exploitable = servers.filter(server => server.shouldCrack === \\\"true\\\");\\n\\n\\tlog.info(\\\"Found exploitable servers: %j\\\", exploitable.map(zombie => zombie.hostname));\\n\\tif (ns.args[0] === \\\"-d\\\") {\\n\\t\\texploitable.forEach(server => getRootForServer(server));\\n\\t} else {\\n\\t\\tlog.warn(\\\"To spread to new servers run with -d options.\\\");\\n\\t}\\n}\",\"filename\":\"/old/spread.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.85,\"server\":\"home\",\"_hash\":\"a42ea0dd68be3b73ffc5d89d8e04cb14c2e442a8f81e24465404fcc50f138009\",\"moduleSequenceNumber\":329,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"hacknodes.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\"moduleSequenceNumber\":330,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { formatMoney } from './formatting';\\nimport { Logger } from './log';\\n/** \\n * Main script for handling upgrades.\\n *\\n * @param {NS} ns\\n **/\\n export async function main(ns) {\\n\\tconst log = new Logger(ns, false);\\n\\t// initialize our logging system\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"getPurchasedServers\\\");\\n\\tns.disableLog(\\\"getPurchasedServerCost\\\");\\n\\n\\t// TODO: adjust\\n\\tconst maxPurchasedServers = 0;\\n\\tconst wantedRam = 2048;\\n\\tconst cost = ns.getPurchasedServerCost(wantedRam);\\n\\t// run the main script\\n\\twhile(true) {\\n\\t\\t// ns.tprint(\\\"Cost: \\\" + formatMoney(cost));\\n\\t\\tlet nextServerNum = ns.getPurchasedServers().length;\\n\\t\\twhile(nextServerNum < maxPurchasedServers && cost < ns.getPlayer().money) {\\n\\t\\t\\tif (ns.purchaseServer(\\\"zombie-\\\" + nextServerNum, wantedRam)) {\\n\\t\\t\\t\\tns.print(\\\"Purchased new server: zombie-\\\" + nextServerNum + \\\" | \\\" + wantedRam);\\n\\t\\t\\t\\tlog.success(\\\"Purchased new server: zombie-%(num)s - %(ram)sM\\\", { num: nextServerNum, ram: wantedRam});\\n\\t\\t\\t\\tnextServerNum++;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// if we fail to buy a server break out.\\n\\t\\t\\t\\tns.print(\\\"Failed to purchase the server, something went wrong.\\\");\\n\\t\\t\\t\\tlog.error(\\\"Failed to purchase a server, something went wrong: %(money)s / %(price)\\\", { money: ns.getPlayer().money, price: cost })\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t// TODO: find best way to analyze and purchase hacknet nodes.\\n\\t\\t\\n\\t\\t//TODO: make this purchase TOR + programs (requires Source file 4)\\n\\n\\t\\tawait ns.sleep(30000);\\n\\t}\\n}\",\"filename\":\"upgrades.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"formatting.js\",\"url\":\"blob:file:///484906c5-fe7b-4f1a-ba69-8be760a1e73a\"},{\"filename\":\"upgrades.js\",\"url\":\"blob:file:///72e5f7fa-aa56-4faf-9bd1-4dcdc80aa944\"}],\"ramUsage\":6.85,\"server\":\"home\",\"_hash\":\"d549d7a94d67a7109676aa8518d0e1ec548122d1fb49010377bdf9e2d8b432f5\",\"moduleSequenceNumber\":331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"getPurchasedServers\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nimport { findServers, getRootForServer } from \\\"./util.js\\\";\\nimport { Zombie } from './zombie.js';\\nimport * as Formatter from './formatting.js';\\nimport * as logger from \\\"./log.js\\\";\\n\\n/** \\n * Main control script, scans all potential servers at startup, selects \\n * the best one to hack based on calculated statics and then starts up hacks\\n * on every available server.\\n * @see {Zombie}\\n * @see {findAllServers}\\n * @see {logger}\\n * \\t\\n *\\n * @param {NS} ns\\n **/\\nexport async function main(ns) {\\n\\t// initialize our logging system\\n\\tlogger.initialize(ns);\\n\\tns.disableLog(\\\"sleep\\\");\\n\\tns.disableLog(\\\"exec\\\");\\n\\tns.disableLog(\\\"scp\\\");\\n\\tns.disableLog(\\\"scan\\\");\\n\\tns.disableLog(\\\"getHackingLevel\\\");\\n\\n\\t// run the main script\\n\\tawait control(ns);\\n}\\n\\n/**\\n * Current algorithm:\\n * -> count total server capacity of available threads amongst all rooted servers\\n * -> Split total number of threads into ratio of grow, hack, and weaken (.84, .04, .12)\\n * -> for each server\\n * \\t\\t-> Count number of Grow, Hack, or Weaken already running \\n * \\t\\t-> update number of available threads for the server\\n * -> For each server\\n * \\t\\t-> if grow capacity is not filled start growing up to grow capacity or max threads available on server\\n * \\t\\t\\t-> decrement total grow capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if hack capacity is not filled start hacking up to hack capacity or max threads available on server\\n * \\t\\t\\t-> decrement total hack capacity\\n * \\t\\t\\t-> decrement number of available threads on this server\\n * \\t\\t-> if grow or hack is already running on the server or capacity for both is filled, start weakening\\n * \\n * Current throughput: ~2150 threads targetting 'phantasy' results in ~$2.3 mil/sec and ~160 xp/sec \\n * \\n * TODO: Instead of splitting capacity across all servers based on simple ratios we should create a 'cycle'\\n *       And determine the optimal number of cycles that can be configured against a given target. Each cycle will need to be offset\\n *       So it doesn't conflict with another servers cycle using the same target.\\n * \\n * -> Start weaken 1 (60 sec base runtime)\\n * -> pause 1 for delay between hack/grow completion\\n * -> start weaken 2 (60 sec base runtime)\\n * -> pause 2 for slightly less than 15 seconds * time multiplier (allow to grow to complete before)\\n * -> start grow (45 sec base runtime)\\n * -> pause 3 for ~30 seconds * time multiplier\\n * -> start hack (15 sec base runtime)\\n * -> pause 4 until:\\n * \\t -> hack completes\\n *   -> weaken 1 completes\\n *   -> grow completes\\n *   -> weaken 2 completes\\n * -> restart cycle\\n * \\n * @param {NS} ns\\n * @param {Zombie[]} servers\\n * @param {Zombie} target\\n * @param {boolean} setup\\n */\\nasync function control(ns) {\\n\\tconst home = new Zombie(ns.getServer(\\\"home\\\"), ns);\\n\\tlet servers = await findNewServers(ns);\\n\\tlet runners = servers.filter(zombie => zombie.memory > 0);\\n\\t// if we don't kill off all runners on target servers at startup then we can end up with stuck runners\\n\\tfor (const zombie of runners) {\\n\\t\\tif (zombie.hostname !== \\\"home\\\") {\\n\\t\\t\\tdestroy(zombie);\\n\\t\\t}\\n\\t}\\n\\tlet counter = 0;\\n\\tlet maxThreads = countTotalAvailableThreads(runners);\\n\\tlet targets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\tlogger.info(\\\"%(stage)s | Starting up against %(target)s using %(threads)d total threads.\\\", \\n\\t\\t{ stage: targets[0].setup ? \\\"SETUP\\\" : \\\"HACK\\\", target: targets[0].zombie.hostname, threads: maxThreads });\\n\\twhile (true) {\\n\\t\\tfor (const target of targets) {\\n\\t\\t\\tif (target.setup && target.zombie.isAtMinSecurity() && target.zombie.isAtMaxMoney()) {\\n\\t\\t\\t\\tlogger.success(\\\"Finished hack setup: %s\\\", targets[0].zombie.hostname);\\n\\t\\t\\t\\tns.print(\\\"Finished hack setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t\\ttarget.setup = false;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\t// TODO: adjust ratio reselection to allow for more than 2 servers.\\n\\t\\tif (targets.length === 1 && !targets[0].setup && targets[0].zombie.availableMoney < targets[0].zombie.maxMoney * .20) {\\n\\t\\t\\ttargets[0].setup = true;\\n\\t\\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup: \\\" + targets[0].zombie.hostname);\\n\\t\\t\\t// if (servers[1] && targets[0].threadRatio > .5) {\\n\\t\\t\\t// \\ttargets[0].threadRatio -= .1;\\n\\t\\t\\t// \\ttargets[0].threads = maxThreads * targets[0].threadRatio;\\n\\t\\t\\t// \\tif (!targets[1]) {\\n\\t\\t\\t// \\t\\ttargets[1] = { zombie: servers[1], setup: true, threadRatio: 0 };\\n\\t\\t\\t// \\t\\tns.print(\\\"Target funds draining too quickly. Rerunning setup, and adding new target: \\\" + targets[1].zombie.hostname);\\n\\t\\t\\t// \\t}\\n\\t\\t\\t// \\ttargets[1].threadRatio += .1;\\n\\t\\t\\t// \\ttargets[1].threads = maxThreads - targets[0].threads;\\n\\t\\t\\t// \\tns.print(\\\"Updated hack ratio: \\\" + targets[0].threadRatio + \\\"|\\\" + targets[1].threadRatio);\\n\\t\\t\\t// }\\n\\t\\t}\\n\\t\\t// Every 30 seconds rescan for new servers or exploitable servers\\n\\t\\tif (++counter === 30) {\\n\\t\\t\\thome.updateStats();\\n\\t\\t\\tcounter = 0;\\n\\t\\t\\tservers = await findNewServers(ns);\\n\\t\\t\\trunners = servers.filter(zombie => zombie.memory > 0);\\n\\t\\t\\tif (runners.length === 0 || !targets[0].zombie) {\\n\\t\\t\\t\\tlogger.error(\\\"Something went wrong, runners: %(servers)j - target: %(target)s\\\", {target: targets[0].zombie, servers: runners});\\n\\t\\t\\t\\tns.print(\\\"Something went wrong, runners array is empty or no target was found.\\\");\\n\\t\\t\\t\\tns.exit();\\n\\t\\t\\t}\\n\\n\\t\\t\\trunners.push(home);\\n\\t\\t\\tmaxThreads = countTotalAvailableThreads(runners);\\n\\t\\t\\tlet usedThreads = 0;\\n\\t\\t\\t// TODO: this might be buggy? needs testing\\n\\t\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\tif (servers[index].hostname !== target.zombie.hostname) {\\n\\t\\t\\t\\t\\tif (index === 0) {\\n\\t\\t\\t\\t\\t\\t// if main target resets, just start from scratch\\n\\t\\t\\t\\t\\t\\ttargets = [{ zombie: servers[0], setup: true, threads: maxThreads, threadRatio: 1 }];\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting main target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting main hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\ttarget.zombie = servers[index];\\n\\t\\t\\t\\t\\t\\ttarget.setup = true;\\n\\t\\t\\t\\t\\t\\tlogger.info(\\\"Reselecting secondary target to: %s\\\", target.zombie.hostname);\\n\\t\\t\\t\\t\\t\\tns.print(\\\"Reselecting secondary hack target: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// adjust thread usage based on new maximum threadcount\\n\\t\\t\\t\\tif (usedThreads === 0) {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads * target.threadRatio;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ttarget.threads = maxThreads - usedThreads;\\n\\t\\t\\t\\t\\tusedThreads += target.threads;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t\\n\\t\\tawait doHacks(runners, targets);\\n\\t\\t\\n\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\\n\\n/**\\n * \\n * @param {Zombie[]} servers \\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n */\\nasync function doHacks(servers, targets) {\\n\\t// TODO: script counts don't seem to be tracked property and arren't being updated on the objects properly.\\n\\t// TODO: this seems to be a result of how bitBurner caches objects/classes as Zombie objects seem to not be getting updated properly with\\n\\t// new data in some circumstances, Updating the zombie.class also doesn't cause a refresh properly.\\n\\tlet [growRunners, hackRunners, weakenRunners] = getRunningScriptCounts(servers, targets);\\n\\tfor (const [index, target] of targets.entries()) {\\n\\t\\tconst growRate = target.setup ? target.zombie.shouldGrow ? .9 : 0 : .84;\\n\\t\\tconst hackRate = target.setup ? 0 : .04;\\n\\t\\ttarget.wantedGrowThreads = Math.max(Math.floor((target.threads * growRate) - growRunners[index]), 0);\\n\\t\\ttarget.wantedHackThreads = Math.max(Math.floor((target.threads * hackRate) - hackRunners[index]), 0);\\n\\t\\ttarget.wantedWeakenThreads = Math.max(target.threads - target.wantedGrowThreads - target.wantedHackThreads - weakenRunners[index] - hackRunners[index] - growRunners[index], 0);\\n\\t\\tlogger.debug(\\\"Start: %j\\\", {threads: [target.wantedGrowThreads, target.wantedHackThreads, target.wantedWeakenThreads], running: [growRunners, hackRunners, weakenRunners]});\\n\\t}\\n\\n\\t// ns.print(\\\"Running | Grow: \\\" + runningGrow + \\\" | Hack: \\\" + runningHack + \\\" | Weaken: \\\" + runningWeaken);\\n\\t\\n\\tfor (const zombie of servers) {\\n\\t\\tlet availableRunners = zombie.maxHackThreads - zombie.growRunners - zombie.hackRunners - zombie.weakenRunners;\\n\\t\\tif (availableRunners <= 0) {\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\t\\n\\t\\t\\tconst toWeaken = Math.min(availableRunners, target.wantedWeakenThreads);\\n\\t\\t\\tconst weakenScript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\t// logger.info(\\\"Script: %j\\\", weakenScript);\\n\\t\\t\\tif (toWeaken > 0 && !weakenScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new weaken exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tzombie.ns.print(\\\"Starting new weaken exec on \\\" + zombie.hostname + \\\" with threads: \\\" + toWeaken + \\\" targeting: \\\" + target.zombie.hostname);\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"weaken.js\\\", zombie.hostname, toWeaken, target.zombie.hostname);\\n\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid < 1) {\\n\\t\\t\\t\\t\\tzombie.ns.print(\\\"Failed to startup weaken on: \\\" + zombie.hostname + \\\" running threads: \\\" \\n\\t\\t\\t\\t\\t\\t+ zombie.weakenRunners + \\\" wanted additional: \\\" + toWeaken + \\\" available runners: \\\" + availableRunners);\\n\\t\\t\\t\\t\\tlet serverData = zombie.ns.getServer(zombie.hostname);\\n\\t\\t\\t\\t\\tlogger.warn(\\\"%j\\\", { weakRunners: zombie.weakenRunners,\\n\\t\\t\\t\\t\\t\\ttoWeaken: toWeaken, \\n\\t\\t\\t\\t\\t\\tavailable: availableRunners,\\n\\t\\t\\t\\t\\t\\thostname: zombie.hostname, server: zombie.server, updated: serverData } );\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"weaken.js\\\")[0] + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toWeaken;\\n\\t\\t\\t\\t\\ttarget.wantedWeakenThreads -= toWeaken;\\n\\t\\t\\t\\t}\\n\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toGrow = Math.min(availableRunners, target.wantedGrowThreads);\\n\\t\\t\\tconst growScript = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tlogger.debug(\\\"Calcs: new Grow: %s\\\", toGrow);\\n\\t\\t\\tif (toGrow > 0 && !growScript) {\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new grow exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"grow.js\\\", zombie.hostname, toGrow, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"grow.js\\\")[0] + \\\" -> Money: \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" / \\\" + Formatter.formatMoney(target.zombie.maxMoney));\\n\\t\\t\\t\\t\\tavailableRunners -= toGrow;\\n\\t\\t\\t\\t\\ttarget.wantedGrowThreads -= toGrow;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tconst toHack = Math.min(availableRunners, target.wantedHackThreads);\\n\\t\\t\\tconst hackScript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (toHack > 0 && !hackScript) {\\n\\t\\t\\t\\tawait zombie.ns.sleep(100)\\n\\t\\t\\t\\tlogger.debug(\\\"Starting new hack exec on %(host)s -> %(target)s\\\", { host: zombie.hostname,  target: target.zombie.hostname});\\n\\t\\t\\t\\tconst pid = zombie.ns.exec(\\\"hack.js\\\", zombie.hostname, toHack, target.zombie.hostname);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tawait zombie.ns.sleep(5);\\n\\t\\t\\t\\tif (pid > 0) {\\n\\t\\t\\t\\t\\tzombie.ns.print(zombie.hostname + \\\" \\\" + zombie.getRunningScriptLogs(target.zombie, \\\"hack.js\\\")[0] + \\\" <- Money \\\" + Formatter.formatMoney(target.zombie.availableMoney) + \\\" -> \\\" + target.zombie.currentSecurity);\\n\\t\\t\\t\\t\\tavailableRunners -= toHack;\\n\\t\\t\\t\\t\\ttarget.wantedHackThreads -= toHack;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// logger.info(\\\"End:   %j\\\", {threads: [wantedGrowThreads, wantedHackThreads, wantedWeakenThreads]});\\n}\\n\\n/**\\n * @param {NS} ns\\n * @returns {Promise<Zombie[]>} array of zombies\\n */\\nasync function findNewServers(ns) {\\n\\tlet allServers = findServers({ns: ns, depth: -1, type: \\\"dfs\\\"});\\n\\n\\tfor (const zombie of allServers) {\\n\\t\\tif (zombie.shouldCrack === \\\"true\\\") {\\n\\t\\t\\tgetRootForServer(zombie);\\n\\t\\t}\\n\\t\\tawait zombie.uploadFiles([\\\"weaken.js\\\", \\\"hack.js\\\", \\\"grow.js\\\"]);\\n\\t\\tzombie.updateStats();\\n\\t}\\n\\tlet rooted = allServers.filter(zombie => zombie.root).sort((a, b) => b.currentRating - a.currentRating);\\n\\treturn Promise.resolve(rooted);\\n}\\n\\n/**\\n * @param {Zombie} server\\n */\\n function destroy(server) {\\n\\treturn server.ns.killall(server.hostname);\\n}\\n\\n/**\\n * @param {Zombie[]} servers\\n */\\nfunction countTotalAvailableThreads(servers) {\\n\\treturn servers\\n\\t\\t.map(zombie => zombie.maxHackThreads)\\n\\t\\t.reduce((total, num) => total + num);\\n}\\n\\n\\n/**\\n * @param {Zombie[]} servers\\n * @param {{\\n *   zombie: Zombie,\\n *   setup: boolean,\\n *   threads: number,\\n *   threadRatio: number\\n *   }[]} targets\\n * @return {number[][]} runningGrow, runningHack, runningWeaken\\n */\\nfunction getRunningScriptCounts(servers, targets) {\\n\\n\\tlet counts = [[], [], []];\\n\\tfor (let target of targets) {\\n\\t\\ttarget.zombie.updateStats();\\n\\t\\ttarget.growRunners = 0;\\n\\t\\ttarget.hackRunners = 0;\\n\\t\\ttarget.weakenRunners = 0;\\n\\t\\tcounts[0].push(0);\\n\\t\\tcounts[1].push(0);\\n\\t\\tcounts[2].push(0);\\n\\t}\\n\\tfor (let zombie of servers) {\\n\\t\\tzombie.updateStats();\\n\\t\\tzombie.growRunners = 0;\\n\\t\\tzombie.hackRunners = 0;\\n\\t\\tzombie.weakenRunners = 0;\\n\\t\\t\\n\\t\\tfor (const [index, target] of targets.entries()) {\\n\\t\\t\\tlet script = zombie.ns.getRunningScript(\\\"grow.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.growRunners += script.threads;\\n\\t\\t\\t\\ttarget.growRunners += script.threads;\\n\\t\\t\\t\\tcounts[0][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"hack.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.hackRunners += script.threads;\\n\\t\\t\\t\\ttarget.hackRunners += script.threads;\\n\\t\\t\\t\\tcounts[1][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t\\tscript = zombie.ns.getRunningScript(\\\"weaken.js\\\", zombie.hostname, target.zombie.hostname);\\n\\t\\t\\tif (script) {\\n\\t\\t\\t\\tzombie.weakenRunners += script.threads;\\n\\t\\t\\t\\ttarget.weakenRunners += script.threads;\\n\\t\\t\\t\\tcounts[2][index] += script.threads;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\treturn counts;\\n}\",\"filename\":\"/old/oldcontrol.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":8.65,\"server\":\"home\",\"_hash\":\"760e99d456cf8c1f59b08d03ff87b804652819e54c062390e75db947d043d35f\",\"moduleSequenceNumber\":332,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"killall\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\nimport { getConnectionChain } from './util';\\nimport { Logger } from './log';\\n\\n/**\\n * @param {NS} ns \\n * @param {string} hostname \\n */\\n export async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const file = ns.getOwnedSourceFiles()\\n        .find(file => file.n === 4);\\n    if (!file || file.lvl < 1) {\\n        log.error(\\\"Need access to Source File 4 before using this.\\\");\\n        ns.exit();\\n    }\\n    \\n    let [hostname] = ns.args;\\n    if (!hostname) {\\n        log.error(\\\"hostname must be defined\\\");\\n        ns.exit();\\n    }\\n    const connectChain = getConnectionChain(ns, hostname);\\n    if (!connectChain || connectChain.length === 0) {\\n        log.error(\\\"%s not found, unable to connect\\\", hostname);\\n        ns.exit();\\n    }\\n    for (const connector of connectChain) {\\n        if (!ns.connect(connector)) {\\n            ns.connect(\\\"home\\\");\\n            log.error(\\\"Failed to connect to %s during connection chaining\\\", connector);\\n            ns.exit();\\n        }\\n    }\\n}\",\"filename\":\"ssh.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"log.js\",\"url\":\"blob:file:///c7dfeffd-5c8a-4836-b3e1-1c876ecd348e\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///b3bfdb65-8f35-4c68-999e-fcbfdbf9efa8\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///9bf8bf6b-bb18-40ef-bfb0-ef0b4731fc75\"},{\"filename\":\"ssh.js\",\"url\":\"blob:file:///eefefc1b-ea49-4628-8c52-780d16bc9853\"}],\"ramUsage\":40.8,\"server\":\"home\",\"_hash\":\"913fd5fef0433d3e5113fd986bbad741779c55984001fc6790bcc7fe841c9b72\",\"moduleSequenceNumber\":333,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getOwnedSourceFiles\",\"cost\":5},{\"type\":\"fn\",\"name\":\"connect\",\"cost\":32},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":334,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n * @typedef {import('./types/NetscriptDefinitions').Server} Server\\n*/\\n\\nimport { Logger } from \\\"./log.js\\\";\\nimport { findServers } from \\\"./util.js\\\";\\nimport { Zombie } from \\\"./zombie.js\\\";\\n \\n /**  \\t\\n  * This is for testing copied formulas and making sure statistics line up properly, requires Formulas.exe \\n  * once \\n  * @param {NS} ns\\n  **/\\nexport async function main(ns) {\\n    let log = new Logger(ns, false);\\n    const header = \\\" %(sec)s | %(exp)s \\\";\\n    log.info(\\\"ExpGained = 3 + (security * 4.53 * .3)\\\");\\n    \\n    log.info(\\\"\\\");\\n    let servers = findServers({ns: ns, depth: 5})\\n        .map(server => new Zombie(server.server, ns, server.depth));\\n    const format = \\\"%(hostname)15s | %(maxUsefulThreads)3s | %(hackThreads)3s | %(effect)5s | %(hackCalcEffect)5s | %(diff)4s | %(xp)6s | %(myxp)6s | %(xps)6s | %(security)3s | %(currentSecurity)4s | %(level)4s \\\";\\n    log.info(format, { hostname: \\\"Name\\\", maxUsefulThreads: \\\"Use\\\", hackThreads: \\\"Thr\\\", effect: \\\"Eff\\\", hackCalcEffect: \\\"CHack\\\", weakenTime: \\\"Weak\\\", diff: \\\"Diff\\\", xp: \\\"XP\\\", myxp: \\\"MyXP\\\", \\n        xps: \\\"XPPS\\\", security: \\\"Sec\\\", currentSecurity: \\\"CSec\\\",  level: \\\"Lvl\\\"})\\n    for (const server of servers) {\\n        // server.actualWeaken = ns.formulas.hacking.weakenTime(server.server, ns.getPlayer());\\n        server.xp = ns.formulas.hacking.hackExp(server.server, ns.getPlayer()).toFixed(2);\\n        server.myxp = (3 + (server.server.baseDifficulty * ns.getPlayer().hacking_exp_mult *  .3)).toFixed(2);\\n        server.diff = server.server.baseDifficulty;\\n        server.maxUsefulThreads = Math.floor( 41 / (ns.formulas.hacking.hackPercent(server.server, ns.getPlayer()) * 100));\\n        server.hackCalcEffect = (100 * ns.formulas.hacking.hackPercent(server.server, ns.getPlayer())).toFixed(2);\\n        log.info(format, server);\\n    }\\n\\n    \\n    // let test = document.getElementById(\\\"clickable\\\");\\n    // test.style = \\\"display: block; visibility: visible; transform: translate(-10px, -10px);\\\";\\n    // test.id = \\\"unclickable\\\";\\n}\",\"filename\":\"rates.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"formatting.js\",\"url\":\"blob:file:///4d90d78e-036a-4607-9c36-c574f4a3754e\"},{\"filename\":\"zombie.js\",\"url\":\"blob:file:///aaebad0d-c565-44f5-ae8e-c07f925bfab9\"},{\"filename\":\"exploits.js\",\"url\":\"blob:file:///a91c5edf-19f0-494e-a12b-198c96a5d5ed\"},{\"filename\":\"util.js\",\"url\":\"blob:file:///6e27e5f5-fe7d-49c1-9db0-898d0f106cb3\"},{\"filename\":\"log.js\",\"url\":\"blob:file:///a9e25ca6-af2b-43aa-9e67-db3e7f0274ff\"},{\"filename\":\"rates.js\",\"url\":\"blob:file:///5798d9bd-67b8-4292-acec-7ff6cc5f614f\"}],\"ramUsage\":6.85,\"server\":\"home\",\"_hash\":\"78c2da00aaebe409c35a9228adce1784ccb45dd17dc54d07b2cba9d154682986\",\"moduleSequenceNumber\":335,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getRunningScript\",\"cost\":0.3},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\n * @typedef {import('./types/NetscriptDefinitions').NS} NS\\n */\\n\\nlet _spiralizeProblem = {};\\n\\n/** @param {NS} ns **/\\nexport async function main(ns) {\\n    unspiralize(ns, [\\n        [13,36,40,43,39, 7],\\n        [47,34,20,46,39,30],\\n        [14,43,21,35, 5,25],\\n        [40,48,17, 8,21,26],\\n        [13,41,27,11, 5,45],\\n        [48,25,48,16,37,17],\\n        [13,25, 6,49, 4,27],\\n    ]);\\n    ns.tprintf(\\\"%j\\\", _spiralizeProblem.answer);\\n}\\n\\n/**\\n * @param {NS} ns \\n * @param {number[][]} spiral \\n */\\nexport function unspiralize(ns, spiral) {\\n    ns.tprintf(\\\"%j\\\", spiral);\\n    let answer = [];\\n\\n    dir = \\\"right\\\";\\n    let totalElements = spiral[0].length * spiral.length;\\n    while (answer.length < totalElements) {\\n        switch (dir) {\\n            case \\\"left\\\":\\n                const last = spiral.length - 1;\\n                while (spiral[last].length > 0) {\\n                    answer.push(spiral[last].pop());\\n                }\\n                spiral.pop();\\n                break;\\n            case \\\"up\\\":\\n                for (let i = spiral.length - 1; i >= 0; i--) {\\n                    answer.push(spiral[i].shift());\\n                }\\n                break;\\n            case \\\"down\\\":\\n                for (let i = 0; i < spiral.length; i++) {\\n                    answer.push(spiral[i].pop());\\n                }\\n                break;\\n            case \\\"right\\\":\\n            default:\\n                while (spiral[0].length > 0) {\\n                    answer.push(spiral[0].shift());\\n                }\\n                spiral.shift();\\n        }\\n\\n        switch (dir) {\\n            case \\\"down\\\":\\n                dir = \\\"left\\\";\\n                break;\\n            case \\\"left\\\":\\n                dir = \\\"up\\\";\\n                break;\\n            case \\\"up\\\":\\n                dir = \\\"right\\\";\\n                break;\\n            case \\\"right\\\":      \\n            default:\\n                dir = \\\"down\\\";\\n                break;\\n        }\\n    }\\n    return answer;\\n}\\n\\n\\n// pop elements from the last row\\nfunction walkLeft(ns) {\\n\\n}\\n\\n// shift elements from the first column\\nfunction walkUp (ns) {\\n\\n}\\n\\n// pop elements from the last column\\nfunction walkDown(ns) {\\n\\n}\\n\\n/**\\n * @param {string} dir \\n */\\nfunction getNextDir(dir) {\\n\\n}\",\"filename\":\"solutions.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[{\"filename\":\"solutions.js\",\"url\":\"blob:file:///517a76ef-5056-4f36-a31e-917ac18e173c\"}],\"ramUsage\":1.6,\"server\":\"home\",\"_hash\":\"f39044e1fcc34bf3d09204eea0ef6c85f3d33df679b78cdbf8b822283b920f2f\",\"moduleSequenceNumber\":336,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"14.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":337,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":338,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"ecorp\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":339,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"ecorp\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":340,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":35.08399999999999,\"minDifficulty\":33,\"moneyAvailable\":456998635360,\"moneyMax\":1647460709600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1134,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"94.5.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":341,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":342,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"megacorp\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":343,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"megacorp\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":344,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33.188,\"minDifficulty\":33,\"moneyAvailable\":397161763377,\"moneyMax\":1461888367475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1341,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678141.cct\",\"type\":\"Total Ways to Sum\",\"data\":65,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"15.9.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":345,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":346,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"b-and-a\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"b-and-a\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":348,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":62.816999999999965,\"minDifficulty\":27,\"moneyAvailable\":445030264199,\"moneyMax\":659572962575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1061,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"75.3.3.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,181332]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7817413.41716651,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.271999999997,\"onlineExpGained\":4835503.362726461,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":134,\"ramUsage\":1.75,\"server\":\"blade\",\"threads\":292,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":750,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":350,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"blade\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":351,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"blade\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":352,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":76.5525,\"minDifficulty\":30,\"moneyAvailable\":377036988213,\"moneyMax\":427481373525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":912,\"serverGrowth\":65}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-749050-SpeakersfortheDead.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"))))(((a)))()a()aa\",\"reward\":{\"name\":\"Speakers for the Dead\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-833931.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":878590899,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"55.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":353,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":354,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nwo\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":355,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nwo\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":356,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":35.31800000000001,\"minDifficulty\":33,\"moneyAvailable\":278599633728,\"moneyMax\":975627569475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1120,\"serverGrowth\":84}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"9.3.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":357,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":358,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"clarkinc\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":359,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"clarkinc\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":360,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":19.163999999999994,\"minDifficulty\":15,\"moneyAvailable\":554262199350,\"moneyMax\":554262199350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1220,\"serverGrowth\":55}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"81.9.1.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":511,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,181332]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":7817413.995757111,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.273999999998,\"onlineExpGained\":4835503.362726461,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":135,\"ramUsage\":1.75,\"server\":\"omnitek\",\"threads\":292,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":751,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":362,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnitek\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":363,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnitek\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":364,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":45.75500000000003,\"minDifficulty\":32,\"moneyAvailable\":185283641860,\"moneyMax\":358868450125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":99}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"8.2.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":365,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":366,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"4sigma\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":367,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"4sigma\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":368,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":69,\"hackDifficulty\":25.478,\"minDifficulty\":23,\"moneyAvailable\":450493086375,\"moneyMax\":450493086375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":917,\"serverGrowth\":81}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"97.2.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":369,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":370,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"kuai-gong\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":371,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"kuai-gong\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":372,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":76.59699999999998,\"minDifficulty\":32,\"moneyAvailable\":547935752050,\"moneyMax\":547935752050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1094,\"serverGrowth\":96}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"25.0.0.2\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,726570]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31323199.914505795,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.273999999998,\"onlineExpGained\":19375133.336951915,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":136,\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"threads\":1170,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":752,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":374,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumtech\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumtech\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":95,\"hackDifficulty\":75.42250000000001,\"minDifficulty\":32,\"moneyAvailable\":41951042100,\"moneyMax\":41951042100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1106,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"37.5.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":377,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":378,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"fulcrumassets\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":379,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"fulcrumassets\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":380,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1290,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-894660.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,22],[14,19],[8,12],[2,6],[10,14],[5,10],[6,12],[19,28],[12,19],[25,34],[6,7],[10,13],[7,11],[4,8],[14,23],[19,26],[25,35],[13,14],[18,25],[12,21]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"50.0.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":381,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":382,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"stormtech\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":383,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"stormtech\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":384,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":30.138000000000005,\"minDifficulty\":28,\"moneyAvailable\":11797245891,\"moneyMax\":27495674225,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":890,\"serverGrowth\":70}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"10.4.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":385,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":386,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"defcomm\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":387,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"defcomm\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":388,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":76.5665,\"minDifficulty\":31,\"moneyAvailable\":18153218071,\"moneyMax\":23470742625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":966,\"serverGrowth\":64}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-84368-MegaCorp.cct\",\"type\":\"Total Ways to Sum\",\"data\":47,\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"73.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":389,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":390,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"infocomm\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":391,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"infocomm\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":392,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":73.9215,\"minDifficulty\":28,\"moneyAvailable\":2088767479.0340357,\"moneyMax\":17067521650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":926,\"serverGrowth\":55}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"2.2.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.4011333657,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.274999999998,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":137,\"ramUsage\":1.75,\"server\":\"helios\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":753,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"helios\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":395,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"helios\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":396,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":71.70799999999997,\"minDifficulty\":30,\"moneyAvailable\":16532361425,\"moneyMax\":16532361425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"35.7.7.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,45333]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954353.571263103,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.274999999998,\"onlineExpGained\":1208875.8406816153,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":138,\"ramUsage\":1.75,\"server\":\"vitalife\",\"threads\":73,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":754,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":398,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"vitalife\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":399,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"vitalife\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":400,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"run4theh111z\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":28.115999999999996,\"minDifficulty\":27,\"moneyAvailable\":2280086004.440358,\"moneyMax\":19565149600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":862,\"serverGrowth\":74}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"67.9.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":401,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":402,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"icarus\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":403,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"icarus\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":404,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":74.53599999999996,\"minDifficulty\":31,\"moneyAvailable\":15400216022,\"moneyMax\":23477326550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":876,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"58.0.6.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.7183999548,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.277,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":139,\"ramUsage\":1.75,\"server\":\"univ-energy\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":755,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":406,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"univ-energy\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":407,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"univ-energy\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":408,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":28.739999999999995,\"minDifficulty\":27,\"moneyAvailable\":7902225635,\"moneyMax\":27601371425,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":887,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"35.4.0.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.4546331816,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.278,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":140,\"ramUsage\":1.75,\"server\":\"titan-labs\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":756,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":410,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"titan-labs\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":411,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"titan-labs\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":412,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":24.144,\"minDifficulty\":24,\"moneyAvailable\":3394258616.084535,\"moneyMax\":20999751850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":873,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"47.8.2.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.7273165908,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.278,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":141,\"ramUsage\":1.75,\"server\":\"microdyne\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":757,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":414,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"microdyne\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":415,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"microdyne\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":416,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":27.263999999999992,\"minDifficulty\":23,\"moneyAvailable\":15842124825,\"moneyMax\":15842124825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":800,\"serverGrowth\":88}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"35.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":418,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"taiyang-digital\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":419,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"taiyang-digital\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":420,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":27.935999999999993,\"minDifficulty\":26,\"moneyAvailable\":5789200875,\"moneyMax\":20768028525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":878,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"70.3.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":421,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":422,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"galactic-cyber\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":423,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"galactic-cyber\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":424,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19,\"minDifficulty\":19,\"moneyAvailable\":20431094625,\"moneyMax\":20431094625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":77}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"39.2.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":425,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":426,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aerocorp\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":427,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aerocorp\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":428,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":69.51599999999996,\"minDifficulty\":28,\"moneyAvailable\":19797344156,\"moneyMax\":27518419900,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":922,\"serverGrowth\":62}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"52.4.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963790.9449329071,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.279,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":142,\"ramUsage\":1.75,\"server\":\"omnia\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":758,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":430,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omnia\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":431,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omnia\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":432,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":80.62949999999996,\"minDifficulty\":31,\"moneyAvailable\":21166463951,\"moneyMax\":23462410875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"89.5.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":433,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":434,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-def\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":435,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-def\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":436,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19.052,\"minDifficulty\":19,\"moneyAvailable\":15933287038,\"moneyMax\":24748217500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":792,\"serverGrowth\":73}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"33.3.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":437,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":438,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"applied-energetics\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":439,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"applied-energetics\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":440,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":23.429999999999996,\"minDifficulty\":21,\"moneyAvailable\":17726558919.708675,\"moneyMax\":18268817875,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":829,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336705-MegaCorp.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[122,128,39,131,112,81,171,79,27,63,83,59,80,47,130,142,29,120,52,141,193,43,15,106,11,132,105,29,185],\"reward\":{\"name\":\"MegaCorp\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"70.9.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,45333]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954353.9328822293,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.28,\"onlineExpGained\":1208875.8406816153,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":143,\"ramUsage\":1.75,\"server\":\"solaris\",\"threads\":73,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":759,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":442,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"solaris\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":443,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"solaris\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":444,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":28.464000000000002,\"minDifficulty\":26,\"moneyAvailable\":16476365923.348906,\"moneyMax\":20844295950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":79}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"0.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":445,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":446,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"deltaone\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":447,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"deltaone\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":448,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":66.63400000000003,\"minDifficulty\":27,\"moneyAvailable\":30254093055,\"moneyMax\":36113201775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":858,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"50.0.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.74514986278,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.28,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":144,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":760,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":450,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"global-pharm\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":451,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"global-pharm\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":452,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":27.772000000000002,\"minDifficulty\":27,\"moneyAvailable\":24237844429.83577,\"moneyMax\":42594107250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":783,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"30.3.0.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":453,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":454,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nova-med\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":455,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nova-med\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":456,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"icarus\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":25.091999999999995,\"minDifficulty\":21,\"moneyAvailable\":27865789400,\"moneyMax\":27865789400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":809,\"serverGrowth\":65}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-452799.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[200,98,65,175,69,192,9,9,61,195,57],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"77.9.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":458,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zeus-med\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":459,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zeus-med\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":460,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":29.038,\"minDifficulty\":27,\"moneyAvailable\":6776981544,\"moneyMax\":35295269475,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":840,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"15.7.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.50813299755,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.281,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":145,\"ramUsage\":1.75,\"server\":\"unitalife\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":761,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":462,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"unitalife\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":463,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"unitalife\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":464,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":29.140000000000004,\"minDifficulty\":25,\"moneyAvailable\":26672292475,\"moneyMax\":26672292475,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":798,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"10.3.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.75406649878,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.281,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":146,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":762,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":466,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":467,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":468,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":30.751999999999995,\"minDifficulty\":26,\"moneyAvailable\":8663843925.051899,\"moneyMax\":18372985600,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":739,\"serverGrowth\":57}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"90.1.6.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.52596626955,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.282,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":147,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":763,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":470,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rho-construction\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":471,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rho-construction\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":472,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13.079999999999998,\"minDifficulty\":13,\"moneyAvailable\":7163021975,\"moneyMax\":16989032875,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":475,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"50.7.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.78973304274,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.285,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":148,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":764,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":474,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":475,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":476,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":22.048,\"minDifficulty\":22,\"moneyAvailable\":5985831850.222771,\"moneyMax\":17493623550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":594,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"86.1.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.5794660855,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.285,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":149,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":765,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":478,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"aevum-police\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":479,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"aevum-police\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":480,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":60.054,\"minDifficulty\":24,\"moneyAvailable\":2088245042.8829575,\"moneyMax\":8092835225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":415,\"serverGrowth\":31}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903220.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"38.9.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.1945987148,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.286,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":150,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":766,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":482,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"rothman-uni\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":483,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":484,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":18.299999999999997,\"minDifficulty\":17,\"moneyAvailable\":1918112285.679442,\"moneyMax\":6115180300,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":373,\"serverGrowth\":45}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"26.4.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.2302652587,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.286999999997,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":151,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":767,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":486,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zb-institute\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":487,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zb-institute\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":488,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":28.62599999999999,\"minDifficulty\":24,\"moneyAvailable\":19776472490.82216,\"moneyMax\":26775343125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":753,\"serverGrowth\":80}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"14.4.2.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.80756631467,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.286999999997,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":152,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":768,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":490,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"summit-uni\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":491,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"summit-uni\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":492,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":19.596,\"minDifficulty\":19,\"moneyAvailable\":6622199150,\"moneyMax\":6622199150,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":475,\"serverGrowth\":57}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"62.5.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":493,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":494,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"syscore\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":495,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"syscore\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":496,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":4045840347.737334,\"moneyMax\":13161194050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":597,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"85.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.2659318027,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.287999999997,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":153,\"ramUsage\":1.75,\"server\":\"catalyst\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":769,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":498,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"catalyst\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"catalyst\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":500,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":22.888,\"minDifficulty\":21,\"moneyAvailable\":11043830079.890276,\"moneyMax\":11780525625,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":403,\"serverGrowth\":55}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"32.6.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.63296590134,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.287999999997,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":154,\"ramUsage\":1.75,\"server\":\"the-hub\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":770,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":502,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"the-hub\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":503,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"the-hub\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":504,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":12.264,\"minDifficulty\":12,\"moneyAvailable\":1646234039.6187692,\"moneyMax\":4064216750,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":289,\"serverGrowth\":46}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"53.8.2.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":505,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":506,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"comptek\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":507,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"comptek\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":508,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21.831,\"minDifficulty\":21,\"moneyAvailable\":2053991289.3160093,\"moneyMax\":5528445500,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":343,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"26.6.9.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,45333]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954354.5837966562,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.288999999997,\"onlineExpGained\":1208875.8406816153,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":155,\"ramUsage\":1.75,\"server\":\"netlink\",\"threads\":73,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":771,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":510,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"netlink\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":511,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"netlink\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":512,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":24,\"minDifficulty\":24,\"moneyAvailable\":3747629214.0337067,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":408,\"serverGrowth\":74}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"74.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":513,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":514,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"johnson-ortho\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"johnson-ortho\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":516,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15.052,\"minDifficulty\":15,\"moneyAvailable\":300693849.13064826,\"moneyMax\":2050571050,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":281,\"serverGrowth\":37}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"15.1.4.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":3.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,1242]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53543.96318138265,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.289999999997,\"onlineExpGained\":33119.88604607167,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":156,\"ramUsage\":1.75,\"server\":\"n00dles\",\"threads\":2,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":772,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":518,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"n00dles\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"86.6.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.83431622264,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.289999999997,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":157,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":773,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":522,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"foodnstuff\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":523,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":524,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":8984403.763617512,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"25.0.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.84323285864,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.290999999997,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":158,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":774,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":526,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"sigma-cosmetics\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":527,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":528,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.018,\"minDifficulty\":3,\"moneyAvailable\":44966006,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"94.8.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.84323285864,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.290999999997,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":159,\"ramUsage\":1.75,\"server\":\"joesguns\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":775,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":530,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"joesguns\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"joesguns\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":532,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.0245,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"70.3.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.70429898927,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.291999999998,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":160,\"ramUsage\":1.75,\"server\":\"zer0\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":776,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":534,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"zer0\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":535,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"zer0\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":536,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.496,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"30.0.4.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.85214949463,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.291999999998,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":161,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":777,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":538,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"nectar-net\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":539,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"nectar-net\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":540,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"18.9.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.7399655332,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.293999999998,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":162,\"ramUsage\":1.75,\"server\":\"neo-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":778,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":542,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"neo-net\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":543,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"neo-net\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":544,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"89.1.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.5512641544,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.296,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":163,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":779,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":546,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"silver-helix\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":547,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"silver-helix\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":548,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"comptek\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.332,\"minDifficulty\":10,\"moneyAvailable\":435192009.9900232,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"4.2.3.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.8878160386,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.296,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":164,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":780,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":550,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"hong-fang-tea\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":551,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":552,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"63.2.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.89673267456,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.297,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":165,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"harakiri-sushi\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":555,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":556,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":3,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"61.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.8112986211,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.298,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":166,\"ramUsage\":1.75,\"server\":\"phantasy\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":782,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":558,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"phantasy\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":559,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"phantasy\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":560,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.852,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"36.7.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.8291318931,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.299,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":167,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":783,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":562,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"max-hardware\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":563,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"max-hardware\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":564,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"68.2.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.8291318931,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.299,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":168,\"ramUsage\":1.75,\"server\":\"omega-net\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":784,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":566,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"omega-net\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":567,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"omega-net\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":568,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":12,\"minDifficulty\":12,\"moneyAvailable\":1418391991.4813683,\"moneyMax\":1648830625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":210,\"serverGrowth\":37}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"62.0.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":569,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":570,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"crush-fitness\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":571,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"crush-fitness\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":572,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":15.62,\"minDifficulty\":14,\"moneyAvailable\":662187973.6986079,\"moneyMax\":1092826925,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":262,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"39.7.1.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.84696516505,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.3,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":169,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":785,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":574,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"iron-gym\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":575,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"iron-gym\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":576,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.032,\"minDifficulty\":10,\"moneyAvailable\":148297565.33790743,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"44.1.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.6939303301,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.3,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":170,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":786,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":578,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"millenium-fitness\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":579,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":580,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.112,\"minDifficulty\":18,\"moneyAvailable\":975458468.7340826,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":520,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"56.0.5.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":63,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,22356]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":963791.7295968741,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.301,\"onlineExpGained\":596157.9488292872,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":171,\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"threads\":36,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":787,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":582,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"powerhouse-fitness\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":583,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"powerhouse-fitness\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":584,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":21.247999999999998,\"minDifficulty\":20,\"moneyAvailable\":13296496564.331985,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":958,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"23.4.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":585,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":586,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"snap-fitness\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":587,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"snap-fitness\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":588,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.194,\"minDifficulty\":19,\"moneyAvailable\":5906457306.072704,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":706,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"88.4.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,45333]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954355.5240063844,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.302,\"onlineExpGained\":1208875.8406816153,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":172,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"threads\":73,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":788,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":590,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":591,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":592,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-664331-NiteSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"121894801046\",-62],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"78.8.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":127.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,45333]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1954355.5240063844,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.302,\"onlineExpGained\":1208875.8406816153,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":173,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"threads\":73,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":789,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":594,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":595,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":596,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":350,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"3.9.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":31.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,11178]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":481895.90046498104,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.303,\"onlineExpGained\":298078.9744146436,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":174,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"threads\":18,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":790,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":598,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":599,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":600,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"77.5.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":15.75,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,5589]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":240947.95023249052,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.303,\"onlineExpGained\":149039.4872073218,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":175,\"ramUsage\":1.75,\"server\":\".\",\"threads\":9,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":791,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":602,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\".\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":603,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\".\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":604,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":511,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"37.0.7.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2484]},\"filename\":\"weakenloop.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":107087.98580700521,\"offlineMoneyMade\":0,\"offlineRunningTime\":27022.304999999997,\"onlineExpGained\":66239.77209214334,\"onlineMoneyMade\":0,\"onlineRunningTime\":1411.0100000001814,\"pid\":176,\"ramUsage\":1.75,\"server\":\"CSEC\",\"threads\":4,\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///74618580-413d-49fa-8b7d-8fc90158cc39\"}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"weakenloop.js\",\"url\":\"blob:file:///77c64fc1-26fa-4730-800d-3252ade54e07\"}],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":792,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":606,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"CSEC\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":607,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"CSEC\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":608,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"6.5.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":609,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":610,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"The-Cave\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":611,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"The-Cave\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":612,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"35.7.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"58.1.6.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    let [hostname] = ns.args;\\n\\twhile(true) {\\n\\t\\tawait ns.weaken(hostname);\\n\\t}\\n}\",\"filename\":\"weakenloop.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"8ea45b8428e093a2cc4ca1d9b22303f93f61f364aca79693a99216dc4d7511d4\",\"moduleSequenceNumber\":613,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.weaken(target);\\n}\",\"filename\":\"weaken.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"7e0d558e273b28b5d87f060c5b0396f50bc2f52b4f4812414ede3cf7bffa0c4c\",\"moduleSequenceNumber\":614,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.hack(target);\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"darkweb\",\"_hash\":\"f81854e3f657efde6de847e633085c8132a431a012adacaeb1c02f79384f29e7\",\"moduleSequenceNumber\":615,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {import('./types/NetscriptDefinitions').NS} ns **/\\nexport async function main(ns) {\\n\\tconst [target] = ns.args;\\n\\tif (!target) {\\n\\t\\texit;\\n\\t}\\n\\tawait ns.grow(target);\\n}\",\"filename\":\"grow.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"darkweb\",\"_hash\":\"66bea27788db13ff6f19a1926cf77aa4496906e8190e0e795aafbfc92abdce8f\",\"moduleSequenceNumber\":616,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":352099.7206809445,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":30113.205440270925,\"favor\":1.5038,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":251502.6529606202,\"favor\":107.0002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":71.0005,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":22.0013,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":55.0007,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":84.0004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":2.0019,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":19.0055,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.1784578126143237,\"favor\":10.0017,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"ECorp\",\"playerReputation\":16.70824521030019}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":13827.534608302147}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":202.5725,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1141920.9595985364}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":147.9049,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":935949.253921617}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":162.0509,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":986354.9039432441}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":101.7316,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":54.3088,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":30.1555,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":27.7217,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":128.7498,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":9.9014,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":93629.81746450662}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Speakers for the Dead\",\"playerReputation\":836000.6587270206}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"The Dark Army\",\"playerReputation\":35017.947271944104}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":53.8979,\"isBanned\":false,\"isMember\":true,\"name\":\"The Syndicate\",\"playerReputation\":351549.7128677171}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":117.7762,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":788371.5819486562}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":91.9146,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":720328.5668841489}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":141.139,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":122.9039,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":387979.09935355897}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":145.3243,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":415748.9630441042}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"nuke\":\"run NUKE.exe\",\"ll\":\"ls\",\"man\":\"help\",\"init\":\"wget http://localhost:8000/init.js init.js; wget http://localhost:8000/deployment/self-update.js deployment/self-update.js\",\"serverinfo\":\"run serverinfo.js\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":3575.4229916285904,\"lastPrice\":3575.5936665271934,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":false,\"otlkMag\":21.208531470016926,\"otlkMagForecast\":31.03751592035545,\"cap\":30454362,\"spreadPerc\":0.4,\"shareTxForMovement\":32093,\"shareTxUntilMovement\":32093,\"totalShares\":88800000,\"maxShares\":17800000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":47837.788558908236,\"lastPrice\":47835.64490036081,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.46,\"b\":false,\"otlkMag\":18.108762540565216,\"otlkMagForecast\":31.411022133215457,\"cap\":456832297,\"spreadPerc\":0.4,\"shareTxForMovement\":77765,\"shareTxUntilMovement\":77765,\"totalShares\":76800000,\"maxShares\":15400000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":6974.250552408631,\"lastPrice\":6973.7681916150605,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":false,\"otlkMag\":12.366141713279626,\"otlkMagForecast\":36.75215755344575,\"cap\":369515537,\"spreadPerc\":0.1,\"shareTxForMovement\":77931,\"shareTxUntilMovement\":77931,\"totalShares\":86100000,\"maxShares\":17200000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":38674.984756343256,\"lastPrice\":38672.272202726155,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":12.531515865507766,\"otlkMagForecast\":64.80408526083423,\"cap\":109166801,\"spreadPerc\":0.3,\"shareTxForMovement\":67941,\"shareTxUntilMovement\":67941,\"totalShares\":110500000,\"maxShares\":22100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":110795.933942017,\"lastPrice\":110789.45810614018,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":16.024516387159174,\"otlkMagForecast\":34.64845914499383,\"cap\":575788928,\"spreadPerc\":0.1,\"shareTxForMovement\":65619,\"shareTxUntilMovement\":65619,\"totalShares\":45100000,\"maxShares\":9000000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":18440.56577958469,\"lastPrice\":18438.697638262132,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":false,\"otlkMag\":16.348296412352223,\"otlkMagForecast\":34.45197493330797,\"cap\":377887004,\"spreadPerc\":0.7,\"shareTxForMovement\":33262,\"shareTxUntilMovement\":33262,\"totalShares\":34400000,\"maxShares\":6900000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":20272.865913220718,\"lastPrice\":20274.40639262233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":false,\"otlkMag\":7.133861526352535,\"otlkMagForecast\":40.296071636520566,\"cap\":140366115,\"spreadPerc\":0.2,\"shareTxForMovement\":77879,\"shareTxUntilMovement\":77879,\"totalShares\":74200000,\"maxShares\":14800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":30935.414719839184,\"lastPrice\":30939.242137076537,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":true,\"otlkMag\":30.817400796453377,\"otlkMagForecast\":77.70405794060842,\"cap\":555874506,\"spreadPerc\":0.2,\"shareTxForMovement\":41727,\"shareTxUntilMovement\":41727,\"totalShares\":65000000,\"maxShares\":13000000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":16948.596412246403,\"lastPrice\":16950.08242450674,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.9,\"b\":true,\"otlkMag\":6.776817758344513,\"otlkMagForecast\":56.477855453027175,\"cap\":398175018,\"spreadPerc\":1,\"shareTxForMovement\":92871,\"shareTxUntilMovement\":92871,\"totalShares\":51200000,\"maxShares\":10200000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":30487.743965488044,\"lastPrice\":30485.813521120857,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":8.932670503368358,\"otlkMagForecast\":59.32952279175104,\"cap\":198524069,\"spreadPerc\":0.8,\"shareTxForMovement\":38211,\"shareTxUntilMovement\":38211,\"totalShares\":78000000,\"maxShares\":15600000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":13937.791292601123,\"lastPrice\":13936.949499114993,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":8.34504358864925,\"otlkMagForecast\":58.23446366080675,\"cap\":93740907,\"spreadPerc\":0.7,\"shareTxForMovement\":37121,\"shareTxUntilMovement\":37121,\"totalShares\":51800000,\"maxShares\":10400000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":30423.0934753704,\"lastPrice\":30425.434880729532,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":7.29181598919544,\"otlkMagForecast\":41.97155840479499,\"cap\":111388356,\"spreadPerc\":0.4,\"shareTxForMovement\":67973,\"shareTxUntilMovement\":67973,\"totalShares\":106500000,\"maxShares\":21300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":8985.89682614433,\"lastPrice\":8985.29283931078,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":7.8974508393593705,\"otlkMagForecast\":57.781172560230736,\"cap\":313445863,\"spreadPerc\":0.9,\"shareTxForMovement\":55357,\"shareTxUntilMovement\":55357,\"totalShares\":41300000,\"maxShares\":8300000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":19200.75154022834,\"lastPrice\":19201.742920431836,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":11.239642317296001,\"otlkMagForecast\":40.69510160125094,\"cap\":144678895,\"spreadPerc\":0.5,\"shareTxForMovement\":98544,\"shareTxUntilMovement\":98544,\"totalShares\":38500000,\"maxShares\":7700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":17911.000804082538,\"lastPrice\":17909.953936228547,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":5.482250502538798,\"otlkMagForecast\":54.450650665885995,\"cap\":161993895,\"spreadPerc\":1,\"shareTxForMovement\":63376,\"shareTxUntilMovement\":63376,\"totalShares\":44200000,\"maxShares\":8800000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":10880.574733627644,\"lastPrice\":10881.306120350158,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":5.9854305120418045,\"otlkMagForecast\":55.5825511999308,\"cap\":57708728,\"spreadPerc\":0.4,\"shareTxForMovement\":111894,\"shareTxUntilMovement\":111894,\"totalShares\":71600000,\"maxShares\":14300000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":28357.74284941198,\"lastPrice\":28355.532942673257,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":false,\"otlkMag\":8.184411469765815,\"otlkMagForecast\":42.16009411208596,\"cap\":305734608,\"spreadPerc\":0.5,\"shareTxForMovement\":104321,\"shareTxUntilMovement\":104321,\"totalShares\":39200000,\"maxShares\":7800000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":25718.36392940812,\"lastPrice\":25719.84215764598,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.59,\"b\":true,\"otlkMag\":12.639350633969004,\"otlkMagForecast\":62.93766791812754,\"cap\":688761046,\"spreadPerc\":0.9,\"shareTxForMovement\":109787,\"shareTxUntilMovement\":109787,\"totalShares\":23700000,\"maxShares\":4700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":22970.71398811713,\"lastPrice\":22972.32520177919,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":false,\"otlkMag\":7.090809674465706,\"otlkMagForecast\":43.35189147336239,\"cap\":281932475,\"spreadPerc\":0.8,\"shareTxForMovement\":57675,\"shareTxUntilMovement\":57675,\"totalShares\":31600000,\"maxShares\":6300000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":609.7322023239924,\"lastPrice\":609.8795139279364,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.48,\"b\":true,\"otlkMag\":6.2520723562725,\"otlkMagForecast\":55.98958551367808,\"cap\":24456568,\"spreadPerc\":1.1,\"shareTxForMovement\":40249,\"shareTxUntilMovement\":40249,\"totalShares\":108900000,\"maxShares\":21800000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4508.147787454763,\"lastPrice\":4507.620830951949,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.2,\"b\":true,\"otlkMag\":6.565346099868209,\"otlkMagForecast\":55.94372306312803,\"cap\":129381357,\"spreadPerc\":1.2,\"shareTxForMovement\":87085,\"shareTxUntilMovement\":87085,\"totalShares\":49700000,\"maxShares\":9900000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":2598.007610247312,\"lastPrice\":2597.8304546050817,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":8.071421076358252,\"otlkMagForecast\":44.35355862916845,\"cap\":45081176,\"spreadPerc\":0.3,\"shareTxForMovement\":65866,\"shareTxUntilMovement\":65866,\"totalShares\":51800000,\"maxShares\":10400000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":12018.025066000568,\"lastPrice\":12015.707347553462,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.98,\"b\":true,\"otlkMag\":7.9450160779016015,\"otlkMagForecast\":57.796523913550956,\"cap\":146588516,\"spreadPerc\":1,\"shareTxForMovement\":32827,\"shareTxUntilMovement\":32827,\"totalShares\":32200000,\"maxShares\":6400000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":3373.7320207902058,\"lastPrice\":3373.1930922350884,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.64,\"b\":true,\"otlkMag\":6.189251120685879,\"otlkMagForecast\":55.01478870449267,\"cap\":85507828,\"spreadPerc\":1,\"shareTxForMovement\":75356,\"shareTxUntilMovement\":75356,\"totalShares\":25700000,\"maxShares\":5100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":7707.612858164154,\"lastPrice\":7706.9971921249635,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":true,\"otlkMag\":1.6137167344081058,\"otlkMagForecast\":50.536984340509875,\"cap\":46955007,\"spreadPerc\":0.9,\"shareTxForMovement\":110521,\"shareTxUntilMovement\":110521,\"totalShares\":35700000,\"maxShares\":7100000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":13148.005591953988,\"lastPrice\":13151.745740717644,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.92,\"b\":true,\"otlkMag\":6.463705478645566,\"otlkMagForecast\":54.36514759188149,\"cap\":44508671,\"spreadPerc\":1.6,\"shareTxForMovement\":46378,\"shareTxUntilMovement\":46378,\"totalShares\":18100000,\"maxShares\":3600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2424.019749593313,\"lastPrice\":2423.7977918073675,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":false,\"otlkMag\":5.634684651542965,\"otlkMagForecast\":46.471262421785596,\"cap\":8259630,\"spreadPerc\":1.3,\"shareTxForMovement\":53970,\"shareTxUntilMovement\":53970,\"totalShares\":13900000,\"maxShares\":2800000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":1488.8481101600494,\"lastPrice\":1488.9539914927645,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":4.985061933143396,\"otlkMagForecast\":53.09125411497843,\"cap\":45111305,\"spreadPerc\":0.8,\"shareTxForMovement\":139753,\"shareTxUntilMovement\":139753,\"totalShares\":17600000,\"maxShares\":3500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":3899.445268693139,\"lastPrice\":3898.5299674241965,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.41,\"b\":false,\"otlkMag\":9.253397574646167,\"otlkMagForecast\":40.57549327914431,\"cap\":52508944,\"spreadPerc\":0.9,\"shareTxForMovement\":60987,\"shareTxUntilMovement\":60987,\"totalShares\":8600000,\"maxShares\":1700000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":2690.1564473617987,\"lastPrice\":2690.958393330871,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.06,\"b\":true,\"otlkMag\":7.364819456821859,\"otlkMagForecast\":58.3671770276411,\"cap\":9752620,\"spreadPerc\":0.9,\"shareTxForMovement\":43535,\"shareTxUntilMovement\":43535,\"totalShares\":57000000,\"maxShares\":11400000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":4446.98205726226,\"lastPrice\":4447.532250493361,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.27,\"b\":false,\"otlkMag\":15.515222150132423,\"otlkMagForecast\":34.39082153995864,\"cap\":17289412,\"spreadPerc\":1.4,\"shareTxForMovement\":61210,\"shareTxUntilMovement\":61210,\"totalShares\":92600000,\"maxShares\":18500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":41614.87540438349,\"lastPrice\":41611.713444564804,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.78,\"b\":true,\"otlkMag\":8.969679037650424,\"otlkMagForecast\":58.94840022807835,\"cap\":572739652,\"spreadPerc\":0.6,\"shareTxForMovement\":111528,\"shareTxUntilMovement\":111528,\"totalShares\":13100000,\"maxShares\":2600000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":41717.76979369548,\"lastPrice\":41715.41273344824,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":true,\"otlkMag\":13.26054293371506,\"otlkMagForecast\":63.405937834423284,\"cap\":91123735,\"spreadPerc\":0.6,\"shareTxForMovement\":204965,\"shareTxUntilMovement\":204965,\"totalShares\":26300000,\"maxShares\":5300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":214232,\"lastUpdate\":1642444003229,\"ticksUntilCycle\":47}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":2,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"UseIEC60027_2\":false,\"ExcludeRunningScriptsFromSave\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true}}","VersionSave":"9","AllGangsSave":"","LastExportBonus":"1642444005153","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}","SaveTimestamp":"1642444005176"}}